
{
	"CcoAbilityCollectionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for an AbilityCollection for nested abilities",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAbilityCollectionRecord",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitDetails"
					}
				],
				"doc" : "Returns the primary ability of this collection for the given unit",
				"name" : "PrimaryAbilityForUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbilityDetails"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitDetails"
					}
				],
				"doc" : "Returns the collection's icon file path for the given unit",
				"name" : "IconPathForUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitDetails"
					}
				],
				"doc" : "Returns the attributes associated with this collection and given unit (CcoUnitDetails)",
				"name" : "AttributesForUnit",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitDetails"
					}
				],
				"doc" : "Returns the unit abilities associated with this collection and given unit (CcoUnitDetails)",
				"name" : "AbilitiesForUnit",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns a list of all CcoAbilityCollection records",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAbilityCollectionRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitAbility"
					}
				],
				"doc" : "Hides a component based on record is_hidden entry",
				"name" : "ShouldHideAbilityDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitAbilityDetails"
					}
				],
				"doc" : "Returns the sort order for a given ability",
				"name" : "AbilitySortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoAbilityRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAbilityRecord",
		"symbols" : 
		[
			
			{
				"name" : "ViewInDb",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnScreenDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnScreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Ability",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoActionResultRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoActionResultRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetEffectBundleTurns",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActorEffectBundleTurns",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActorEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoAdviceLevelRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAdviceLevelRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AdvisorName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "InfoText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Text",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SubCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AdviceThread",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoAdvisor" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAdvisor",
		"symbols" : 
		[
			
			{
				"name" : "ClearHistory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AdviceHistoryList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoAgentActionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAgentActionRecord",
		"symbols" : 
		[
			
			{
				"name" : "AgentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UniqueId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChanceOfSuccess",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CriticalFailureProportionModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OpportuneFailureProportionModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CriticalSuccessProportionModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedActionDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedActionDescriptionKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedActionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedActionNameKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoAgentCultureDetailRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAgentCultureDetailRecord",
		"symbols" : 
		[
			
			{
				"name" : "DescriptionKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenNameKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CultureContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Agent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecruitableInUi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SmallIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Gender",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentRecruitedMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Season",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AssociatedUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoAgentRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for an AGENT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAgentRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the agent is a general",
				"name" : "IsGeneral",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the agent is playable",
				"name" : "Playable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns how much line of sight the agent has",
				"name" : "LineOfSight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the amount of move points the agent has",
				"name" : "MovePoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the culture details context for the agent record, using optionally provided culture key",
				"name" : "CultureDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentCultureDetailRecord"
				}
			},
			
			{
				"doc" : "Returns the key of the agent record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list of UnlockedByPooledResourceSetList that will unlock this agent, if any",
				"name" : "UnlockedByPooledResourceSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPooledResourceThresholdOperationSetRecord"
				}
			},
			
			{
				"doc" : "Returns a list of all agent records in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"doc" : "Returns the sort order for the agent record",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the encyclopedia url of the agent",
				"name" : "EncyclopediaUrl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if the agent has an encyclopedia entry",
				"name" : "InEncyclopedia",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns how many agents of this type a faction can have",
				"name" : "FactionCap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the portait override path",
				"name" : "PortraitOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoAgentSubtypeAgentPair" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAgentSubtypeAgentPair",
		"symbols" : 
		[
			
			{
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"name" : "AgentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"name" : "AgentSubtypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			}
		]
	},
	"CcoAgentSubtypeRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for agent_subtypr_record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAgentSubtypeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this subtype can be loaded in campaign",
				"name" : "CanBeLoadedInCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this subtype can be saved/loaded",
				"name" : "IsSaveable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this agent subtype can cast spells",
				"name" : "IsCaster",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a string with the name override key",
				"name" : "OnscreenNameOverrideKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the name override for this agent subtype if any",
				"name" : "OnscreenNameOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this agent subtype can be auto generated",
				"name" : "AutoGenerate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "If this subtype is an unique agent, returns the agent record of it",
				"name" : "UniqueAgentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoAgentRecord"
					}
				],
				"doc" : "Returns the pair of this agent subtype and the agent record passed in",
				"name" : "AgentSubtypeAgentPairContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeAgentPair"
				}
			},
			
			{
				"doc" : "Returns a list with all agent subtypes in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"doc" : "Returns a list with all ancillary quests associated with this agent subtype, if any",
				"name" : "CharacterAncillaryQuestList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterAncillaryQuestUiDetailRecord"
				}
			},
			
			{
				"doc" : "Returns true if it has a female name",
				"name" : "HasFemaleName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the max number of characters that can have this agent subtype",
				"name" : "Cap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this agent subtype should show in UI",
				"name" : "ShowInUi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the description override if any",
				"name" : "DescriptionTextOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the associated unit override if any",
				"name" : "AssociatedUnitOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the small image path of this agent subtype",
				"name" : "SmallIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoAncillariesCategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for an ancillaries_category_record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAncillariesCategoryRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a localised default name, for when no ancillary of this category is equipped",
				"name" : "DefaultEntryName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns an int with the category sort order",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the name of the icon that is used for this category",
				"name" : "IconName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised name of the category",
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string from the category enum",
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary catgeory should be hidden in ui",
				"name" : "IsHidden",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Returns the number of ancillaries that can be equipped into this category per category for a (optionally provided) faction, e.g. 3 for runes",
				"name" : "NumAllowedPerCharacterForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list with all entries from the ancillaries_category_table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillariesCategoryRecord"
				}
			},
			
			{
				"doc" : "Returns true if items from this category can be fused",
				"name" : "IsFusable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a localised default tooltip, for when no ancillary of this category is equipped",
				"name" : "DefaultEntryTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoAncillariesSubcategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Context wrapper for a ANCILLARIES_SUBCATEGORY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAncillariesSubcategoryRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this subcategory is a rune",
				"name" : "IsRune",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of all subcategories in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillariesSubcategoryRecord"
				}
			},
			
			{
				"doc" : "Returns the subcategory string/key",
				"name" : "Subcategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised name of the subcategory",
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoAncillaryRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a ancillary_record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAncillaryRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a string showing the message to use when an ancillary is granted by tech etc.",
				"name" : "GrantedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list with agent subtypes that can equip this ancillary",
				"name" : "IncludedAgentSubtypesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"doc" : "Returns a string with the state name that should be set on the frame based on the ancillary category",
				"name" : "FrameState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with the agents that can equip this ancillary",
				"name" : "IncludedAgentsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"doc" : "Returns a string explaining the reason why this ancillary was dropped",
				"name" : "ExplanationText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the rarity state of the ancillary category",
				"name" : "RarityState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of the ancillary set that this belongs to",
				"name" : "AncillarySetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillarySetRecord"
				}
			},
			
			{
				"doc" : "Returns the maximum expiry age",
				"name" : "MaxExpiryAge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of effects from this ancillary record, includes those not shown in ui",
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the minimum expiry age",
				"name" : "MinExpiryAge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the icon path of the ancillary",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of effects from this ancillary record, prefiltered to not show those that shouldnt appear in ui",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the maximum starting age for this ancillary",
				"name" : "MaxStartingAge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised name of the ancillary",
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the minimum starting age for this ancillary",
				"name" : "MinStartingAge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the uniqueness group where this fits, based on its uniqueness score.",
				"name" : "UniquenessRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillaryUniquenessGroupingRecord"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of the ancillary category",
				"name" : "CategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillariesCategoryRecord"
				}
			},
			
			{
				"doc" : "Returns the localised name of the rarity name of the ancillary, based on the uniqueness score",
				"name" : "RarityName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list with all ancillaries in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"doc" : "Returns true if this item is legendary",
				"name" : "LegendaryItem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns localised description for the ancillary",
				"name" : "ColourText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the context of the ancillary sub category",
				"name" : "SubcategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillariesSubcategoryRecord"
				}
			},
			
			{
				"doc" : "Returns localised text for the ancillary effects",
				"name" : "EffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns an int with the number of turns until this ancillary can be swapped with another of the same category",
				"name" : "TurnsBeforeSwapAllowed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the end date of the ancillary",
				"name" : "EndDate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the uniqueness score of this ancillary",
				"name" : "UniquenessScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the start date of the ancillary",
				"name" : "StartDate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the first linked unit record",
				"name" : "FirstLinkedUnitRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the banner assiciated with this ancillary, used for ancillaries with banner subcategory",
				"name" : "ProvidedBannerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBannerRecord"
				}
			},
			
			{
				"doc" : "Returns an int with the precedence of the ancillary",
				"name" : "Precedence",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the CcoCampaignCharacter that owns this ancillary. Searches in the players faction, or the optionally provided CcoCampaignFaction",
				"name" : "OwningCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the context of the provided bodyguard context, usually used for mounts",
				"name" : "ProvidedBodyguardUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary is unique factionwide",
				"name" : "UniqueToFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Returns true if the passed in faction record can use this ancillary",
				"name" : "CanFactionUseAncillary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary is unique to the world",
				"name" : "UniqueToWorld",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary is immortal",
				"name" : "Immortal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary is randomly dropped",
				"name" : "RandomlyDropped",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a wife ancillary",
				"name" : "IsWifeAncillary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary can be transferred between characters",
				"name" : "Transferrable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary can be destroyed",
				"name" : "CanBeDestroyed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of subcultures that can use this ancillary",
				"name" : "IncludedSubculturesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSubcultureRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the type record associated with this ancillary",
				"name" : "TypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillaryTypeRecord"
				}
			},
			
			{
				"doc" : "Returns a string with the state name that should be set on the icon based on the ancillary category ",
				"name" : "IconState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoAncillarySetRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for an ancillary set record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAncillarySetRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all ancillary sets in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillarySetRecord"
				}
			},
			
			{
				"doc" : "Returns a list of ancillaries that are required for this set to be complete.",
				"name" : "RequiredAncillariesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"doc" : "Returns a list of effects that will be provided by this ancillary set when it completes, includes those not shown in ui",
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns a list of effects that will be provided by this ancillary set when it completes, prefiltered to not show those that shouldnt appear in ui",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the icon path of the set",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the description of the set",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the set",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoAncillaryTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAncillaryTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoAncillaryUniquenessGroupingRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a ancillary_uniqueness_grouping_record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoAncillaryUniquenessGroupingRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all uniqueness groups in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillaryUniquenessGroupingRecord"
				}
			},
			
			{
				"doc" : "Returns true if this items in this group can be fused",
				"name" : "IsFusable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the upper bound of this group",
				"name" : "Max",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the lower bound of this group",
				"name" : "Min",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the ui state for this group",
				"name" : "UiState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the colour of this uniqueness group",
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoArmoryItemRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for armory item record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoArmoryItemRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all the sets this item is part of",
				"name" : "ItemSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemSetRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the context of the variant with the key passed in",
				"name" : "VariantContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmoryItemVariantRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns either the default variant if exists, or the first in the list of variants, for the character passed in",
				"name" : "DefaultOrFirstVariantContextForCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignArmoryItemVariant"
				}
			},
			
			{
				"doc" : "Returns the context of the default variant for this item",
				"name" : "DefaultVariantContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmoryItemVariantRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the slot type record",
				"name" : "SlotTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmorySlotTypeRecord"
				}
			},
			
			{
				"doc" : "Returns true if this item is currently locked by an achievement",
				"name" : "IsLockedByAchievement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the type context of the armory item",
				"name" : "ItemTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmoryItemUiTypeRecord"
				}
			},
			
			{
				"doc" : "Returns the score needed to unlock this item through achievements",
				"name" : "AchievementUnlockScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised description of the record.",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the armory item record.",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns the round when the item was made available to the passed in character",
				"name" : "RoundUnlockedForCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the image path of either the default or the first variant",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if the item or its effects match (possibly partially) the query text given",
				"name" : "MatchesQuery",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the key of the record.",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the first set that has effects (each item should only have max 1 set with effects, rest are used for custom battle)",
				"name" : "DefaultItemSet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmoryItemSetRecord"
				}
			},
			
			{
				"doc" : "Marks the equipment as seen so that HasSeen will return false",
				"name" : "MarkAsSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the user has already 'seen' this ancillary (MarkAsSeen has been called on it). This is to highlight new equipment",
				"name" : "HasSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the armory item records in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemRecord"
				}
			},
			
			{
				"doc" : "Returns a list with the effects provided by this item",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns true if the item is equipped for the character (campaign only)",
				"name" : "IsEquippedForCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the variants of this item",
				"name" : "VariantRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemVariantRecord"
				}
			}
		]
	},
	"CcoArmoryItemSetRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a ARMORY_ITEM_SET_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoArmoryItemSetRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the effect list provided when all items in the set are equipped",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the icon path of the item set",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised description of the item set",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the item set",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all item sets in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemSetRecord"
				}
			},
			
			{
				"doc" : "Returns all the armory items that are part of this set",
				"name" : "ItemList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemRecord"
				}
			},
			
			{
				"doc" : "Returns the effect list provided when all items in the set are equipped, includes those not shown in ui",
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				},
				"tags" : [ "hide_in_uied" ]
			}
		]
	},
	"CcoArmoryItemUiTypeRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a ARMORY_ITEM_UI_TYPE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoArmoryItemUiTypeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the type of the armory items linked to this (generic/khorne/nurgle/tzeentch/slaanesh).",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all records in this table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemUiTypeRecord"
				}
			}
		]
	},
	"CcoArmoryItemVariantRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for an armory item variant record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoArmoryItemVariantRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all armory item variants in the database table.",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemVariantRecord"
				}
			},
			
			{
				"doc" : "Returns a bool that specifies whether this variant is used as the default",
				"name" : "UseAsDefault",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the armory item associated with this item variant",
				"name" : "ArmoryItemContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmoryItemRecord"
				}
			},
			
			{
				"doc" : "Returns the description of this variant",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the item variant",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the image path of this variant",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string with the key of this record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoArmorySlotTypeRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for an armory slot type record.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoArmorySlotTypeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all armory slot type records from the database table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmorySlotTypeRecord"
				}
			},
			
			{
				"doc" : "Returns an int with the sort order",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a the localised name of the slot type",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns a CcoCampaignArmoryItemVariant with the equipped variant in the slot for the character passed in (campaign only)",
				"name" : "EquippedItemVariantForCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignArmoryItemVariant"
				}
			}
		]
	},
	"CcoArmySpecialAbilityRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoArmySpecialAbilityRecord",
		"symbols" : 
		[
			
			{
				"name" : "UnitSpecialAbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EnablesSiegeAssault",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UniqueID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ArmySpecialAbilityKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBannerRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBannerRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PermittedUnitSets",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CombatPotentialAdjustments",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Banner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectBundleRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleAbility" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for a battle ability (EMPIREBATTLE::ABILITY_DETAILS) which has live information for an ability like cooldown time, etc. exposes all information available to UiEd",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleAbility",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoUnitAbility setup for this ability (fixed information that doesnt change during the battle)",
				"name" : "SetupAbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns true if intensity decay is active for the ability",
				"name" : "IntensityDecayIsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Activates the ability for the owner (unit/army)",
				"name" : "PerformAbilityForOwner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if ability's intensity can decay",
				"name" : "IntensityCanDecay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSpecialAbilityPhaseRecord"
					}
				],
				"doc" : "Returns true if supplied CcoSpecialAbilityPhaseRecord is active in any of abilities phase trees",
				"name" : "IsPhaseActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if all recharge contexts for this ability are true (eg engaged in melee)",
				"name" : "IsRechargeEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of CcoPair<CcoStringValue, CcoSpecialAbilityPhaseRecord>; the active phases for each target essentially",
				"name" : "ActivePhaseList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns true if this is an amry ability that can be rewarded as a reign of chaos outcome",
				"name" : "IsReignOfChaosReward",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is an ability that you have to select a target for",
				"name" : "IsTargettedAbility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns amount of time (in seconds) until intensity decay starts",
				"name" : "TimeUntilIntensityDecay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this abiltiy is currently active and applying its effects",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the maximum intensity that modifiable stats of this ability will be multiplied by",
				"name" : "MaxIntensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if the ability has a limited number of uses (queried by RemainingUses)",
				"name" : "HasLimitedUses",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the starting/default intensity that modifiable stats of this ability will be multiplied by",
				"name" : "DefaultIntensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the range in metres that this ability will affect from the cast point",
				"name" : "EffectRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the intensity that modifiable stats of this ability will be multiplied by",
				"name" : "Intensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this ability is currently being targetted by the player",
				"name" : "IsCurrentlyTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this ability can currently be afforded based on any required currencies (see CurrencyCosts)",
				"name" : "CanBePurchased",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a String representing the current state (active/passive/selected/inactive",
				"name" : "CurrentState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the number of remaining uses, -1 if unlimited",
				"name" : "RemainingUses",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoPair<CcoBattleSecondaryCurrencyTypeRecord, int> representing the costs required to activate this ability",
				"name" : "CurrencyCosts",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns the wind up percentage (0-1), 0 being not in windup and 1 being at the point where casts the spell. Wind up is the casting time essentially.",
				"name" : "WindUpPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns joined localised string of disabled reasons for this ability, if any (in melee, etc)",
				"name" : "RechargeDisabledReasonsText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the wind up time remaining in seconds. Wind up is the casting time essentially.",
				"name" : "WindUpTimeRemainingSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns some localised text that explains what left clicking on a button for this ability would currently do (activate, toggle targetting, toggle overcharge, etc)",
				"name" : "LeftClickText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns how much mana is used when activating this ability",
				"name" : "ManaUsed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cooldown percentage if in cooldown (0-1), 0 if not in cooldown",
				"name" : "RechargePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns 0-1 value representing how likely to miscast when activate. A miscast will have negative impacts on the caster and the ability will fail to activate.",
				"name" : "MiscastChance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the cooldown time remaining seconds if ability is in cooldown",
				"name" : "RechargeTimeRemainingSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if abiltiy can currently be activated",
				"name" : "CanCurrentlyPerform",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percent (0-1) the ability is through its active duration (progression until ability finishes), 0 if ability is not currently active",
				"name" : "ActivePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "This is used for circular fills on 3k, where when ability active we unfill the ring (anti-clockwise), then when in cooldown we fill the ring (clockwise), and show the ring full while ability available (so transitions between cooldown being over and ring staying there)",
				"name" : "FillPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if the timer for the intensity decay has started",
				"name" : "IntensityDecayTimerStarted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "",
				"name" : "ActiveTimeRemainingSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoBattleAlliance" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for a battle alliance, exposes all information available to UiEd",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleAlliance",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if we are keeping scores (CpKillScore)",
				"name" : "DoesKeepScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is the player controlled alliance",
				"name" : "IsPlayersAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this faction is the defender in the battle",
				"name" : "IsDefender",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this alliance will win if timer runs out (usually the defender)",
				"name" : "WillWinOnTimeout",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of entitie this alliance started the battle with",
				"name" : "NumEntitiesInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of entities in this alliance",
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of units in this alliance",
				"name" : "NumUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of armies in this alliance",
				"name" : "NumArmies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the score for this alliance, the higher the better the alliance performed (earned by unit experience and capturing capture points)",
				"name" : "CpKillScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the capture point tickets started the battle with",
				"name" : "StartingTickets",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total capture point tickets income rate, per second.",
				"name" : "TicketsIncomePerSecond",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the capture point tickets remaining (when 0 lose if defending)",
				"name" : "TicketsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the index of this alliance",
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the list of armies in this alliance",
				"name" : "ArmyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "For dev purposes, forces win for this alliance by killing all units on other alliances in battle",
				"name" : "DevWinBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied", "debug" ]
			}
		]
	},
	"CcoBattleArmy" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for a battle army, exposes all information available to UiEd",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleArmy",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the name of the player controlling tis army",
				"name" : "PlayerName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the supplies currency for this army",
				"name" : "GlobalCurrency",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the threshold to the next unlockable ability (or the maximum if all are unlocked)",
				"name" : "CurrentArmyAbilityThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if Murderous Prowess feature available",
				"name" : "HasMurderousProwess",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised name of this army's faction",
				"name" : "FactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of this army",
				"name" : "ArmyName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the tickets remaining for this armies alliance",
				"name" : "GlobalScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if Realm of Souls feature available",
				"name" : "HasRealmOfSouls",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the index (ordered by cost) of the army ability specified by given key",
				"name" : "ArmyAbilityIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cp score for this army",
				"name" : "Score",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns directory for faction flag icons - append image name including extension for use in setting images",
				"name" : "FactionFlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if currently alive (has some controllable units still)",
				"name" : "IsAlive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the key for the daemon god that the ability associates with",
				"name" : "AbilityGodName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the unique id for this army (unique across all armies)",
				"name" : "UniqueID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction flag large image filepath - prefer to use FactionFlagDir instead",
				"name" : "FactionFlagLarge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if controlled by local player",
				"name" : "IsLocalPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns if the specified ability key requires currency to activate",
				"name" : "IsAbilityWithCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of men who have died",
				"name" : "NumMenDied",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the Reign of Chaos weighting towards a particular god when rolling for abilities",
				"name" : "GodWeighting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if controlled by a human",
				"name" : "IsHuman",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the faction flag medium image filepath - prefer to use FactionFlagDir instead",
				"name" : "FactionFlagMedium",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the index of this army in this alliance",
				"name" : "ArmyIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current Waaagh percent",
				"name" : "CurrentWaaaghPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the number of units currently alive",
				"name" : "NumUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the faction has the reign of chaos feature (Daemon prince only)",
				"name" : "HasReignOfChaos",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the faction flag small image filepath - prefer to use FactionFlagDir instead",
				"name" : "FactionFlagSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the index of the alliance",
				"name" : "AllianceIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current Waaagh threshold. Need to hit this to trigger a Waaagh",
				"name" : "CurrentWaaaghThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction context for this army",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the cost of the ability at the given by index",
				"name" : "ArmyAbilityIndexCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the maximum number of units allowed at once on the battlefield at any one time",
				"name" : "MaxUnitsCanControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current Waaagh points",
				"name" : "CurrentWaaaghPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleWindsOfMagicPool for this army, controls how much magic has for spell casting",
				"name" : "WindsOfMagicPoolContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleWindsOfMagicPool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the percentage of points you currently have towards ability given by index",
				"name" : "CurrentPercentToArmyAbility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the number of entities started the battle with",
				"name" : "NumEntitiesInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the value require to achieve realms of souls effect",
				"name" : "RealmOfSoulsThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleAlliance for this army",
				"name" : "AllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"doc" : "Returns whether the current cataclysm ability (if it exists) can be used or performed",
				"name" : "CanPerformCataclysmAbility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of entities currently alive",
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the percent complete to activate realm of souls effect",
				"name" : "RealmOfSoulsPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleUnit of the commanding/general unit",
				"name" : "CommandingUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Returns the total units alive and reinforcements available",
				"name" : "NumTotalUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a float with the ai stats modifier",
				"name" : "AiStatsModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the number of units in the reinforcements pool",
				"name" : "NumReinforcements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the list of abilities available to this army",
				"name" : "ArmyAbilitiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns true of the ability specified by given index is unlocked",
				"name" : "IsArmyAbilityUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percent of score vs thresh for murderous prowess",
				"name" : "MurderousProwessPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the list of formation records available to this army",
				"name" : "FormationList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFormationRecord"
				}
			},
			
			{
				"doc" : "Returns true if the daemon feature is available",
				"name" : "HasDaemonFeature",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the amount of murderous prowess score need to achieve to activate effect",
				"name" : "MurderousProwessThresh",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a vector of CcoBattleAbilities that have an army-wide effect",
				"name" : "ArmyWideEffects",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleAbility"
				}
			},
			
			{
				"doc" : "Returns the list of units in this army",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Returns the primary faction colour of this army",
				"name" : "PrimaryColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the murderous prowess score",
				"name" : "MurderousProwessScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if Waaagh feature is available",
				"name" : "HasWaaagh",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the alliance colour for this army (as in colour based on player/ally/enemy/neutral)",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the army ability currency for this army",
				"name" : "ArmyAbilityCurrency",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true when murderous prowess ability should deactivate",
				"name" : "MurderousProwessShouldDeactivate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleBuilding" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleBuilding",
		"symbols" : 
		[
			
			{
				"name" : "PercentOnFire",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "IsEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "CurrentHitpoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "IsUnbreachableWall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "MaxHitpoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "CaptureLocationContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleCapturePoint"
				}
			},
			
			{
				"name" : "DamagePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "BreakForDebugging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"name" : "GateCurrentHitpoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Selects this building in the card manager",
				"name" : "Select",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GateMaxHitpoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Zooms the battle camera to this building",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HoldingAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"name" : "GateDamagePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "HoldingArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"name" : "IsToggleable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsFlammable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "CentralPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"name" : "MissileWeaponContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMissileWeaponRecord"
				}
			},
			
			{
				"name" : "IsDestructable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"name" : "HasMissileWeapon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsDestroyed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the category type name for this type of building.",
				"name" : "CategoryType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "HideTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsSelectable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ShowTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "CategoryIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsGate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Are the linked key building abilities enabled?",
				"name" : "CanUpdateAbilities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "RadarIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsBridge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Returns the list of CcoBattleAbility's that this building owns in context of the specified army",
				"name" : "SpecialAbilitiesListWithArmy",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleAbility"
				}
			},
			
			{
				"doc" : "Returns the description string of the global effects that the building applies",
				"name" : "GlobalEffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "IsIncidental",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of CcoBattleAbility's that this building owns in context of the owning army",
				"name" : "SpecialAbilitiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleAbility"
				}
			},
			
			{
				"doc" : "Returns the description string of the local effects that the building applies",
				"name" : "LocalEffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Does the building have a valid owning army associated with it?",
				"name" : "HasOwner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsOnFire",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleCaptureLocationsManager" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleCaptureLocationsManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns list of owned capture points, showing how many tickets they are scoring per second. Returns CcoSummedValueContext populated with CcoPair compposed of curency source record cco and amount value",
				"name" : "SummaryListForTicketsSources",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSummedValueContext"
				}
			},
			
			{
				"doc" : "Returns how long it will be until all capture points are available, in seconds",
				"name" : "TimeUntilAllCapturePointsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the number of capture tickets that must be earned to fulfil the tickets victory condition",
				"name" : "TicketsGoal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoBattleCapturePoint" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleCapturePoint",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the `mouse_over` value to true or false based on the passed argument.",
				"name" : "SetMouseOver",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Radius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "IsPointBased",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "HoldingUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns true if the capture point currently has a sticky tooltip open for it.",
				"name" : "IsStickyTooltipActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ContributesToVictory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsTimeBased",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns true if the capture point is locked for the passed in alliance",
				"name" : "IsLockedForAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the flag position in world space in VECTOR_4",
				"name" : "FlagPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "The alliance id of the alliance that currently holds this capture point",
				"name" : "CurrentHolderAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the capture point is currently being moused over.",
				"name" : "IsMouseOver",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a position in world space in VECTOR_4",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "The original alliance id for this capture point",
				"name" : "OriginalOwnerAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "ScriptId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns if the current owner of the capture point is allowed to build",
				"name" : "CanCurrentOwnerBuild",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the linked children capture point that would get unlocked after capturing this point, if any",
				"name" : "LinkedChildCapturePointsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleCapturePoint"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "ContestingFactorForAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the linked parent capture point that needs to be captured first before unlocking this one, if it exists",
				"name" : "LinkedParentCapturePointContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleCapturePoint"
				}
			},
			
			{
				"name" : "IsContested",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsNeutral",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "TypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCapturePointTypeRecord"
				}
			},
			
			{
				"name" : "ColourFill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ToggleableSlotsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "ColourBase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"name" : "IsLinkedBuildingDestroyed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ToggleableSlotBarricadesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "ColourForHolder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Enables or disables a pulsing highlight effect on the capture location",
				"name" : "SetHighlight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleableSlotTowersList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "FillPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "CapturePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "UnitsForAlliance",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Does this capture location have an associated building",
				"name" : "HasCaptureBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "HasMoraleEffects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "ContestingProportionForAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "CaptureBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleBuilding"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "CapturePointScoreNormalised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the string name for this capture point type",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ContestingArmycontext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"name" : "CapturePointScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "For dev purposes, captures the capture point immediately for supplied army",
				"name" : "DevCaptureForArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the displayable name for this capture point i.e. the header for the capture point tooltip",
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "HoldingArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "Returns whether the child of this capture point is about to be relocked because this point is being captured",
				"name" : "IsChildNearingReLock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the `sticky_tooltip_active` value to true or false based on the passed argument.",
				"name" : "SetStickyTooltipActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BuildingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns whether this capture point is about to be relocked because its parent is being captured",
				"name" : "IsNearingReLock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ContestingUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoBattleClimateWeatherDescriptionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleClimateWeatherDescriptionRecord",
		"symbols" : 
		[
			
			{
				"name" : "HeatFatigue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SeasonRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "WeatherRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ClimateRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpottingScalar",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Probability",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ColdFatigue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleCurrencyArmySpecialAbilitiesCostValueRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleCurrencyArmySpecialAbilitiesCostValueRecord",
		"symbols" : 
		[
			
			{
				"name" : "CostValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BattleSecondaryCurrencyTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ArmySpecialAbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleCurrencyManager" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleCurrencyManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Takes db key and army unique id and returns CcoSummedValueContext populated with CcoPair compposed of curency source record cco and amount value",
				"name" : "SummaryListForCurrencySources",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSummedValueContext"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Takes db key of ability, int32 for the currency item type enum and CcoBattleArmy and purchases the ability",
				"name" : "PurchaseArmyAbility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes db key of the currency item type and returns int32 of the currency type enum",
				"name" : "CurrencyItemTypeStringToEnum",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes db key of the currency type and returns int32 of the currency type enum",
				"name" : "CurrencyTypeStringToEnum",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Takes db key of the item, int32 for the currency item type enum and CcoBattleArmy and purchases the item",
				"name" : "PurchaseItem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Takes db key of the item, int32 for the currency item type enum and CcoBattleArmy and returns boolean indicating whther the item can be afforded",
				"name" : "CanAffordItem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Takes db key of the item, int32 for the currency item type enum and CcoBattleArmy and returns the cost for that item",
				"name" : "GetCostForItem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes db key of the currency and returns the amount of that currency for the players army",
				"name" : "GetArmyCurrencyForType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoBattleCurrencyUnitAbilitiesCostValueRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleCurrencyUnitAbilitiesCostValueRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CostValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ItemTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrencyTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleCursorContext" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for BATTLE_UI_CURSOR_OVER_CONTEXT, so can get context information about current 3d mouseover",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleCursorContext",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the position of whatever context we are over (unit/building/etc)",
				"name" : "ContextPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns first intersection position with ground",
				"name" : "GroundIntersectPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns first intersection position",
				"name" : "FirstIntersectPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns true if showing attack cursor",
				"name" : "IsAttackCursor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if showing move cursor",
				"name" : "IsMoveCursor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current mouseover can be selected",
				"name" : "IsContextSelectable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if currently intersecting 3d world",
				"name" : "HasIntersections",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current cursor_record key of the cursor being used",
				"name" : "CurrentCursorKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the toggleable slot currently mousing over",
				"name" : "ToggleableSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleToggleableSlot"
				}
			},
			
			{
				"doc" : "Returns the ground type record currently mousing over",
				"name" : "GroundTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoGroundTypeRecord"
				}
			},
			
			{
				"doc" : "Returns the vehicle currently mousing over",
				"name" : "VehicleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleVehicle"
				}
			},
			
			{
				"doc" : "Returns the building currently mousing over",
				"name" : "BuildingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleBuilding"
				}
			},
			
			{
				"doc" : "Returns the entity currently mousing over",
				"name" : "EntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntity"
				}
			},
			
			{
				"doc" : "Returns the unit currently mousing over",
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			}
		]
	},
	"CcoBattleEntity" : 
	{
		"area" : "Battle",
		"doc" : " Component context wrapper for a battle entity, exposes all information available to UiEd",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleEntity",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoBattleEntityRecord context",
				"name" : "EntityRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntityRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set articulation offset of given node, if this is an articulated unit",
				"name" : "DevSetArticulationOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the CcoBattleUnit context",
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Dev command to set collision shape. Valid shapes are circle, ellipse, capsule and lens",
				"name" : "DevSetCollisionShape",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set collision z offset on entity",
				"name" : "DevSetCollisionZOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set collision height on entity",
				"name" : "DevSetCollisionHeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set radii ratio of collision on entity",
				"name" : "DevSetCollisionRadii",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set radius of collision on entity",
				"name" : "DevSetCollisionRadius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Zooms camera to look at this entity",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this is an engine entity",
				"name" : "IsEngine",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a man entity",
				"name" : "IsMan",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if currently reloading",
				"name" : "IsReloading",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if entity still alive",
				"name" : "IsAlive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percentage of how close to being reloaded",
				"name" : "ReloadPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set articulation radius of given node, if this is an articulated unit",
				"name" : "DevSetArticulationHeadOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the remaining reload time in seconds",
				"name" : "ReloadRemainingTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the current position",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set articulation radius of given node, if this is an articulated unit",
				"name" : "DevSetArticulationMaxAngle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Dev command to set articulation radius of given node, if this is an articulated unit",
				"name" : "DevSetArticulationRadius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the BATTLE_ENTITY_RECORD key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBattleEntityRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleEntityRecord",
		"symbols" : 
		[
			
			{
				"name" : "Type",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SoftCollisionOffsetZ",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GradientStrategy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "KnockInterruptsIgnoreChance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SoftCollisionSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeDistancePickTargetSq",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HitReactionsIgnoreChance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeDistanceAdoptChargePoseSq",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CombatReactionRadius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeDistanceCommenceRunSq",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DismemberArmsAliveHpRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinTurningSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeDistancePickTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DismemberHeadAliveHpRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AllowStaticTurnAnim",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasBlood",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeDistanceAdoptChargePose",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AllowTurnToMoveAnim",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanCastProjectile",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeDistanceCommenceRun",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TurnSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "VfxFilterId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "QuarterFireArcCloseCosine",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "StrafeSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxTrackingRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FlyingChargeSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HalfFireArcCloseCosine",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinTrackingRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FireArcClose",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AuraVfx",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ProjectilePenetrationResistance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Deceleration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Height",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Acceleration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Mass",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FlySpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RadiiRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ProjectilePenetrationSpeedChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RunSpeedContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Shape",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ProjectileIntersectionRadiusRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Radius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "WalkSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanClimbLadderAndStairPipes",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleGroup" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleGroup",
		"symbols" : 
		[
			
			{
				"name" : "SelectGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleLock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DestroyGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CreateGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsCreated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GroupId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanLock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FormationContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChangeFormation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsTakingDamage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleLaboratoryInfo" : 
	{
		"area" : "Battle",
		"doc" : "Wrapper for the lab settings of a battle.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleLaboratoryInfo",
		"symbols" : 
		[
			
			{
				"doc" : "Toggles the winds of magic limitless setting",
				"name" : "ToggleWindsOfMagicLimitless",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the morale multiplier value to the one passed in",
				"name" : "SetMoraleMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the fatigue multiplier value",
				"name" : "FatigueMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the unit size multiplier value to the one passed in",
				"name" : "SetUnitSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the explosion radius multiplier value",
				"name" : "ExplosionRadiusMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the impact force multiplier value to the one passed in",
				"name" : "SetImpactForceMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the winds of magic multiplier value",
				"name" : "WindsOfMagicMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the blood multiplier value to the one passed in",
				"name" : "SetBloodMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the damage multiplier value to the one passed in",
				"name" : "SetDamageMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the morale multiplier value",
				"name" : "MoraleMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoLabSettingRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the value for the passed in lab setting to the one passed in",
				"name" : "SetValueForLabSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the single entity scale multiplier value to the one passed in",
				"name" : "SetSingleEntityScaleMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the impact force multiplier value",
				"name" : "ImpactForceMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true of winds of magic is set to limitless",
				"name" : "IsWindsOfMagicLimitless",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the damage multiplier value",
				"name" : "DamageMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the charge bonus multiplier value to the one passed in",
				"name" : "SetChargeBonusMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the unit size multiplier value",
				"name" : "UnitSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the ability cooldown multiplier value to the one passed in",
				"name" : "SetAbilityCooldownMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the blood multiplier value",
				"name" : "BloodMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoLabSettingRecord"
					}
				],
				"doc" : "Returns the value for the passed in lab setting",
				"name" : "ValueForLabSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the ability effect radius multiplier value to the one passed in",
				"name" : "SetAbilityEffectRadiusMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the single entity scale multiplier value",
				"name" : "SingleEntityScaleMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the gravity multiplier value to the one passed in",
				"name" : "SetGravityMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the charge bonus multiplier value",
				"name" : "ChargeBonusMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the projectile penetration multiplier value to the one passed in",
				"name" : "SetProjectilePenetrationMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the ability cooldown multiplier value",
				"name" : "AbilityCooldownMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the ammunition multiplier value to the one passed in",
				"name" : "SetAmmunitionMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the ability effect radius multiplier value",
				"name" : "AbilityEffectRadiusMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the reload time multiplier value to the one passed in",
				"name" : "SetReloadTimeMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the gravity multiplier value",
				"name" : "GravityMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the fatigue multiplier value to the one passed in",
				"name" : "SetFatigueMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the projectile penetration multiplier value",
				"name" : "ProjectilePenetrationMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the ammunition multiplier value",
				"name" : "AmmunitionMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the explosion radius multiplier value to the one passed in",
				"name" : "SetExplosionRadiusMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the winds of magic multiplier value to the one passed in",
				"name" : "SetWindsOfMagicMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the reload time multiplier value",
				"name" : "ReloadTimeMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoBattlePurchasableArmyAbility" : 
	{
		"area" : "Battle",
		"doc" : "A purchasable ability or upgrade that can be applied to specific armys",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlePurchasableArmyAbility",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Purchases the army ability upgrade",
				"name" : "PurchaseUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the sound type used for this purchase group",
				"name" : "SoundType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Returns if can afford to purchase the item",
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Returns true if the item is available",
				"name" : "IsAvailableInGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Returns the cost of this action",
				"name" : "GetCostForThisAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the army ability record context",
				"name" : "ArmySpecialAbilityRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmySpecialAbilityRecord"
				}
			}
		]
	},
	"CcoBattlePurchasableGroupRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a battle purchasable group record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlePurchasableGroupRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Return the list of purchasable army  usesabilities in the group",
				"name" : "PurchasableArmyAbilitiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableArmyAbility"
				}
			},
			
			{
				"doc" : "Return the list of purchasable abilities in the group",
				"name" : "PurchasableUnitAbilitiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableUnitAbility"
				}
			}
		]
	},
	"CcoBattlePurchasableItemsJunctionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a Battle Purchasable Items Junction record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlePurchasableItemsJunctionRecord",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "(CategoryKey, UnitList) Get a list of CcoBattlePurchasableUnitAbility's, in the specified category, filtered by which abilities can be applied to any of a list of units",
				"name" : "RecordListForCategoryFiltered",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableUnitAbility"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "(CategoryKey) Get the list of CcoBattlePurchasableUnitAbility's in the specified category",
				"name" : "RecordListForCategory",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableUnitAbility"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "(CategoryKey) Get the list of CcoBattlePurchasableGroupRecord's in the specified category",
				"name" : "GroupsForCategory",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableGroupRecord"
				}
			},
			
			{
				"doc" : "Get the full list of available CcoBattlePurchasableItemsJunctionRecord's",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableItemsJunctionRecord"
				}
			}
		]
	},
	"CcoBattlePurchasableItemsUiCategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UI Battle Purchasable Items Junction record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlePurchasableItemsUiCategoryRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableItemsUiCategoryRecord"
				}
			},
			
			{
				"name" : "CategoryKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBattlePurchasableUnit" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlePurchasableUnit",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns whetehr the unit can be afforded, takes in int32 army id",
				"name" : "CanAffordUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns price of the unit, takes in int32 army id",
				"name" : "CostPerUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns CcoBattleUnit context",
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			}
		]
	},
	"CcoBattlePurchasableUnitAbility" : 
	{
		"area" : "Battle",
		"doc" : "A purchasable ability or upgrade that can be applied to specific units",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlePurchasableUnitAbility",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "(UnitList, CanCastIfAlreadyInProgress) Filter a unit list to only those who will be affected by this ability, and who don't have the ability in progress already",
				"name" : "FilterSelectionCanBeCast",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "(UnitList) Filter a unit list to only those who will be affected by this ability",
				"name" : "FilterSelectionToApplicable",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "GetCostForThisAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "UnitSpecialAbilityRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitSpecialAbilityRecord"
				}
			},
			
			{
				"name" : "SoundType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "UnitAbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "(UnitList, ArmyID) Can the army afford to purchase the ability for all of the units (who can get the ability) in the UnitList",
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "(UnitList, CcoBattleArmy) Purchase the ability for the units in the list for the specific army",
				"name" : "PurchaseForCurrentSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "(UnitList) Is the ability available to any of the units in the list",
				"name" : "IsAvailableInGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "(UnitList, ArmyID) Get the cost to apply this upgrade to all of the listed units for the specific army id",
				"name" : "GetCostForSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoBattleRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a BATTLE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleRecord",
		"symbols" : 
		[
			
			{
				"name" : "Map",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "EnvironmentPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Screenshot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Has15mWalls",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Specification",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsLargeSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "PlayableAreaHeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "IsNaval",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "PlayableAreaWidth",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "BattleTypeString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "UserCreated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "BattleType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Author",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "CatchmentName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Matchmaking",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "HasKeyBuildings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "DefenderFundsRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "Year",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "IntroMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsOfficial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Singleplayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsCommunity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Multiplayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"name" : "StartBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReleaseMap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleRecord"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "EnvironmentAudioType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBattleReinforcementArmy" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for a BATTLE_UI_REINFORCEMENT_ARMY, exposes all information available to UiEd",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleReinforcementArmy",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the list of CcoBattleUnits that make up this reinforcing army.",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleArmy that this army's units will join after entering the field.",
				"name" : "TargetArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "How many more units are left to be deployed, as not all units are deployed at the same time",
				"name" : "NumUnitsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "How long (in seconds) until the reinforcement army is deployed",
				"name" : "TimeUntilDeploySecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Is this reinforcement army's spawn based on a timer/countdown?",
				"name" : "IsDeployedUsingTimer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a VECTOR4 specifying the world position of the reinforcement army's spawn zone/deployment location",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Has the reinforcement army been deployed into the battlefield yet?",
				"name" : "IsDeployed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleReinforcementDebugUnits" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleReinforcementDebugUnits",
		"symbols" : 
		[
			
			{
				"doc" : "Lists units",
				"name" : "Units",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Deploys units",
				"name" : "DeployUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleReinforcementPool" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleReinforcementPool",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Return whether list of units is affordable to an army",
				"name" : "CanPurchaseUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattlePurchasableUnit"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Return whether a specific unit is affordable to an army",
				"name" : "CanPurchaseUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattlePurchasableUnit"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattlePurchasableUnit"
					}
				],
				"doc" : "Do the supplied purchasable units match the same unit category?",
				"name" : "UnitsMatchCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the reason/state name of whether a spawn zone can be used or not",
				"name" : "CanUseSpawnZoneReason",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Return whether the specific spawn zone can be used",
				"name" : "CanUseSpawnZone",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Returns how many of the listed spawn zones are currently available to the specified army",
				"name" : "NumSpawnZonesAvailableToArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleUnit"
					}
				],
				"doc" : "Return whether a specific unit is available to deploy (even if it cannot be deployed currently)",
				"name" : "CanUseUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns cost for list of units for an army",
				"name" : "CostForUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattlePurchasableUnit"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Return vector of units in the matching category to the supplied unit, available to an army",
				"name" : "UnitsMatchingUnitCategoryForArmy",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Return vector of units available to an army",
				"name" : "UnitsCategorisedForArmy",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoGroupList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattlePurchasableUnit"
					}
				],
				"doc" : "Gets health percentage of a unit in replenishment pool, returns 0 if unit is not found",
				"name" : "GetHealthPercentageForUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleCapturePoint"
					}
				],
				"doc" : "Return vector of units that are unlocked on a specific capture point",
				"name" : "UnitsUnlockedFromCapturePoint",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattlePurchasableUnit"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Purchases a single unit for an army at a spawn zone",
				"name" : "PurchaseUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Return vector of units available to an army",
				"name" : "UnitsForArmy",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlePurchasableUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Purchases the list of units for an army at a spawn zone",
				"name" : "PurchaseUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Have any of the units been on the battlefield during this battle?",
				"name" : "HaveAnyUnitsBeenOnBattlefield",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleResult" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a battle result",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBattleResult",
		"symbols" : 
		[
			
			{
				"name" : "ResultTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleResultTypeRecord"
				}
			},
			
			{
				"name" : "IsDraw",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsLocalPlayerWinner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "OtherResultAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleResultAlliance"
				}
			},
			
			{
				"name" : "LocalResultPlayerAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleResultAlliance"
				}
			},
			
			{
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoBattleResultAlliance" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleResultAlliance",
		"symbols" : 
		[
			
			{
				"name" : "ArmyList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResultType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResultName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleResultArmy" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleResultArmy",
		"symbols" : 
		[
			
			{
				"name" : "GeneralsName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetupArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsHuman",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayerName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionFlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumEntitiesInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleResultTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleResultTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitXpGain",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResultDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BattleResultType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResultScreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleResultUnit" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a battle result unit",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBattleResultUnit",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the unit left the battle (a shameful display)",
				"name" : "DidLeaveBattlefield",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the unit routed during the battle",
				"name" : "DidRout",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the unit is a commander",
				"name" : "IsCommander",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Percentage health remaining for the unit",
				"name" : "HealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Gold value of the damage dealt by the unit",
				"name" : "DamageDealtCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Damage dealt by the unit",
				"name" : "DamageDealt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Experience level of the unit",
				"name" : "ExperienceLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Number of hitpoints before result",
				"name" : "NumHitPointsInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Number of hitpoints post result",
				"name" : "NumHitPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Initial number of entities before result",
				"name" : "NumEntitiesInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Number of entities post result",
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Localised name of the unit",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Number of friendly kills the unit got in the result",
				"name" : "NumKillsFriendlies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Number of kills the unit got in the result",
				"name" : "NumKills",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a CcoMainUnitRecord context for the unit",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Path to the unit card image for the unit",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBattleRoot" : 
	{
		"area" : "Battle",
		"doc" : "The root for battle that gives access to anything battle related",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleRoot",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns list of all the victory capture points in the battle if passed true, if passed false will return just the victory capture points",
				"name" : "VictoryCapturePointContextList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleCapturePoint"
				}
			},
			
			{
				"doc" : "Returns the unit scale factor setting",
				"name" : "UnitSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the time control context to query/interact with time controls in battle",
				"name" : "TimeControlContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleTimeControl"
				}
			},
			
			{
				"doc" : "Returns the quest key of the current battle if it is a quest battle",
				"name" : "QuestKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if buildings can be dismantled in the current battle",
				"name" : "CanDismantleBuildings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a trial battle",
				"name" : "IsTrial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of all the capture points in the battle",
				"name" : "CapturePointList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleCapturePoint"
				}
			},
			
			{
				"doc" : "Returns the climate weather description record for the current battle",
				"name" : "ClimateWeatherDescriptionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleClimateWeatherDescriptionRecord"
				}
			},
			
			{
				"doc" : "Returns true if the current battle has any toggleable buildings",
				"name" : "BattleHasToggleBuildings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a survival battle",
				"name" : "IsSurvival",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the type of battle as an unlocalised string",
				"name" : "BattleTypeState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns list of all players unit groups",
				"name" : "GroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleGroup"
				}
			},
			
			{
				"doc" : "Returns the climate record for the current battle",
				"name" : "ClimateRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoClimateRecord"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a lab mode battle",
				"name" : "IsLabMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised name of the battle",
				"name" : "BattleNameText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if local player is current spectating",
				"name" : "IsSpectator",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of all units in the battle",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Returns the weather record for the current battle",
				"name" : "WeatherRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleWeatherTypeRecord"
				}
			},
			
			{
				"doc" : "Returns the time remaining as a pre-formatted localised string",
				"name" : "TimeRemainingString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Restarts the current battle",
				"name" : "RestartBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if cinematic mode is currently enabled",
				"name" : "IsCinematicModeEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current battle was started from campaign",
				"name" : "IsCampaignBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of all armies in the battle",
				"name" : "ArmyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "Returns the CcoSeasonRecord context for the current battle",
				"name" : "SeasonRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSeasonRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Zoom the camera to an abitrary position",
				"name" : "ZoomToPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of all alliances in the battle",
				"name" : "AllianceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Get CcoSummedValueContext for summary of ticket score contribution by different types of capture points",
				"name" : "VictoryPointContributionSummaryForAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSummedValueContext"
				}
			},
			
			{
				"doc" : "Returns true if current battle is multiplayer",
				"name" : "IsMultiplayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleSettlement context if in a settlement/siege battle",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSettlement"
				}
			},
			
			{
				"doc" : "Cycles between armies, used for dev functionality",
				"name" : "DevCycleArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Returns list of map barrier toggleable slots in the battle",
				"name" : "MapBarrierToggleableSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleToggleableSlot"
				}
			},
			
			{
				"doc" : "Get the opposing to player alliance",
				"name" : "OpposingToPlayerAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"doc" : "Returns true if the current battle has legendary mode enabled",
				"name" : "IsLegendaryMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a replay",
				"name" : "IsReplay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a tutorial",
				"name" : "IsTutorial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a siege",
				"name" : "IsSiege",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Toggles the escape menu in battle",
				"name" : "ShowEscapeMenu",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Returns list of all toggleable slots in the battle",
				"name" : "ToggleableSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleToggleableSlot"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleArmy for the player",
				"name" : "PlayerArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "Toggles the cinematic mode UI",
				"name" : "ToggleCinematicMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if army ability upgrades are enabled for this battle",
				"name" : "DoesHaveArmyAbilityUpgrades",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns capture location manager context",
				"name" : "CaptureLocationManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleCaptureLocationsManager"
				}
			},
			
			{
				"doc" : "Returns true if current phase in battle is results",
				"name" : "IsResultsPhase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of all buildings in the battle",
				"name" : "BuildingsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleBuilding"
				}
			},
			
			{
				"doc" : "Returns true if the battle allows the use of `Teleport Withdraw`.",
				"name" : "IsTeleportWithdrawAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleAlliance for the player",
				"name" : "PlayerAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"doc" : "Returns the battle reinforcement debug units context",
				"name" : "BattleReinforcementDebugUnitsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleReinforcementDebugUnits"
				}
			},
			
			{
				"doc" : "Returns true if unit upgrades are enabled for this battle",
				"name" : "DoesHaveUnitUpgrades",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current phase in battle is conflict",
				"name" : "IsConflictPhase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the current battle has an ambush withdraw area",
				"name" : "HasAmbushWithdrawArea",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleAlliance for the defending alliance",
				"name" : "DefendingAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"doc" : "Returns the battle reinforcement pool context",
				"name" : "BattleReinforcementPoolContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleReinforcementPool"
				}
			},
			
			{
				"doc" : "Returns true if unit replenishments are enabled for this battle",
				"name" : "DoesHaveUnitReplenishments",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleAlliance for the attacking alliance",
				"name" : "AttackingAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"doc" : "Returns the storm of magic context",
				"name" : "StormOfMagicContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleStormOfMagic"
				}
			},
			
			{
				"doc" : "Returns true if current phase in battle is deployment",
				"name" : "IsDeploymentPhase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if army ability fill is used in this battle",
				"name" : "HasArmyAbilityFillCurrency",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if reinforcement purchasing is enabled for this battle",
				"name" : "DoesHaveReinforcementPurchasing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the currency manager context",
				"name" : "BattleCurrencyManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleCurrencyManager"
				}
			},
			
			{
				"doc" : "Returns true if the toggle slots can be shown",
				"name" : "IsToggleSlotListVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if prisoner currency is used in this battle",
				"name" : "HasPrisoners",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of human players participating in the battle",
				"name" : "GetHumanNetworkPlayersParticipatingInAllianceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Gets a list of CcoBattleTypeCheatSheetEntryRecords, ordered by their priority indices, and that live in the specified column index.",
				"name" : "BattleTypeCheatSheetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleTypeCheatSheetEntryRecord"
				}
			},
			
			{
				"doc" : "Returnsthe battle setup context for the current battle",
				"name" : "SetupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetup"
				}
			},
			
			{
				"doc" : "Returns true if the capture points can be shown",
				"name" : "IsCapturePointListVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of all spawn zones in the battle",
				"name" : "SpawnZoneList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSpawnZone"
				}
			},
			
			{
				"doc" : "Returns the battle result context for the current battle",
				"name" : "ResultContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleResult"
				}
			},
			
			{
				"doc" : "Returns true if supplies currency is used in this battle",
				"name" : "HasSupplies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a conquest battle",
				"name" : "IsConquest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the year number for the current battle",
				"name" : "Year",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of all reinforcing armies for the battle",
				"name" : "ReinforcementArmyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleReinforcementArmy"
				}
			},
			
			{
				"doc" : "Returns the selection context to get information on what is currently selected in battle",
				"name" : "SelectionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSelection"
				}
			},
			
			{
				"doc" : "Returns true if current battle is a domination battle",
				"name" : "IsDomination",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns floating point percent for players alliance to show how much they are winning the battle",
				"name" : "BalanceOfPowerPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the number of physical CPU cores (this probably should be a global function instead!)",
				"name" : "NumberOfCores",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of all the vehicles in the battle",
				"name" : "VehicleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleVehicle"
				}
			},
			
			{
				"doc" : "Returns the index of the alliance who will win when the timer runs out",
				"name" : "TimeoutWinningAllianceIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cursor context for the battle to get information on what is currently under the mouse cursor",
				"name" : "CursorContextContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleCursorContext"
				}
			},
			
			{
				"doc" : "Returns true if the current battle has realism mode enabled",
				"name" : "IsRealismModeEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the position of the ambush withdraw area (if there is one)",
				"name" : "AmbushWithdrawAreaPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			}
		]
	},
	"CcoBattleSecondaryCurrencySourceTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSecondaryCurrencySourceTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UiLocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAllianceBased",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SourceType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSecondaryCurrencyTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSecondaryCurrencyTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UiIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UiLocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrencyType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSelection" : 
	{
		"area" : "Battle",
		"doc" : "Exposes the current selection in battle allowing to perform queries and commands on the current selected units for example",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSelection",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if any unit selected including the enemy",
				"name" : "AnyUnitSelectedIncludingEnemy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if any controllable unit is selected",
				"name" : "AnyUnitSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Deselects any currently selected units",
				"name" : "DeselectAll",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the current selection can be issued orders",
				"name" : "IsOrderable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Toggles flying state of units that can fly in the current selection",
				"name" : "ToggleFlying",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Changes the formation of the current selection to thet specified one",
				"name" : "ChangeFormation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles melee/ranged mode on the current selection",
				"name" : "ToggleMelee",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles run/walk speed on the current selection",
				"name" : "ToggleRun",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Issues a withdraw command to the current selection, making them withdraw from the battlefield",
				"name" : "Withdraw",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Issues a halt command to current selection, cancelling any current orders",
				"name" : "Halt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the first unit in the selection",
				"name" : "FirstUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Returns list of CcoBattleUnit that are currently selected",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Returns the current formation key of selection",
				"name" : "FormationName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the number of entities currently selected",
				"name" : "NumEntitiesSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns number of unit groups currently selected",
				"name" : "NumUnitGroups",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns number of ungrouped units currently selected",
				"name" : "NumUngroupedUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns number of units currently selected",
				"name" : "NumUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the current selection is taking damage",
				"name" : "IsTakingDamage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleSetPieceArmiesCharacterRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceArmiesCharacterRecord",
		"symbols" : 
		[
			
			{
				"name" : "MagicLoreContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Male",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PortraitForCard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Portrait",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SkillsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ItemsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentSubtypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumMen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CharacterLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetPieceArmiesCharactersItemRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceArmiesCharactersItemRecord",
		"symbols" : 
		[
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CharacterItemContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetPieceArmiesCharactersSkillRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceArmiesCharactersSkillRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SkillContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CharacterName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetPieceArmiesUnitRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceArmiesUnitRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PercentageNumMen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetPieceArmyRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a BATTLE_SET_PIECE_ARMY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceArmyRecord",
		"symbols" : 
		[
			
			{
				"name" : "FlagPathLarge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "AiArmyTactic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "FlagPathMedium",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "FlagPathSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"name" : "FlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceArmyRecord"
				}
			},
			
			{
				"name" : "ShouldMergeArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsHiddenArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "DefaultArmyAbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSpecialAbilityRecord"
				}
			},
			
			{
				"name" : "EffectBundlesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"name" : "UnitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceArmiesUnitRecord"
				}
			},
			
			{
				"name" : "CharactersList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceArmiesCharacterRecord"
				}
			},
			
			{
				"name" : "UseDefaultDeploymentZones",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsFrontendPlayerArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsReinforcementArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsAlliedToPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "DeploymentZoneId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "FlagPathRotated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "ApproachAngle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoBattleSetPieceFrontendGroupRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceFrontendGroupRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BattleList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CharacterList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CampaignMapContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetPieceFrontendGroupsToCharacterRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceFrontendGroupsToCharacterRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FrontendGroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetPieceRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a BATTLE_SET_PIECE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetPieceRecord",
		"symbols" : 
		[
			
			{
				"name" : "BattleSetupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetup"
				}
			},
			
			{
				"name" : "BattleEnvironment",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "HasBeenCompleted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "BattleTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleTypeRecord"
				}
			},
			
			{
				"name" : "CampaignPreBattleIntroMovieContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoVideoRecord"
				}
			},
			
			{
				"name" : "BattleDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "OutroMovieLoseContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoVideoRecord"
				}
			},
			
			{
				"name" : "OutroMovieWinContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoVideoRecord"
				}
			},
			
			{
				"name" : "IntroMovieContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoVideoRecord"
				}
			},
			
			{
				"name" : "CatchmentArea",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "TeleportCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "BattlefieldFolder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "PlayerFrontendArmiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceArmyRecord"
				}
			},
			
			{
				"name" : "ArmiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceArmyRecord"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ArmoryItemAchievementUnlockList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemRecord"
				}
			},
			
			{
				"name" : "UseLargeArmies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceRecord"
				}
			},
			
			{
				"name" : "IsPlayerAttacker",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMapPlayableAreaRecord"
					}
				],
				"name" : "StartBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ScreenshotPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "BattleScript",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBattleSettlement" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSettlement",
		"symbols" : 
		[
			
			{
				"name" : "DestroyedPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MountedArtilleryLocationList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DestructionEffectsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetup" : 
	{
		"area" : "Battle",
		"doc" : "Wrapper for a battle setup",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBattleSetup",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if there was a timeout draw",
				"name" : "IsTimeoutDraw",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleSetupInfo context",
				"name" : "BattleInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupInfo"
				}
			},
			
			{
				"doc" : "Returns the players army index",
				"name" : "PlayerArmyID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the local players CcoBattleSetupAlliance context",
				"name" : "LocalPlayerAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupAlliance"
				}
			},
			
			{
				"doc" : "Returns the other players alliance context",
				"name" : "OtherPlayerAllianceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupAlliance"
				}
			},
			
			{
				"doc" : "Returns the players alliance index",
				"name" : "PlayerAllianceID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true is enemy units should be hidden",
				"name" : "HideEnemyUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if all units should be hidden",
				"name" : "HideAllUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the player is the attacker",
				"name" : "IsPlayerAttacker",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this battle setup is a benchmark",
				"name" : "IsBenchmark",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleSetupAlliance" : 
	{
		"area" : "Battle",
		"doc" : "Wrapper for an alliance in a set battle, exposes army contexts to UiEd.",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBattleSetupAlliance",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the list of all CcoBattleSetupArmy contexts involved in the battle.",
				"name" : "ArmyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetupArmy"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the CcoBattleSetupArmy with the specified id.",
				"name" : "ArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupArmy"
				}
			}
		]
	},
	"CcoBattleSetupArmy" : 
	{
		"area" : "Battle",
		"doc" : "Contains initial setup data for the specified army",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBattleSetupArmy",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the name of the player if human or the localised string for cpu if AI",
				"name" : "PlayerName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns path to flags for the faction",
				"name" : "FlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the list of units in this setup army, optional bool argument for whether hidden armies should be excluded",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetupUnit"
				}
			},
			
			{
				"doc" : "Returns the associate alliance colour for the setup army (as in colour based on player/ally/enemy/neutral)",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleSetupFaction for this setup army",
				"name" : "BattleSetupFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupFaction"
				}
			}
		]
	},
	"CcoBattleSetupFaction" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSetupFaction",
		"symbols" : 
		[
			
			{
				"name" : "FactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSetupInfo" : 
	{
		"area" : "Battle",
		"doc" : "Wrapper for the setup of a battle, exposing info like the region name and year of battle.",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBattleSetupInfo",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the battle to be a lab mode battle",
				"name" : "DevSetIsLabMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"doc" : "Returns the CcoBattleLaboratoryInfo if this is a laboratory type battle",
				"name" : "LaboratoryInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleLaboratoryInfo"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the CcoBattleSetupAlliance corresponding to the alliance at the given index.",
				"name" : "AllianceContextFromIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupAlliance"
				}
			},
			
			{
				"doc" : "Returns the name of the battle.",
				"name" : "BattleTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the year that the battle took place in, as int32.",
				"name" : "BattleYear",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the name of the region that the battle took place in. Only applicable for campaign battles.",
				"name" : "RegionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the type of battle (e.g. land battle, chokepoint battle...)",
				"name" : "BattleTypeString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoBattleSetupUnit" : 
	{
		"area" : "Battle",
		"doc" : "Wrapper for a BATTLE_SETUP_UNIT",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBattleSetupUnit",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoCookingDish with the dishes applied to this unit if any",
				"name" : "AppliedDishList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingDish"
				}
			},
			
			{
				"doc" : "Returns a CcoUnitDetails with the details of the unit",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns a CcoMainUnitRecord with the main unit",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns an int with the combat potential of the unit",
				"name" : "CombatPotential",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the unit is a commander",
				"name" : "IsCommander",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a string with the image path of the unit",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a localised string with the name of the unit",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoBattleSpawnZone" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSpawnZone",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "OnMouseOver",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UniqueID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Is the spawn zone only available for use by vanguard units or not",
				"name" : "IsVanguardOnly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "GetAllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "IsAvailableToAllianceForSupport",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "IsAvailableToAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			}
		]
	},
	"CcoBattleStormOfMagic" : 
	{
		"area" : "Battle",
		"doc" : "Cco wrapper for querying and controlling the Storm Of Magic manager",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleStormOfMagic",
		"symbols" : 
		[
			
			{
				"doc" : "Get the CcoSpecialAbilityGroupRecord for the currently ascendant lore",
				"name" : "CurrentAscendancyLoreContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			},
			
			{
				"doc" : "Is the Storm Of Magic manager enabled?",
				"name" : "IsEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Is a Storm of Magic ascendancy transition in progress?",
				"name" : "IsMagicalChargeTransitionInProgress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Gets the fractional progress of the magical transition",
				"name" : "MagicalChargeTransitionProgress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Gets the time remaining for the magical transition in seconds",
				"name" : "MagicalChargeTransitionTimeRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Is a Storm of Magic ascendancy transition in progress?",
				"name" : "IsAscendancyTransitionInProgress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Gets the time remaining for the magical transition in seconds",
				"name" : "AscendancyTransitionTimeRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Max/Target value of current lore progress",
				"name" : "FluxCapacity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Displayable value of current lore progress, which includes discharge value when amgic transition occurs",
				"name" : "DisplayFluxValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Real value of current lore progress",
				"name" : "FluxValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Shows the new %age of the flux charge based on the current moused over spell",
				"name" : "FluxPercentPreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Current %age progress through the current lore until the next lore transition is triggered",
				"name" : "FluxPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "DEV - Trigger a random ascendancy change to a new lore",
				"name" : "DevTriggerRandomAscendancy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Is there a magical flux transition in progress?",
				"name" : "IsFluxTransitioning",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Get the list of the currently selectable lores (Supports only 8 max currently)",
				"name" : "SelectableLoreList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSpecialAbilityGroupRecord"
					}
				],
				"doc" : "DEV - Trigger an ascendancy change to a specific lore (using the CcoSpecialAbilityRecord of the target lore)",
				"name" : "DevChangeAscendancy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Get the list of all of the available lores (Supports only 8 max currently)",
				"name" : "AvailableLoreList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSpecialAbilityGroupRecord"
					}
				],
				"doc" : "Request to apply a specific lore, in response to a manual lore selection notification",
				"name" : "ApplyAscendancy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Whether the specified army select the Storm of Magic ascendancy at battle start",
				"name" : "CanArmySelectAscendancyAtBattleStart",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Get the Index for the currently ascendant lore",
				"name" : "CurrentAscendancyIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Trigger a Storm of Magic Ascendancy Change message",
				"name" : "TriggerAscendancyChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleSurvivalWave" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for a survival wave, detailing wave Id and units involved in the wave and other wave info",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleSurvivalWave",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of Grouped CcoBattleUnits that represent the units in this wave, but in a categorised manner",
				"name" : "CategorisedWaveUnitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoGroupList"
				}
			},
			
			{
				"doc" : "Returns a list of CcoBattleUnits that represent the units in this wave",
				"name" : "WaveUnitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Returns the associated Wave ID",
				"name" : "WaveId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns if the wave is the final/boss wave",
				"name" : "IsFinalWave",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleTimeControl" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for battle time controls, contains all interface for querying and interacting with time state of battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleTimeControl",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if can currently change the time",
				"name" : "CanChangeTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns the number of votes in multiplayer for a particular speed",
				"name" : "NumMpVotesForSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current speed as a float multiplier value (e.g. 1 for play, 0 for pause, 0.4 for slowmo...)",
				"name" : "CurrentSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the UNLOCALISED name of the current speed",
				"name" : "CurrentSpeedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns button state to use for the specified speed",
				"name" : "StateForSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Cycles the speed between pause,slowmo,play,fwd,ffwd either in the direction specified (true=forwards,false=backwards)",
				"name" : "CycleSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles between current speed and puase",
				"name" : "TogglePause",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Toggles between specified speed and pause",
				"name" : "ToggleSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets time to a specified float multiplier speed",
				"name" : "SetSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Allows to disable ability to change the time",
				"name" : "SetCanChangeTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if can cycle in the direction specified (true=forwards,false=backwards). This assumes non-wrapping functionality (for 3k)",
				"name" : "CanCycleSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if we should currently be showing the paused panel",
				"name" : "ShouldShowPausePanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if can set speed to slow motion. This is disabled in realism mode for example",
				"name" : "IsSlowMoEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleToggleableSlot" : 
	{
		"area" : "Battle",
		"doc" : "A slot that can contain a unit, barrier or building; that may be toggled from an off state to one of a pool of options",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleToggleableSlot",
		"symbols" : 
		[
			
			{
				"doc" : "Zooms the camera to the position of this toggleable slot",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Can the slot be interacted with?",
				"name" : "CanInteract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a Vector3 of the world position of the slot origin",
				"name" : "WorldPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Does the slot support an artillery mount?",
				"name" : "HasArtilleryMountLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Which of the buildables is currently enabled? -1 for none",
				"name" : "EnabledIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Can the slot be rotated?",
				"name" : "IsFreeRotationAllowed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Are any of the buildables associated with this slot, enabled?",
				"name" : "IsAnyEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Does the slot represent a toggleable barrier?",
				"name" : "IsMapBarrier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Does the slot represent a toggleable building?",
				"name" : "IsBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Get the list of buildables associated with the slot (slot buildable indices associated with index-related functions in Toggleable Ccos)",
				"name" : "BuildablesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleToggleableSlotBuildable"
				}
			},
			
			{
				"doc" : "Returns the type of the slot as an unlocalised string",
				"name" : "TypeString",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Does the slot represent a toggleable unit?",
				"name" : "IsUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Retrieve the white/blendable icon asset path for the associated slot buildable index",
				"name" : "IconBlendablePathForIndex",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Get the CcoBattleCapturePoint that is the parent of this toggleable slot",
				"name" : "ParentCapturePointContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleCapturePoint"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Set if the slot radial visible",
				"name" : "SetActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Retrieve the minimap icon asset path for the associated slot buildable index",
				"name" : "IconMinimapPathForIndex",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Is the slot radial visible?",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "How long is left in the current construction timer",
				"name" : "ConstructionTimeRemainingSeconds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Get the CcoBattleArmy of the owner of the currently enabled buildable. Falls back to the capture point owner if this fails",
				"name" : "CurrentBuildableOwner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "Returns true if this slot has been destroyed and cannot be rebuilt",
				"name" : "IsDestroyed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Is there anything being destructed or a toggle switch being deferred?",
				"name" : "IsDestructionInProgress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Get the enabled index of the buildable on the associated slot (-1 for nothing)",
				"name" : "CurrentIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Is there anything being constructed or a toggle switch being deferred?",
				"name" : "IsConstructionInProgress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Shows the ghost preview for the buildable on the associated slot",
				"name" : "ShowPreviewForIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Hides the ghost preview for the buildable on the associated slot",
				"name" : "HidePreviewForIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Retrieve the icon asset path for the associated slot buildable index",
				"name" : "IconPathForIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Can the slot be interacted with by the army that owns it?",
				"name" : "CanOwnerInteract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattleToggleableSlotBuildable" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleToggleableSlotBuildable",
		"symbols" : 
		[
			
			{
				"doc" : "Hide the building tooltip for the buildable on the associated slot",
				"name" : "HideToolTip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Show the building tooltip for the buildable on the associated slot",
				"name" : "ShowToolTip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Trigger the secondary action for the slot",
				"name" : "SecondaryAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Trigger the primary action for the slot",
				"name" : "PrimaryAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Shows the ghost preview for the buildable on the associated slot",
				"name" : "ShowPreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "<CcoBattleArmy> - Is this a map barrier that is available to the associated army",
				"name" : "MapBarrierIsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Hides the ghost preview for the buildable on the associated slot",
				"name" : "HidePreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Get the name if the map barrier is valid",
				"name" : "MapBarrierName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Retrieve the icon asset path for the buildable on the associated slot",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Has the buildable been destroyed/taken maximum damage",
				"name" : "IsDestroyed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return the index that this buildable represents in the associated slot",
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					}
				],
				"doc" : "Can the buildable be refunded",
				"name" : "CanRefund",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Can the buildable be afforded",
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Get the currency refund value for this buildable in its current state",
				"name" : "RefundValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Get the currency cost for this buildable for the army specified",
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Get the containing toggleable slot Cco for this buildable",
				"name" : "ParentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleToggleableSlot"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleArmy"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Get the visual state for the slot",
				"name" : "CurrentState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBattleTypeCheatSheetEntryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a Battle UI Cheatsheet Item Record. Used for individual entries used in creating cheat sheet layouts",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleTypeCheatSheetEntryRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Gets the string which is used to key the item into the cheat sheet screenshot or similar",
				"name" : "VisualKeyString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Specifies which column group the entry should be in. This index is filtered when the cheat sheet list is collated",
				"name" : "ColumnIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Specifies the priority which this item will be listed in the current column. Lower = Higher up the list",
				"name" : "PriorityIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "DescriptionText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "HeaderText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBattleTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxTeamsize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DefenderFundsRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DefenderVictoryConditionsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AttackerVictoryConditionsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ListOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleUnit" : 
	{
		"area" : "Battle",
		"doc" : "Component context wrapper for a battle unit, exposes all information available to UiEd",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleUnit",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this unit has been gifted so the original owner isnt currently controlling",
				"name" : "IsGifted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the unit invincible based on the supplied bool",
				"name" : "DevSetInvincible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if this unit has no orders currently and is standing still",
				"name" : "IsIdle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if has infinite secondary ammo",
				"name" : "HasInfiniteSecondaryAmmo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a combination of MoraleName and MoraleGreatestEffect. No longer needed since can add strings with expressions",
				"name" : "MoraleNameWithGreatestEffect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns true if an ambush battle with an extraction location and they are in the extraction zone ready to safely recover",
				"name" : "IsReadyToExtract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently capturing a capture point",
				"name" : "IsCapturing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "(Returns a list of the CcoEffects that are being applied to the unit from Storm of Magic ascendancies",
				"name" : "ActiveFactionSpecificEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns true if the unit has the ability to guerilla deploy (deploy outside deployment zone)",
				"name" : "CanGuerrillaDeploy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the current capture power of this unit. Scaled by the unit's remaining men. Returns 0.0 when not on a map with capture points",
				"name" : "CapturePower",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the current morale as a percentage of best morale could be",
				"name" : "MoralePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the amount of damage inflicted in the last 4 seconds",
				"name" : "DamageInflictedRecently",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if has infinite primary ammo",
				"name" : "HasInfinitePrimaryAmmo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the heal amount to the specified percentage value [0-100]",
				"name" : "DevSetHealAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the largest execution threshold of nearby enemies (Either from the executor attribute or ability phases)",
				"name" : "LargestNearbyEnemyExecuteThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if the unit has a barrier and it is currently recharging (barrier is a kind of rechargable shield)",
				"name" : "IsBarrierCharging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised name of the effect that is having the greatest effect on morale currently",
				"name" : "MoraleGreatestEffect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this unit is withdrawing from the map (running to edge of map to retire from battle)",
				"name" : "IsWithdrawing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleEntity for the entity currently holding the unit banner (entity who UI baner floats above)",
				"name" : "BannerHolderEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntity"
				}
			},
			
			{
				"doc" : "Returns true if unit is currently in last stand, this is when they have no where to escape to and so will fight to last man",
				"name" : "IsInLastStand",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the units barrier max HP if any (barrier is a kind of rechargable shield)",
				"name" : "BarrierMaxHp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of seconds until the barrier will start recharging if the unit has a barrier and it has depleted (barrier is a kind of rechargable shield)",
				"name" : "BarrierSecsUntilRecharge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if unit is currently in a terrified state which seriously affects their morale (comes from units that have terrifying unit behaviour)",
				"name" : "IsTerrified",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the experience percentage of progress to next level",
				"name" : "ExperiencePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if affected by storm if there is a storm active, and we have an ability that uses the lore that is currently ascendant",
				"name" : "IsAffectedByStormOfMagic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "(<optional bool> Only Non-Passive Effects, <optional string> Filter by source ability type); Returns a list of the active effects on the unit from abilities, etc",
				"name" : "ActiveEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnitEffect"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently firing missilees",
				"name" : "IsFiringMissiles",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised name of the current MoraleState",
				"name" : "MoraleName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleEntity for the current officer entity (entity leading this unit)",
				"name" : "OfficerEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntity"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the ammo amount to the specified value",
				"name" : "DevSetAmmoAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if this unit is currently under the players control",
				"name" : "IsUnderPlayerControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percentage of secondary ammo remaining(0 - 1)",
				"name" : "SecondaryAmmoPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the units barrier HP if any (barrier is a kind of rechargable shield)",
				"name" : "BarrierHp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Will rout the unit",
				"name" : "DevRout",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the current CcoProjectileRecord context the unit is using for ranged attacks",
				"name" : "ActiveProjectileContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProjectileRecord"
				}
			},
			
			{
				"doc" : "Returns the units barrier percentage the current max is against the initial max, which is essentially the health percentage of a unit at the minute (barrier is a kind of rechargable shield)",
				"name" : "BarrierCapPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns any custom name given to this unit",
				"name" : "CustomName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this unit is shattered (morale so low that they will no longer recover and are essentially lost)",
				"name" : "IsShattered",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit is still alive",
				"name" : "IsAlive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit recently rallied from routing and hasnt been given a command since, to highlight to player there are units not being taken advantage of",
				"name" : "IsAwaitingOrderAfterRally",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percentage of primary ammo remaining (0-1)",
				"name" : "PrimaryAmmoPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the rank of the character this unit is for if any",
				"name" : "CharacterRank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Will respawn the unit",
				"name" : "DevRespawn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the current CcoBattleVehicle this unit is using if any",
				"name" : "VehicleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleVehicle"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently routing (running away due to low morale, but might recover and come back)",
				"name" : "IsPartOfWave",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the units delayed barrier HP percent if any (barrier is a kind of rechargable shield)",
				"name" : "DelayedBarrierHpPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the localised name of the unit",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleResultUnit for the current unit",
				"name" : "BattleResultUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleResultUnit"
				}
			},
			
			{
				"doc" : "Returns true if this unit is nearing the execute threshold health of a nearby enemy executioner ('nearing' value defined in the kv_ui_tweakers table)",
				"name" : "CanNearlyBeExecutedByNearbyEnemy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently taking damage",
				"name" : "IsTakingDamage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the delayed health of the unit as a percentage (0-1)",
				"name" : "DelayedHealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns whether the unit supports having a rank or not",
				"name" : "HasCharacterRank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns number of seconds left in teleporting to withdraw process",
				"name" : "SecondsLeftToTeleport",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Will kill the unit",
				"name" : "DevKill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns a list of CcoUiUnitStatusRecord that are currently active sorted in order of importance",
				"name" : "PurchasedEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitPurchasableEffectRecord"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently being fired upon",
				"name" : "IsUnderMissileAttack",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the barrier replenish rate as a percentage of the barrier's total hp",
				"name" : "BarrierReplenishRate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently routing (running away due to low morale, but might recover and come back)",
				"name" : "IsRouting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit is below the execute threshold health of a nearby enemy executioner",
				"name" : "CanBeExecutedByNearbyEnemy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently in wavering morale state (brink of routing)",
				"name" : "IsWavering",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the health of the unit as a percentage (0-1)",
				"name" : "HealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if the unit is under the player control",
				"name" : "IsUnderMyControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of kills this unit has performed in this battle",
				"name" : "NumKills",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether unit is currently teleporting to withdraw",
				"name" : "IsTeleportWithdrawing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the unique ui id of the unit as an int, unique amongst all units in the battle",
				"name" : "UniqueUiId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently in melee combat",
				"name" : "IsInMelee",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Breaks in to attached IDE to inspect model UNIT in greater detail",
				"name" : "BreakForDebugging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the barrier replenish delay (Time between taking damage and your barrier replenishing)",
				"name" : "BarrierReplenishDelay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns whether the local player originally owned this unit i.e. if it is gifted but still belongs to this player",
				"name" : "IsOriginallyOwnedByLocalPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoUiUnitStatusRecord that are currently active sorted in order of importance",
				"name" : "StatusList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUiUnitStatusRecord"
				}
			},
			
			{
				"doc" : "Reset ability uses",
				"name" : "DevResetAbilityUses",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if this unit is a character (general or agent basically)",
				"name" : "IsCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the unit started the battle under AI control",
				"name" : "IsUnderAIControlOriginally",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the radar position (0-1, 0-1) as a percentage to be used with ContextRadarIcon",
				"name" : "RadarPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Copies the memory address of this models actual unit to the clipboard which is handy for creating conditional breakpoints",
				"name" : "CopyMemoryAddressToClipboard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the current position",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the current fatigue state as an int (mirrors enum in code)",
				"name" : "FatigueState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the units barrier HP percent if any (barrier is a kind of rechargable shield)",
				"name" : "BarrierHpPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the CcoNetworkPlayer that originally had control of this unit (if unit gifted for example)",
				"name" : "OriginalOwningNetworkPlayerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently out of control (meaning player has no control over them and they just attack the nearest unit)",
				"name" : "IsOutOfControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of CcoBattleEntity just for man entities",
				"name" : "ManList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleEntity"
				}
			},
			
			{
				"doc" : "Reset ability recharge",
				"name" : "DevResetAbilityRecharge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the time (in seconds) remaining on the toggle flying cooldown timer",
				"name" : "ToggleFlyingCooldownTimer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently visible to player (taking into account hidden state and line of sight",
				"name" : "IsVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the unit is currently under AI control (instead of script or player)",
				"name" : "IsUnderAIControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns morale state as an int (mirrors enum in code)",
				"name" : "MoraleState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the colour for the current status, used for things like when in combat to identify if winning for example, or for when capturing capture point",
				"name" : "StatusColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently hidden (using terrain types, etc)",
				"name" : "IsHidden",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Gifts the unit back to their original owning player when the unit is currently a shared unit",
				"name" : "GiftToOriginalOwner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the list of CcoBattleEntity just for mount entities",
				"name" : "MountList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleEntity"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently selected",
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleUnit"
					}
				],
				"doc" : "Returns the threat of the specified unit. -1 is invalid, 1 is high threat, 0 is low threat",
				"name" : "ThreatPercentOfUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this unit can currently choose to toggle its flying state (taking into account interruptions, etc)",
				"name" : "CanToggleFlying",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Reset ability manager",
				"name" : "DevResetAbilityManager",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if the unit has a forced rampage",
				"name" : "IsForceRampage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoNetworkPlayer that is currently in control of this unit, for mp battles where unit sharing possible",
				"name" : "OwningNetworkPlayerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleArmy this unit belongs to",
				"name" : "ArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "Returns the colour based on alliance (player/friendly/enemy/neutral)",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Toggles a unit between flying in the air and moving on the ground (for units that CanFly)",
				"name" : "ToggleFlying",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this unit has unspottable unit behaviour",
				"name" : "IsUnspottable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of CcoBattleEntity just for engine entities",
				"name" : "EngineList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleEntity"
				}
			},
			
			{
				"doc" : "Returns the threat of the unit currently mousing over (used on tooltips). -1 is invalid, 1 is high threat, 0 is low threat",
				"name" : "ThreatPercentOfUnitMouseover",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently flying",
				"name" : "IsFlying",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return a context to the currently active battle harmony effect, if there is one",
				"name" : "BattleHarmonyEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleUnitEffect"
				}
			},
			
			{
				"doc" : "Returns true if the unit is currently highlighted",
				"name" : "IsHighlighted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Toggles the highlight shown with Highlight command",
				"name" : "ToggleHighlight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this can be given orders",
				"name" : "IsOrderable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current experience level",
				"name" : "ExperienceLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the unit is invincible and cant take damage",
				"name" : "IsInvincible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of entities the unit entered the battle with",
				"name" : "NumEntitiesInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the colour that represents the current MoraleState",
				"name" : "MoraleColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns this unit's modifier for healing",
				"name" : "HealingPower",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Teleports a unit",
				"name" : "DevTeleport",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the list of CcoBattleEntity in the unit",
				"name" : "EntityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleEntity"
				}
			},
			
			{
				"doc" : "Same as StatusMostImportant BUT ignores certain statuses, as Fabian on 3k wanted to only show certain statuses on unit card as some statuses were shown in a different manner",
				"name" : "StatusSubsetMostImportant",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUiUnitStatusRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Highlights on the 3d battlefield in same way script can (flashes entity markers and unit ids for example)",
				"name" : "Highlight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this unit has the ability to be always flying",
				"name" : "CanAlwaysFlying",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if unit has any CcoUiUnitStatusRecord currently",
				"name" : "HasStatus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the unit is currently receiving a battle harmony buff",
				"name" : "IsBuffedByHarmony",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit can be selected",
				"name" : "IsSelectable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Gives control of the unit to a given army",
				"name" : "DevSetArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the base rate at which health is being replenished by abilities",
				"name" : "HealthReplenishRateBase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the list of abilities this unit can use as a list of CcoBattleAbility - these have current state information on abilities unlike CcoUnitAbility",
				"name" : "BattleAbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleAbility"
				}
			},
			
			{
				"doc" : "Returns the current number of entities",
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current most important CcoUiUnitStatusRecord that is active",
				"name" : "StatusMostImportant",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUiUnitStatusRecord"
				}
			},
			
			{
				"doc" : "Returns true if a unit of renown (special limited units that have certain perks and we highlight in the UI)",
				"name" : "IsRenown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit has the ability to fly",
				"name" : "CanFly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Selects this unit to control",
				"name" : "Select",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the max health",
				"name" : "HealthMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a string representing the state of the current harmony effect (yin/yang), or an empty string if there is no active harmony effect. Optional argument specificies if harmony base type of the unit should count towards the effect, defaults to true",
				"name" : "ActiveHarmonyEffectState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if this unit belongs to the enemy alliance",
				"name" : "IsEnemyUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Gives control of the unit to the player",
				"name" : "DevTakeControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the list of abilities this unit can use as a list of CcoUnitAbility",
				"name" : "AbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns the max health percent that can be replenished by abilities",
				"name" : "MaxHealthPercentCanReplenish",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleBuilding this unit is currently on/in",
				"name" : "BuildingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleBuilding"
				}
			},
			
			{
				"doc" : "Returns true if artillery unit that has dropped their engines",
				"name" : "HasArtilleryDroppedEngines",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit belongs to the player",
				"name" : "IsPlayerUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the raw health value",
				"name" : "HealthValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the icon path used for unit cards, etc",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Zooms camera to look at this unit",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this unit has fire at will enabled",
				"name" : "IsFiringAtWill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "<CcoBattlePurchasableGroupRecord List>); Returns a list of the unlocked abilities from the list of groups supplied",
				"name" : "UnlockedAbilities",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSpecialAbilityRecord"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently transformed in a changeling form",
				"name" : "IsChangelingTransformation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Toggles control between player and UI, useful for taking control of enemy units for example",
				"name" : "DevToggleControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the percentage of men lost in the last 4 seconds",
				"name" : "PercentCasualtiesRecently",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this unit is a commanding general unit",
				"name" : "IsGeneral",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if a spawned unit (came from an ability for example during the battle)",
				"name" : "IsSpawnedUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a string representing state of active effects (positive/negative/both) if any, optional bool can be provided which when true will only consider non-passive effects as counting",
				"name" : "ActiveEffectState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleSetupContext which wraps BATTLE_SETUP_UNIT for this unit (setup info came into battle with)",
				"name" : "SetupUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupUnit"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently moving at running pace",
				"name" : "IsRunning",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the unit is tagged as a Yin or Yang battle harmony unit",
				"name" : "HasHarmonyEffect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percentage of HP lost in the last 4 seconds",
				"name" : "PercentHpLostRecently",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if we should show ammo UI for this unit",
				"name" : "ShouldShowAmmo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the unit CanGuerrillaDeploy and can do this currently (has extra checks like not in a vehicle, etc)",
				"name" : "CanGuerrillaDeployCurrently",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit is currently moving at walking pace",
				"name" : "IsWalking",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Forces a unit to do rampage bool",
				"name" : "DevSetForceRampage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns a list of passive battle abilities current on cooldown",
				"name" : "CooldownPassiveAbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleAbility"
				}
			},
			
			{
				"doc" : "Returns the localised name of the current FatigueState",
				"name" : "FatigueName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitDetails for this unit, used for unit info panel that shows unit information from various sources",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns true if this unit currently has the specific wounded ability provided by Gary as wants to indicate this on health bars as special case",
				"name" : "IsWounded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoMainUnitRecord for this unit",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns true if unit is undead or construct (different morale rules apply to these, have crumbling and unstable states)",
				"name" : "IsUndead",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns highest reload percent in entity (so closest entity to firing), with idea being requested by Attila so know when unit will next be able to shoot to stop players wondering why unit not attacking",
				"name" : "ReloadPercentMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoBattleUnitEffect" : 
	{
		"area" : "Battle",
		"doc" : "Wrapper for a battle unit effect",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleUnitEffect",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this effect is modified by an intensity value greater than 1.0f",
				"name" : "HasIntensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return the time in seconds remaining for this effect",
				"name" : "TimeRemainingSeconds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the battle ability for this effect",
				"name" : "BattleAbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAbility"
				}
			},
			
			{
				"doc" : "Returns the intensity that that the effect is being multiplied by, or 1.0f if there is no intensity amount",
				"name" : "Intensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the percentage of the effect that has completed",
				"name" : "PercentComplete",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the total duration of this effect",
				"name" : "TotalDurationSeconds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Return the setup ability for this effect",
				"name" : "AbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Return the start time in seconds for this effect",
				"name" : "StartTimeSeconds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the activating phase record for this effect",
				"name" : "PhaseRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Returns the tooltip layout that should be used for this effect",
				"name" : "TooltipLayout",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the small icon path for the effect",
				"name" : "IconPathSmall",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the icon path for the effect",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the name of the effect",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoBattleVehicle" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleVehicle",
		"symbols" : 
		[
			
			{
				"name" : "IsDestroyed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CategoryName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PercentOnFire",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleVortexRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a BATTLE_VORTEX_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleVortexRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the radius that the vortex will expand to at the end of its duration",
				"name" : "GoalRadius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the speed that the vortex expands at",
				"name" : "ExpansionSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the duration in seconds of the vortex",
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the calculated armour piercing value based on the damage AP to damage ratio, as a percentage",
				"name" : "ArmourPiercingPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of vortexes that this spell creates",
				"name" : "NumVortexes",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the armour-piercing damage per second per entity hit of the vortex",
				"name" : "DamageAP",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the damage per second per entity hit of the vortex",
				"name" : "Damage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the max angle change of the vortex",
				"name" : "ChangeMaxAngle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether this vortex shape is Circle",
				"name" : "IsCircle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the contact effect context for this battle vortex record (nullptr if not set)",
				"name" : "ContactEffectPhaseContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Returns true if the vortex also affects allied units",
				"name" : "AffectsAllies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of all battle vortex records",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleVortexRecord"
				}
			},
			
			{
				"doc" : "Returns true if the vortex deals magical damage",
				"name" : "IsMagical",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the delay between creating additional vortexes",
				"name" : "DelayBetweenVortexes",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the db key for this record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the delay before the vortex starts dealing damage / applying contact effects",
				"name" : "Delay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the force that the vortex detonates with",
				"name" : "DetonationForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the ignition amount of the vortex",
				"name" : "IgnitionAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the speed that the vortex moves at (m/s)",
				"name" : "MovementSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the height that the vortex will expand to at the end of its duration",
				"name" : "GoalHeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoBattleWeatherTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleWeatherTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "AccuracyMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NavalAppropriate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ListOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GunReloadBonus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BowReloadBonus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattleWindsOfMagicPool" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattleWindsOfMagicPool",
		"symbols" : 
		[
			
			{
				"name" : "CurrentWind",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasUnlimitedWind",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DepletionModifierPhaseList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RechargeModifierPhaseList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpellPreviewRemainingMana",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsWindsOfMagicGamblerOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RechargeRateString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RechargeRatePercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentRechargePerSecond",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxWind",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReserveWind",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBattlefieldEngineRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a BATTLEFIELD_ENGINE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlefieldEngineRecord",
		"symbols" : 
		[
			
			{
				"name" : "BattleEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntityRecord"
				}
			},
			
			{
				"name" : "MissileWeaponContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMissileWeaponRecord"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlefieldEngineRecord"
				}
			},
			
			{
				"name" : "CanBeDismantled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBattlefieldSiegeVehicleRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for BATTLEFIELD_SIEGE_VEHICLE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlefieldSiegeVehicleRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if valid for 15m walls",
				"name" : "Uses15mWall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if valid for 8m walls",
				"name" : "Uses8mWall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of all CcoBattlefieldSiegeVehicleRecord in table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlefieldSiegeVehicleRecord"
				}
			},
			
			{
				"doc" : "Returns max number can recruit",
				"name" : "RecruitmentCap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the image path",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised description",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns vehicle category (battering ram, siege tower, etc)",
				"name" : "VehicleCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the entity record context",
				"name" : "SiegeVehicleEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntityRecord"
				}
			},
			
			{
				"doc" : "Returns unique key for db record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns sort order used by UI",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns damage causes (for attacking gates, etc)",
				"name" : "AttackDamage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the threshold of fire damage will take before catching fire",
				"name" : "IgnitionThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the hit points (health) of equipment",
				"name" : "HitPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of CcoFactionRecord that can use this record",
				"name" : "AvailableToFactionsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"doc" : "Returns the category image path",
				"name" : "CategoryImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the cost to purchase",
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoBattlefieldSiegeVehiclesCustomBattleRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBattlefieldSiegeVehiclesCustomBattleRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Probability",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Cap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "VehicleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBuildingChainRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a building chain record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBuildingChainRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the maximum number of building levels that share the same level (for branching trees)",
				"name" : "MaximumChainColumn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the slot where this chain is built if that exists. If not, returns the next empty slot available. Returns null if there is no active empty slot.",
				"name" : "BuildingBrowserSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns a list with all the records in building_chains table.",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns a cyclical tree structure for buildings that have a lifecycle.",
				"name" : "CyclicBuildingTree",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "TreeData"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns a tree structure with all the levels in the chain.",
				"name" : "BuildingTree",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "TreeData"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns a list with the upgrades of the slot passed in that are part of this chain.",
				"name" : "CurrentSlotUpgradeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the localised name of this chain.",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns an int with the sort order of this chain (compared to other chains)",
				"name" : "OptionalSortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the optional tier icon defined in the table, or an empty string if this doesn't exist",
				"name" : "OptionalTierIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of the superchain that this chain is part of.",
				"name" : "BuildingSuperchainContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingSuperchainRecord"
				}
			},
			
			{
				"doc" : "Returns an int with the minimum level that is faction unique. Returns -1 if no such level exists.",
				"name" : "MinUniqueLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list with all the levels in this chain.",
				"name" : "LevelsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the first building level in the chain.",
				"name" : "LevelZeroBuildingLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Helper function to calculate the percentage of fill, taking the amount of time left until next cyclic building level.",
				"name" : "PercentageUntilNextCyclicLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if the record can be found in the encyclopedia.",
				"name" : "InEncyclopedia",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the maximum level in this chain.",
				"name" : "MaximumLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a string with the building chain category type.",
				"name" : "TechnologyCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of this chain's set.",
				"name" : "BuildingSetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingSetRecord"
				}
			},
			
			{
				"doc" : "Returns the key of the record.",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoBuildingCultureVariantRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBuildingCultureVariantRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Disables",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NameKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LongDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ShortDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SubcultureRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CultureRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BuildingLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBuildingLevelRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a BUILDING_LEVEL_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBuildingLevelRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this building is part of a lifecycle chain",
				"name" : "HasLifecycleState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list with the units provided by this building. Needs passing a settlement or character context in order to check for permissions",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if this building exceeds the cap of this type of building in the province",
				"name" : "DoesBuildingExceedCap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns the CcoConstructionItem context for this building level, if any. Need to pass in the building slot where this is built.",
				"name" : "ConstructionItemForCurrentSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignConstructionItem"
				}
			},
			
			{
				"doc" : "Returns true if this building can be damaged",
				"name" : "CanBeDamaged",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the required resource for this building, if any",
				"name" : "ResourceRequirementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoResourceRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns true if there is already a building of this type in the province, which might not provide any other benefits",
				"name" : "IsRedundantDuplicate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this building should be shown in ui as a requirement for a technology",
				"name" : "ShouldShowBuildingLevelInUiForTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if this building level is built in the passed in slot, or if any building level above it is built",
				"name" : "IsBuiltInSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the building chain record that this level is part of",
				"name" : "BuildingChainRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			},
			
			{
				"doc" : "Returns true if this building level can be converted",
				"name" : "CanConvert",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the time it will take the previous building to transition to this one. Returns 0 if this level is not part of a cyclic chain",
				"name" : "LifecycleTransitionTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the culture variant of this building for the player faction",
				"name" : "PlayerVariantRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingCultureVariantRecord"
				}
			},
			
			{
				"doc" : "Returns true if this building is a resource building(provides resource when built)",
				"name" : "IsResourceBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this building is available to the players faction",
				"name" : "CanPlayerBuildThis",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the amount of food this building will require to be constructed",
				"name" : "FoodCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the level it downgrades to",
				"name" : "DowngradesToLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the level of the primary slot that needs to be built for this level to be available",
				"name" : "PrimarySlotBuildingLevelRequirement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this building level needs resources to build",
				"name" : "HasResourceRequirements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the resource for this building, if any",
				"name" : "ResourceRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoResourceRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if this level is not available due to primary building requirements",
				"name" : "IsLockedByLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the development point cost of this building level. If passed a settlement or character, it will return the cost depending on any bonus values they might have",
				"name" : "DevelopmentPointCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns the context of the (pooled) resource transaction cost of this building",
				"name" : "ResourceCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Issues the appropriate command when clicking on a building (cancel construction if building, build if it can etc)",
				"name" : "IssueCommandForBuildingBrowser",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if this building can be shows as the active state in the building browser",
				"name" : "IsActiveForBuildingBrowser",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the slave constribution for this building",
				"name" : "SlaveCapContribution",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of pairs with mercenary units and amount provided by this building level, if any",
				"name" : "MercenaryUnitAndAmountPairList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns a list with this building's additional dependent units",
				"name" : "AdditionalDependentUnitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns true if this can only be built in the capital",
				"name" : "OnlyInCapital",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "If the component has a BuildingInfoPanelMouseOver callback, it will initialise this with building info.",
				"name" : "SetupTooltipForHordeBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the upkeep cost for this building level",
				"name" : "UpkeepCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list with the required technologies for this building to become available",
				"name" : "RequiredTechnologiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the cost to create this building. If passed either a settlement or a character, it will return the cost based on any bonus values those might have",
				"name" : "CreateCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if this is the building level that is currently built in the passed in slot",
				"name" : "IsBuildingForCurrentSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "If the component has a BuildingInfoPanelMouseOver callback, it will initialise this with building info. Otherwise, it opens info panel with building info. If second argument is true, it will only show technology info",
				"name" : "OpenBuildingInfoPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns the number of turns it would take to construct this",
				"name" : "CreateTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list with this building level's upgrades",
				"name" : "UpgradesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the level of this building level",
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the building is restricted by mission etc",
				"name" : "IsEpisodicRestricted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if this building can be built in the slot passed in",
				"name" : "CanBuildInCurrentSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the building level records in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the health override of this building level",
				"name" : "HealthOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if the mouseover that shows cost/turns should show",
				"name" : "ShouldShowMouseOverComponent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the settlement/character passed in has enough development points to build this",
				"name" : "HasEnoughDevelopmentPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns a list with the effects provided by this building",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns the tooltip for this building, depending if it can build/is in construction etc. Need to pass building slot where this is built.",
				"name" : "TooltipForCurrentSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list with the agents provided by this building level",
				"name" : "AgentList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeAgentPair"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the settlement/character passed in can afford to build this",
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					}
				],
				"doc" : "Returns true if this building level, or a building level above this, is built in the passed in province",
				"name" : "IsBuiltInProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a string with the encyclopedia redirect link for this building",
				"name" : "EncyclopediaRedirectBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if this level is the one currently in construction in the slot passed in",
				"name" : "IsCurrentConstructionItemForSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with technologies unlocked by this building",
				"name" : "TechList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Returns true if this building is unique in the faction/can only be built once in the faction",
				"name" : "FactionUnique",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the key of the building level record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBuildingSlot"
					}
				],
				"doc" : "Returns true if visible in ui. If passed true, will take into account that this is a primary level slot(and therefore return false if it't ruin level for that)",
				"name" : "VisibleInUi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoBuildingSetRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a BUILDING_SET_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBuildingSetRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all building set records from the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingSetRecord"
				}
			},
			
			{
				"doc" : "Returns a Pixel8888 with the colour of the set",
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns an int with the sort order",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised description of the building set",
				"name" : "OnscreenDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the audio switch for the building set",
				"name" : "AudioSwitch",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised name of the set",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the icon path of the building set",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the maximum number of buildings in this set. Used for calculating the radius of the list. Can pass a settlement or character (horde) to only use chains available there.",
				"name" : "MaximumChainBuildings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns a list with all the building superchains for the settlement passed in",
				"name" : "BuildingSuperChainsForSettlement",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingSuperchainRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list with all the building chains in the set. Can pass a settlement or character (horde) to get the chains that are only available there",
				"name" : "BuildingChains",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			}
		]
	},
	"CcoBuildingSuperchainRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoBuildingSuperchainRecord",
		"symbols" : 
		[
			
			{
				"name" : "ChainsForProvinceList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChainList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoBulletPoint" : 
	{
		"area" : "Record",
		"doc" : "Context wrapper for a bullet point",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoBulletPoint",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the text of the bullet point",
				"name" : "BulletPointText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the image path of the bullet point",
				"name" : "BulletPointImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCallbackExpressionStore" : 
	{
		"area" : "Common",
		"doc" : "A class representing a one-to-one relationship between a component and one of its callbacks.",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCallbackExpressionStore",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all the expression values stored for this callback-component pair.",
				"name" : "ValueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				},
				"tags" : [ "ui", "debug" ]
			}
		]
	},
	"CcoCampaignAncillary" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign ancillary",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignAncillary",
		"symbols" : 
		[
			
			{
				"doc" : "Removes itself from the character that it's equipped to.",
				"name" : "RemoveAncillary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignAncillary"
					}
				],
				"doc" : "Equips itself to the specified character, and swaps with the ancillary passed in if this exists.",
				"name" : "EquipToCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the player character context where this ancillary is equipped, if any.",
				"name" : "CharacterEquippedToContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the ancillary record context.",
				"name" : "AncillaryRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignAncillary"
					}
				],
				"doc" : "Fuses with the specified ancillary for the players faction (if possible)",
				"name" : "FuseForPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignAncillary"
					}
				],
				"doc" : "Returns true if can fuse with the specified ancillary",
				"name" : "CanFuse",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of CcoMainUnitRecord that are provided as bodyguards as a result of ancillary being equipped",
				"name" : "ProvidedBodyguards",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns localised colour text from record",
				"name" : "ColourText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Marks the equipment as seen so that HasSeen will return false",
				"name" : "MarkAsSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns localised effect text from record",
				"name" : "EffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the icon path for the ancillary type",
				"name" : "TypeIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if the user has already 'seen' this ancillary (MarkAsSeen has been called on it). This is to highlight new equipment",
				"name" : "HasSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect given by this ancillary when equipped, includes those not shown in ui",
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignAncillary"
					}
				],
				"doc" : "Returns the tooltip for fusing with the passed in ancillary",
				"name" : "FuseTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect given by this ancillary when equipped, prefiltered to not show those that shouldnt appear in ui",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns true if specified character can equip this ancillary",
				"name" : "CanCharacterEquip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of turns this has been equipped",
				"name" : "TurnsEquipped",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this ancillary can ever be fused.",
				"name" : "IsFusable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns icon path for images",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns an int with the value of the ancillary if it were to get salvaged.",
				"name" : "SalvageValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns localised name of ancillary",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Salvages the ancillary.",
				"name" : "Salvage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignAreaOfInterest" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignAreaOfInterest",
		"symbols" : 
		[
			
			{
				"name" : "IsMouseOver",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ZoomToClosest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignArmoryItemVariant" : 
	{
		"area" : "Campaign",
		"doc" : "Class that wraps a family member and an armory item variant that this family member owns",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignArmoryItemVariant",
		"symbols" : 
		[
			
			{
				"doc" : "Equips the set that this item is part of",
				"name" : "EquipItemSet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Unequips this variant from the family member",
				"name" : "UnequipItemVariant",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Equips this variant to the family member",
				"name" : "EquipItemVariant",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this variant if compatible with the agent subtype of the family member",
				"name" : "IsCompatibleWithAgentSubtype",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this item can be equipped on the family member",
				"name" : "CanEquipItem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this variation is equipped on the character",
				"name" : "IsEquipped",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this variation is available to the family member",
				"name" : "IsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the armory item variants that conflict with this item.",
				"name" : "ConflictingItemVariantList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemVariantRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the character that owns this variant",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the context of the armory item variant",
				"name" : "ArmoryItemVariantRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmoryItemVariantRecord"
				}
			}
		]
	},
	"CcoCampaignArmyPlague" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignArmyPlague",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoPlagueRecord"
					}
				],
				"doc" : "Selects the plague with the CcoPlagueRecord passed in",
				"name" : "SelectPlague",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignBasePlague with the plague that is currently applied to the army",
				"name" : "ActivePlagueContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBasePlague"
				}
			},
			
			{
				"doc" : "Returns a list of CcoPlagueRecord with the plagues that have been unlocked for this faciton",
				"name" : "UnlockedPlagueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignBasePlague with all plague for this faction",
				"name" : "PlagueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignBasePlague"
				}
			}
		]
	},
	"CcoCampaignBasePlague" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a base plague",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignBasePlague",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a CcoCampaignPlagueComposition which a plague composition with this base plague",
				"name" : "PlagueCompositionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueComposition"
				}
			},
			
			{
				"doc" : "Returns a CcoPlagueEffectRecord which contains all effect bundles for this plague",
				"name" : "PlagueEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPlagueEffectRecord"
				}
			},
			
			{
				"doc" : "Returns the record of the plague",
				"name" : "PlagueRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPlagueRecord"
				}
			},
			
			{
				"doc" : "Returns the description of the plague (currently taken from any of the effect bundles",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the plague (currently taken from any of the effect bundles",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns record key for the plague",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignBattle" : 
	{
		"area" : "Campaign",
		"doc" : "This is the wrapper for pending battles in campaign, use to get information for prebattle/postbattle screen",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignBattle",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if current battle is a quest battle",
				"name" : "IsQuestBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if there is currently a pending battle (in prebattle or postbattle screen)",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns set piece battle key for quest battle if this battle is a quest battle",
				"name" : "QuestBattleKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignBattlePresetRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignBattlePresetRecord",
		"symbols" : 
		[
			
			{
				"name" : "IsUniqueSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TileUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CoordY",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CoordX",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BattleType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ScreenshotPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CampaignMapContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignBuilding" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignBuilding",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the context of the building level record from this building",
				"name" : "BuildingLevelRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns a long description of the building",
				"name" : "LongDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a short description of the building",
				"name" : "ShortDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the building",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the unique identifier of the building",
				"name" : "UniqueId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if this building can be upgraded",
				"name" : "CanUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this building is damaged",
				"name" : "IsDamaged",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this building is ruined",
				"name" : "IsRuined",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this building is abandoned",
				"name" : "IsAbandoned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the health percentage of this building",
				"name" : "HealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns an int with the amount of food this building is consuming",
				"name" : "FoodCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the amount of gold this building will give when dismantled",
				"name" : "DismantleRefundAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the upkeep cost of the building",
				"name" : "UpkeepCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the maximum health of the building",
				"name" : "MaxHealth",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current health of the building",
				"name" : "Health",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of effects provided by this building",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the culture variant from the faction that owns this building",
				"name" : "BuildingCultureVariantRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingCultureVariantRecord"
				}
			}
		]
	},
	"CcoCampaignBuildingLifecycleState" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignBuildingLifecycleState",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the lifecycle can transition to the next state",
				"name" : "CanEnterNextState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the building level which is currently in transition",
				"name" : "NextBuildingLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the building level whose effects are currently active",
				"name" : "CurrentBuildingLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the amount of turns until the lifecycle transitions to the next building level",
				"name" : "TurnsUntilNextState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the building culture variant of the next building level",
				"name" : "BuildingCultureVariantRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingCultureVariantRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the lifecycle to loop or not depending on the value of the bool passed in",
				"name" : "SetCanLoop",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the lifecycle is allowed to loop instead of demolishing the building at the end of the cycle",
				"name" : "CanLoop",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the lifecycle can leave the current state",
				"name" : "CanLeaveState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignBuildingSlot" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignBuildingSlot",
		"symbols" : 
		[
			
			{
				"doc" : "Returns an int with how much it costs to repair this building",
				"name" : "RepairCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Command that will instantly construct the current construction item",
				"name" : "InstantUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the settlement that owns the slot, if the slot if a region slot or a foreign slot.",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBuildingLevelRecord"
					}
				],
				"doc" : "Command that will construct the building level record passed in",
				"name" : "Construct",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this is a horde slot",
				"name" : "IsHordeSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with how much it costs to remove the manager associated with this slot. Works only with foreign slots",
				"name" : "RemovalCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the character that owns this slot, if any exists",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the threshold of the skaven underworld empire being discovered",
				"name" : "SkavenDiscoverabilityThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the building on this slot, if it has any",
				"name" : "BuildingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuilding"
				}
			},
			
			{
				"doc" : "Command that will dismantle the current building in the slot",
				"name" : "Dismantle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this slot is part of capital.",
				"name" : "IsPartOfCapital",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with the possible upgrades in this slot, without any conversions.",
				"name" : "PossibleUpgradeWithoutConversionsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns an int with the available development points of the owner of the building",
				"name" : "AvailableDevelopmentPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the building in this slot is being dismantled.",
				"name" : "IsDismantling",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Command that will repair the current building in the slot",
				"name" : "Repair",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the primary slot level when this slot will get unlocked",
				"name" : "SlotActivateLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBuildingLevelRecord"
					}
				],
				"doc" : "Returns whether all dependent buildings have been built for the provided building level",
				"name" : "BuildingRequirementsMet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the building in this slot is being converted.",
				"name" : "IsConverting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a list with the possible conversions in this slot",
				"name" : "PossibleUpgradeOnlyConversionsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the given building has been constructed in this slot",
				"name" : "HasConstructedBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the index of this slot in the slot list",
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the building in this slot is being upgraded.",
				"name" : "IsUpgrading",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list of factors that affected the skaven discoverability",
				"name" : "SkavenDiscoverabilityFactorialList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns true if can afford to instantly construct in this slot",
				"name" : "CanAffordInstantUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the building in this slot is being repaired",
				"name" : "IsRepairing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a tooltip for when demolishing recoups pooled resources",
				"name" : "PooledResourceDemolishTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a list with all the possible building chains that can be constructed in this slot",
				"name" : "PossibleBuildingChainsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			},
			
			{
				"doc" : "Returns true if there is a new building being built in this slot",
				"name" : "IsBuildingNew",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this building slot has the feature to be instantly constructed",
				"name" : "HasInstantUpgradeFeature",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a tooltip with the cost to repair the building",
				"name" : "RepairCostTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of building sets that could be built in this slot",
				"name" : "PossibleBuildingSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingSetRecord"
				}
			},
			
			{
				"doc" : "Returns true if the building in this slot can be converted to another building",
				"name" : "CanConvert",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a tooltip for this slot",
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if this foreign slot has been discovered by the faction passed in",
				"name" : "ForeignSlotDiscoveredByFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the building in this slot can be upgraded.",
				"name" : "CanUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with the possible downgrades in this slot",
				"name" : "PossibleDowngradeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns true if this slot is owned by the player faction",
				"name" : "IsPlayerFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignResourceTransaction with the transaction needed to instantly upgrade the building. Returns null is cannot instantly upgrade",
				"name" : "InstantUpgradeCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns true if the building in this slot can be dismantled",
				"name" : "CanDismantle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this slot can show the option popup that shows if the slot can be repaired, dismantled etc.",
				"name" : "CanShowOptionsPopup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a list of the possible upgrades from this slot. Optional bool parameter to specify whether want all buildable infos",
				"name" : "PossibleUpgradeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the pooled resource needed to repair a the building",
				"name" : "RepairResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns true if this building can be repaired (usually true when this building is damaged)",
				"name" : "CanRepair",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this slot can be currently shown in the ui",
				"name" : "ShouldShowSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the slots that exist on the slot manager",
				"name" : "BuildingSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns the context of faction that owns this slot",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if this slot should show the categories popup",
				"name" : "ShouldShowCategoriesPopup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this slot is an allied foreign slot",
				"name" : "IsAlliedSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the player variant of the building in this slot",
				"name" : "PlayerVariantBuildingChainContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			},
			
			{
				"doc" : "Returns true if this slot is a port",
				"name" : "IsPort",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this slot can show a list of its upgrades",
				"name" : "CanShowUpgradeOptions",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Removes the foreign slot manager associated with this slot, if this is a foreign slot. Optional can pass in the faction that wants to remove the manager",
				"name" : "RemoveForeignSlotManager",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the construction item (if building is demolishing, constructing etc)",
				"name" : "ConstructionItemContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignConstructionItem"
				}
			},
			
			{
				"doc" : "Returns true if this is the main/primary slot",
				"name" : "IsPrimary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a region slot and the settlement that owns it can be abandoned",
				"name" : "CanAbandon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "If this slot can be upgraded, it just constructs the first possible upgrade. This is currently used for outposts where only one building option is available",
				"name" : "UpgradeToFirstAvailableOption",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if there is no building in this slot.",
				"name" : "IsEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the lifecycle state, if this slot contains a cyclic building",
				"name" : "LifecycleStateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingLifecycleState"
				}
			},
			
			{
				"doc" : "Returns true if this is a region slot",
				"name" : "IsRegionSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Command that cancels the current construction",
				"name" : "CancelConstruction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the primary slot from the slot manager, is any exists",
				"name" : "PrimarySlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns true if the slot is active (not locked by primary slot requirement)",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a foreign slot",
				"name" : "IsForeignSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignBuildingVariant" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignBuildingVariant",
		"symbols" : 
		[
			
			{
				"name" : "BuildingLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenNameKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CulturalVariantKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "InfoFilename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconFilename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LongDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ShortDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignCaravan" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign caravan",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCaravan",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a CcoCampaignRouteNode context with the destination node choice of the player",
				"name" : "DestinationNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignRouteNode context with the starting node choice of the player",
				"name" : "StartingNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignRouteSegment"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCaravanContractRecord"
					}
				],
				"doc" : "Changes the current path to include the segment passed in an updates the rest of the path to make sure it's valid",
				"name" : "ChangePathSegment",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a CcoCaravanContractRecord with the current contract for this caravan, if any",
				"name" : "ContractContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCaravanContractRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacter with the character that owns the caravan",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignRoute node context where the caravan is currently positioned",
				"name" : "CurrentNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			},
			
			{
				"doc" : "Returns the a list of nodes that the caravan has already traversed",
				"name" : "TravelledPathNodeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			},
			
			{
				"doc" : "Returns the a list of nodes that the caravan will transverse next",
				"name" : "PathNodeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			},
			
			{
				"doc" : "Returns the current display position of the caravan",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns true if the caravan has already reached its destination and is now returning back to the starting point",
				"name" : "IsReturning",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignRouteNode"
					}
				],
				"doc" : "Time it takes to reach this node from destination if we take the best route",
				"name" : "BestJourneyTimeForNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCaravanContractRecord"
					}
				],
				"doc" : "Maximum cargo for the caravan and passed in contract",
				"name" : "MaximumCargo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the turns until the caravan goes back to the starting point, this will only be > 0 after the caravan reaches its destination",
				"name" : "TurnsUntilReturn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the amount of cargo that this caravan currently has",
				"name" : "CargoAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Clears the starting path of the caravan",
				"name" : "ClearStartingPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignRouteNode"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCaravanContractRecord"
					}
				],
				"doc" : "Sets the caravan path towards the node passed in, if it's possible",
				"name" : "SetAutoPathTowardsNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this is a reserve caravan",
				"name" : "IsReserve",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignRouteNode"
					}
				],
				"doc" : "Sets the starting node for this caravan",
				"name" : "SetStartingNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignCaravanRecruitmentItem" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign FACTION_CARAVANS struct",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignCaravanRecruitmentItem",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the rank at which this caravan master will be spawned",
				"name" : "RecruitmentRank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cost to recruit this caravan master",
				"name" : "RecruitmentCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the caravan master character context",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			}
		]
	},
	"CcoCampaignCharacter" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign character",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacter",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the current amount of skill points have to spend",
				"name" : "SkillPointsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoAgentRecord",
				"name" : "AgentRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"doc" : "Returns localised character type (general, agent type, faction leader, etc)",
				"name" : "CharacterTypeName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if character visible to player on map (not shrouded, hidden, etc)",
				"name" : "IsVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if can afford to perform the current movement preview",
				"name" : "CanAffordMovePreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Vector4"
					}
				],
				"doc" : "Zooms camera to this character. Can optionally provide an offset for the zoom.",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Re-rolls all initiatives for this character",
				"name" : "DevReRollInitiatives",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the subterfuge level",
				"name" : "SubterfugeLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of active CcoEffectBundle, without any filtering (so includes those that dont show in the UI)",
				"name" : "EffectBundleUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if should show on radar/radar lists, this handles all special cases of things we dont want to show like garrisons, etc. By default filters convalescing characters, but pass true in to not do that",
				"name" : "ShouldShowOnRadar",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if currently previewing where to move for this character (holding right click down on map with character selected)",
				"name" : "IsPreviewingMove",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this character is a general of an army",
				"name" : "IsArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current XP progress percent to next level (0-1)",
				"name" : "CurrentXpPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Selects and zooms to this character. Plays character selection voice line. Pass false to not play VO.",
				"name" : "SelectAndZoom",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns localised description of the character",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns to CcoCampaignCharacterSkill for the characters single background skill they start with",
				"name" : "BackgroundSkillContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterSkill"
				}
			},
			
			{
				"doc" : "Enables all armory items for character",
				"name" : "DevAddAllArmoryItems",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if this character is selected",
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the authority level",
				"name" : "AuthorityLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this character is governing a province",
				"name" : "IsGovernor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Toggles a list of initiatives which can come from multiple sets.",
				"name" : "ToggleMultipleInitiativesFromSets",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Enables all the characters skills",
				"name" : "DevEnableAllSkills",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the factions localised name with icon (use this instead of getting from faction so works correctly with rebels)",
				"name" : "FactionNameWithIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns list of active CcoEffectBundle, pre-filtered to only include those that should show in the UI",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the colour tint of the character, in wh3 this is used for daemon prince based on equipment select and alignment to gods",
				"name" : "TintColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignCharacterLoyalty",
				"name" : "LoyaltyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterLoyalty"
				}
			},
			
			{
				"doc" : "Returns the zeal level",
				"name" : "ZealLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMilitaryForce if character is a general",
				"name" : "MilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns true if we don't have a ptr to a CHARACTER object which means character is basically dead or doesnt exist yet, so has no live information such as map info, etc",
				"name" : "IsDetailsOnly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this character is currently on the map",
				"name" : "IsOnMap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the position on the map, will be VECTOR_4_ZERO if not not on map",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the factions localised name (use this instead of getting from faction so works correctly with rebels)",
				"name" : "FactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Gets the cost of initiatives which can come from multiple sets.",
				"name" : "CostForMultipleInitiativesFromSets",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Ranks up the character",
				"name" : "DevRankUp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the CcoCampaignFaction of the character",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if this character can use armory items.",
				"name" : "CanUseArmoryItems",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the total action points available for this character per turn",
				"name" : "ActionPointsPerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the character can use action points. Ex. Caravans and Ogre Camps can't use",
				"name" : "CanUseAp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Replenishes action points to be full",
				"name" : "DevReplenishAp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if this character is currently alive and in use on the map",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the buildings that the horde of this general will get back on resurrection.",
				"name" : "HordeSnapshotBuildingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignAncillary"
					}
				],
				"doc" : "Returns true if this character can equip the ancillary passed in.",
				"name" : "CanEquipAncillary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of action points remaining this turn",
				"name" : "ActionPointsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the skill tree data for creating a skill tree",
				"name" : "SkillTree",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "TreeData"
				}
			},
			
			{
				"doc" : "Returns the localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignInitiativeManager",
				"name" : "InitiativeManager",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignInitiativeManager"
				}
			},
			
			{
				"doc" : "Breaks into debugger so can inspect internal object in greater detail",
				"name" : "BreakForDebugging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if the character can be embedded into an army",
				"name" : "CanBeEmbedded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the specified effect key is present on the character ",
				"name" : "IsEffectPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the armory item records that are registered to this character.",
				"name" : "ArmoryItemRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemRecord"
				}
			},
			
			{
				"doc" : "Returns the cost to maintain this character per turn (if army this is for whole army not just the individual)",
				"name" : "Upkeep",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignSettlement with the settlement the character is currently in. Can be null for example if at sea",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Toggles adding or removing the character from the end turn notification ignore list based on whether it's already in the list or not",
				"name" : "ToggleIgnoreFromEndTurnNotifications",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this character is currently positioned on land and not sea",
				"name" : "IsOnLand",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoAncillariesCategoryRecord"
					}
				],
				"doc" : "Returns true if this character can use the ancillary category passed in.",
				"name" : "CanUseAncillaryCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the icon path used for display on minimap",
				"name" : "RadarIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all the armory item variants that are registered to this character.",
				"name" : "ArmoryItemVariantList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignArmoryItemVariant"
				}
			},
			
			{
				"doc" : "Returns true if the character is travelling in a teleportation node",
				"name" : "IsTravellingInTeleportationNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns how many turns will be until character gets resurrected and is available again",
				"name" : "TurnsToResurrection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this character is currently on screen",
				"name" : "IsOnScreen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this character is wounded",
				"name" : "IsWounded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Highlights the character applying a visual effect to model on campaign (pass true to highlight, false to disable highlight)",
				"name" : "HighlightCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the filepath for rotated faction flag. PREFER to use FactionFlagDir",
				"name" : "FactionFlagRotated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns a CcoCampaignPlagueComposition with the plague composition of this character, if any",
				"name" : "PlagueCompositionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueComposition"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignInitiativeSet available to character",
				"name" : "InitiativeSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiativeSet"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacterTeleportationSystem that manages the character interacting with the teleportation network system",
				"name" : "TeleportationSystemContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterTeleportationSystem"
				}
			},
			
			{
				"doc" : "Returns true if character is in end turn notification ignore list",
				"name" : "IsIgnoredFromEndTurnNotifications",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this character belongs to the player",
				"name" : "IsPlayerCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the filepath for large faction flag. PREFER to use FactionFlagDir",
				"name" : "FactionFlagLarge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Brings up a dialog to rename this character",
				"name" : "Rename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignCharacterSkill that are hidden to the UI",
				"name" : "HiddenSkillList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterSkill"
				}
			},
			
			{
				"doc" : "Returns the raw threshold level CurrentXP needs to be to reach next rank",
				"name" : "NextLevelThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this character is alive",
				"name" : "IsAlive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if character details can be opened for this character",
				"name" : "CanOpenDetails",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this character is a colonel (temporary general until general replaced on players next turn)",
				"name" : "IsColonel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacterSkill"
					}
				],
				"doc" : "Selects the specified skill ready to be committed",
				"name" : "SelectSkillChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the filepath for medium faction flag. PREFER to use FactionFlagDir",
				"name" : "FactionFlagMedium",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacterAutoManagement that handles auto management logic for this character",
				"name" : "AutoManagementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterAutoManagement"
				}
			},
			
			{
				"doc" : "Returns the current raw xp value",
				"name" : "CurrentXp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignCharacterSkill that are available to a character (regardless of current state)",
				"name" : "SkillList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterSkill"
				}
			},
			
			{
				"doc" : "Returns true if this character is a faction leader",
				"name" : "IsFactionLeader",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this character is garrisoned",
				"name" : "IsGarrisoned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Clears all skill choices currently made",
				"name" : "ClearAllSkillChoices",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if character is currently moving",
				"name" : "IsInMotion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignMilitaryForce with the force in which this character is part of (useful for getting force that an agent is part of)",
				"name" : "TransportedInMilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns true if character can be loaded in campaign and false if can only be loaded in custom battle",
				"name" : "CanBeLoadedInCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the filepath for small faction flag. PREFER to use FactionFlagDir",
				"name" : "FactionFlagSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns true if this character is an agent",
				"name" : "IsAgent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this character is the commander of a settlement garrison",
				"name" : "IsGarrisonCommander",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the character type icon path",
				"name" : "CharacterTypeIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignTrait that this character has that were gained in the chaos realms, these are highlighted in the UI in different ways",
				"name" : "ChaosRealmTraitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterTraitLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the current rank level",
				"name" : "Rank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignCaravan associated with this character if it exists",
				"name" : "CaravanContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCaravan"
				}
			},
			
			{
				"doc" : "Returns the unique command queue index of the family member",
				"name" : "FamilyMemberCQI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignGovernorshipInteraction for governor related queries/commands",
				"name" : "GovernorshipInteractionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignGovernorshipInteraction"
				}
			},
			
			{
				"doc" : "Returns true if character can be saved as part of persistent character feature (so can load in other campaigns or custom battle)",
				"name" : "IsSaveable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacterSkill"
					}
				],
				"doc" : "Clears specified skill choice currently made",
				"name" : "ClearSkillChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this character can be renamed (immortal characters cannot be renamed for example)",
				"name" : "CanRename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the unit category icon path",
				"name" : "CategoryIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the unique command queue index of the character",
				"name" : "CQI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of turns that the character will be locked in limbo. E.g. Packed up ogre camps stay in limbo for a number of turns.",
				"name" : "TurnsLockedInLimbo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Resets all skills for this character and wounds them for a short period",
				"name" : "ResetAllSkills",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignTrait that this character has",
				"name" : "TraitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterTraitLevelRecord"
				}
			},
			
			{
				"doc" : "Commits skills choices currently made",
				"name" : "CommitSkillChoices",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the actor vo id",
				"name" : "ActorVO",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the CcoUnitDetails for unit for use on unit info panel that shows unit stats from various sources",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns portrait image path used on unit cards",
				"name" : "ImageCardPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the previewed action point percent for when previewing stance change or potential move (0-1)",
				"name" : "ActionPointPreviewPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignUnit if this character has one (if commander in army, or agent embedded in army)",
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignUnit"
				}
			},
			
			{
				"doc" : "Returns true if this character has skill choices made but not committed (clicked on skills but not applied by closing screen for example)",
				"name" : "HasUncommitedSkills",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Move character to limbo or out of limbo)",
				"name" : "EnterLimbo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignUnit in this characters force",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnit"
				}
			},
			
			{
				"doc" : "Returns true if character is in limbo",
				"name" : "IsInLimbo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns portrait image path used on portholes",
				"name" : "PortraitPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if this character can currently rank up",
				"name" : "CanCharacterRankUp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Copies memory address of internal character to clipboard, useful for conditional breakpoints",
				"name" : "CopyMemoryAddressToClipboard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the remaining travel time of a character",
				"name" : "RemainingTravelTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoAgentSubtypeRecord",
				"name" : "AgentSubtypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Selects this character. Plays character selection voice line. Pass false to not play VO.",
				"name" : "Select",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of equipped CcoCampaignAncillary",
				"name" : "AncillaryList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignAncillary"
				}
			},
			
			{
				"doc" : "Returns directory faction flag images live in. Use this instead of getting from faction so works correctly for rebels",
				"name" : "FactionFlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Kills the character, useful for dev purposes (NOTE: doesnt kill the force, use CcoCampaignMilitaryForce::DevKill for that)",
				"name" : "DevKill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the remaining action point percent (0-1)",
				"name" : "ActionPointPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoCampaignCharacterAutoManagement" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for character auto-management logic",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterAutoManagement",
		"symbols" : 
		[
			
			{
				"doc" : "Activates the auto management for this character",
				"name" : "ToggleAutoManaging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the character is currently being auto managed by the AI",
				"name" : "IsAutoManaging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignCharacterLoyalty" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterLoyalty",
		"symbols" : 
		[
			
			{
				"name" : "RangeState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLoyaltyApplicable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Loyalty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnScreenLoyalty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignCharacterSkill" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign character skill",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterSkill",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoUnitAttributeRecord that we are currently providing",
				"name" : "UnitAttributeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns true if can remove a point (added a point but didnt commit the skill choices)",
				"name" : "CanRemovePoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a characters background skill (automatic and not chosen)",
				"name" : "IsBackgroundSkill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoUnitAbility that we are currently providing",
				"name" : "AbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the max level of the skill",
				"name" : "TotalLevels",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect that we are currently providing, including those filtered out usually to not show in ui",
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the current level of the skill",
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect that we are currently providing, prefiltered to not show those that shouldnt appear in ui",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the x grid position",
				"name" : "Indent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignCharacterSkill which are child links to us (unlocked by us)",
				"name" : "ChildSkillsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the y grid position",
				"name" : "Tier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the image path for the skill",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignCharacterSkill which are parent links to us (we are unlocked by)",
				"name" : "ParentSkillsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the status of the skill as an unlocalised string (available, complete, locked, etc)",
				"name" : "Status",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the campaign skill record key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised description of the skill",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the skill",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the owning CcoCampaignCharacter for this skill",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets skill level to specified numeric level. Used for testing skills in dev",
				"name" : "DevSetSkillLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the next CcoCampaignCharacterSkillLevelDetails if add another skill point",
				"name" : "NextLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterSkillLevelDetails"
				}
			},
			
			{
				"doc" : "Returns the current CcoCampaignCharacterSkillLevelDetails active",
				"name" : "CurrentLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterSkillLevelDetails"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Cycles skill level in specified direction (true forwards, false backwards) incrementing until reaches max and then resetting back to 0 if reach max. Used for testing skills in dev",
				"name" : "DevCycleSkillLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Removes a point from skill. Effects not applied until committed via character",
				"name" : "RemovePoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a pair with units and their ranks, that characters with this skill will spawn with",
				"name" : "SpawningUnitAndRankPairList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Adds a point into skill. Effects not applied until committed via character",
				"name" : "AddPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the list of CcoCampaignCharacterSkillLevelDetails for each level of this skill",
				"name" : "LevelsDetailsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoCampaignCharacterSkillLevelDetails" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign character skill level details (each CcoCampaignCharacterSkill has multiple levels, each level represented by one of these)",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterSkillLevelDetails",
		"symbols" : 
		[
			
			{
				"doc" : "Returns if this skill level is currently locked",
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the rank required to research this skill level",
				"name" : "RankRequired",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the level index",
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoUnitAttributeRecord provided by this skill level",
				"name" : "UnitAttributeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns list of CcoUnitAbility provided by this skill level",
				"name" : "AbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns list of CcoEffect provided by this skill level",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoCampaignCharacterTeleportationInteraction" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a targetting interface that deals with teleport points on the map",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterTeleportationInteraction",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the targetting for this interface is active",
				"name" : "IsTargettingActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the reason why a target cannot be selected",
				"name" : "InvalidReasonsForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns whether the given context is targeted. (Allows child classes to add unique targeting conditions)",
				"name" : "IsContextTargeted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current target selected (should always be a CcoTeleportationNetworkNodeRecord)",
				"name" : "CurrentTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacter with the interacting character",
				"name" : "SourceCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Sets the target to the context passed in if valid",
				"name" : "SetTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Enables or disables the targetting depending on the bool passed in",
				"name" : "EnableTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles the targetting from active/inactive",
				"name" : "ToggleTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Clears the current target",
				"name" : "ClearTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the passed in target is valid",
				"name" : "IsValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignCharacterTeleportationSystem" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for character teleportation logic",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterTeleportationSystem",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoTeleportationNetworkNodeRecord"
					}
				],
				"doc" : "Teleports the character to the passed in node",
				"name" : "TeleportToNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Closes the teleportation node that the character is interacting with",
				"name" : "CloseTeleportationNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoTeleportationNetworkNodeRecord"
					}
				],
				"doc" : "Closes true if the character can teleport to the passed in node",
				"name" : "CanTeleportToNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the character can close the node that it's currently interacting with",
				"name" : "CanCloseTeleportationNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoTeleportationNetworkNodeRecord with the node that the character is currently traveling to, if any",
				"name" : "TravelingToNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTeleportationNetworkNodeRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoTeleportationNetworkNodeRecord with the node that the character is currently interacting with, if any",
				"name" : "InteractingNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTeleportationNetworkNodeRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignResourceTransaction with how much it costs for the character to close the node",
				"name" : "ClosureCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoTeleportationNodeTemplateRecord"
					}
				],
				"doc" : "Returns a CcoCampaignResourceTransaction with much it costs for the character to teleport to the specified node",
				"name" : "TeleportationCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacterTeleportationInteraction that manages targetting the nodes on the 3d map",
				"name" : "TeleportationInteractionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterTeleportationInteraction"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacter with the character context",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns true if the character can teleport (some charcter can only close nodes)",
				"name" : "CanCharacterTeleport",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoTeleportationNodeTemplateRecord"
					}
				],
				"doc" : "Teleports the character to a random node with the template passed in",
				"name" : "TeleportToRandomNodeInTemplate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignCharacterTrainingGroup" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign training group",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterTrainingGroup",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the faction context of the group",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the cost of training a character",
				"name" : "TreasuryCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Selects dilemma choice for specified slot index and dilemma choice index",
				"name" : "SelectDilemmaChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Starts character training in next available slot",
				"name" : "StartCharacterTraining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the localised name of the group",
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if character training can be started",
				"name" : "CanStartCharacterTraining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a string with the initial portrait path",
				"name" : "InitialPortraitPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns an int with the maximum slots in the group",
				"name" : "MaximumSlotCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list with all the training slots in this group, including dummy ones for locked slots",
				"name" : "TrainingSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterTrainingSlot"
				}
			}
		]
	},
	"CcoCampaignCharacterTrainingSlot" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign training slot",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCharacterTrainingSlot",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the slot is locked",
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the remaining duration of the slot",
				"name" : "RemainingDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the active dilemma, if any",
				"name" : "ActiveDilemmaContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCharacterTrainingDilemmaRecord"
				}
			},
			
			{
				"doc" : "Returns the name of the character from the slot",
				"name" : "CharacterName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list with possible abilities for this slot",
				"name" : "PossibleAbilityGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			},
			
			{
				"doc" : "Returns true if this slot is purchasable",
				"name" : "IsPurchaseButtonActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a string with the character portrait path",
				"name" : "CharacterPortrait",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with the chosen traits",
				"name" : "TraitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterTraitLevelRecord"
				}
			},
			
			{
				"doc" : "Returns all possible associated agent subtype agent pair context",
				"name" : "AgentSubtypeAgentPairContextList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeAgentPair"
				}
			},
			
			{
				"doc" : "Returns the selected agent subtype agent pair context",
				"name" : "AgentSubtypeAgentPairContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeAgentPair"
				}
			},
			
			{
				"doc" : "Returns the selected agent subtype context",
				"name" : "AgentSubTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"doc" : "Returns the selected agent context",
				"name" : "AgentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"doc" : "Returns the index of the slot in the training group that it's part of",
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the slot is active",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignConstructionItem" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignConstructionItem",
		"symbols" : 
		[
			
			{
				"name" : "TotalConstructionTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TurnConstructionStarted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TurnsUnderConstruction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TurnsToCompletion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsPaused",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ClockAnimationState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsDamaged",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UpkeepCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LongDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ShortDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Type",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DevPointCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BuildingCultureVariantRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BuildingLevelRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsConversion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PercentComplete",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignCorruptionCounter" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a corruption counter",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCorruptionCounter",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the total amount of corruption from all the corruption types in this counter",
				"name" : "Amount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of all intervals for this counter",
				"name" : "IntervalList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCorruptionCounterIntervalRecord"
				}
			},
			
			{
				"doc" : "Returns a list of intervals that are currently active",
				"name" : "ActiveIntervalList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCorruptionCounterIntervalRecord"
				}
			},
			
			{
				"doc" : "Returns the max corruption for this counter",
				"name" : "Max",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignCursorContext" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for EMPIRECAMPAIGN::CURSOR_OVER_CONTEXT, so can get context information about current 3d mouseover",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignCursorContext",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the current cursor_record key of the cursor being used",
				"name" : "CurrentCursorKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns logical position on map currently mousing over as a string",
				"name" : "LogicalPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"doc" : "Returns the faction currently mousing over",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the settlement currently mousing over",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns the character currently mousing over",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			}
		]
	},
	"CcoCampaignDecisionChoiceRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignDecisionChoiceRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DecisionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PayloadCharacterTraitList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Label",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignDecisionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignDecisionRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Image",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChoiceList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignDiplomacyManager" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for the campaign diplomacy manager, so we can get pending negotiations for MPC sim turns, etc. Not meant as a full replacement for diplomacy since we dont have resource to rewrite diplomacy to cco in wh3!",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignDiplomacyManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Opens up negotiation in diplomacy to accept/counter/modify if there is one",
				"name" : "OpenNegotiation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a CcoCampaignNegotiaton for the given proposing faction if there is one",
				"name" : "NegotiationForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignNegotiation"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignNegotiaton which were sent by the player and are awaiting on responses from other players (only in mpc sim turns)",
				"name" : "SentNegotiationList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignNegotiation"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignNegotiaton which are pending for the player (only in mpc sim turns)",
				"name" : "PendingNegotiationList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignNegotiation"
				}
			}
		]
	},
	"CcoCampaignDiplomacyManipulationInfo" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a diplomacy manipulation info",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignDiplomacyManipulationInfo",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the localised name of the manipulation info",
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the icon path of the manipulation info",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the category of the manipulation info",
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of the diplomacy interaction of this info",
				"name" : "DiplomacyManipulationInteractionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignDiplomacyManipulationInteraction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "Performs the manipulation on targets passed in",
				"name" : "PerformManipulation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the faction that owns this diplomacy manipulation info",
				"name" : "OwnerFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "Returns the cost for performing the manipulation, taking into account the specified source and objective",
				"name" : "ResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns the remaining cooldown of the manipulation info",
				"name" : "RemainingCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the the total cooldown time of the manipulation info",
				"name" : "CooldownTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the description of the manipulation info",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignDiplomacyManipulationInteraction" : 
	{
		"area" : "Campaign",
		"doc" : "Class that manages targetting interface interaction for a manipulation info",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignDiplomacyManipulationInteraction",
		"symbols" : 
		[
			
			{
				"doc" : "Zooms to the current settlement target, if this exists.",
				"name" : "ZoomToTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of source factions that have at least 1 valid objective faction to target",
				"name" : "ValidSourceFactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the passed in object is valid. Can also be used for checking source/objective factions",
				"name" : "IsValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a list with valid objective factions based on the selected source faction",
				"name" : "ValidObjectiveFactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if this is the current targetting interface",
				"name" : "IsTargettingActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns reasons why a target cannot be set. Returns empty if object is valid. This can be used for a settlement or for source/objective faction",
				"name" : "InvalidReasonsForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a tooltip with reason why cannot perform the manipulation with current setup, or returns specific text if can perform",
				"name" : "ActionPerformTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the context of the diplomacy manipulation info associated with this class",
				"name" : "DiplomacyManipulationInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignDiplomacyManipulationInfo"
				}
			},
			
			{
				"doc" : "Returns the cost for the manipulation with the current setup",
				"name" : "ActionCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns the context of the objective faction stored, if any",
				"name" : "ObjectiveFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if the manipulation can be performed with the current source faction, objective faction and settlement (if the settlement is needed)",
				"name" : "CanPerformAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the source faction stored, if any",
				"name" : "SourceFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Sets the default target selection mode using the current category",
				"name" : "SetDefaultTargetSelectionMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Gets the active target selection mode as a string. May return: 'force', 'region', 'force_or_region', 'source_faction' or 'objective_faction'",
				"name" : "GetTargetSelectionModeString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns whether the given context is targeted. (Allows child classes to add unique targeting conditions)",
				"name" : "IsContextTargeted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the manipulation is blocked by active pending battle",
				"name" : "IsActionBlockedByPendingBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Informs the targeter of which mode of selection it should be doing. Valid arguments are as follows: 'force', 'region', 'force_or_region', 'source_faction' & 'objective_faction'",
				"name" : "SetTargetSelectionMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "This will only return if the manipulation type is TRANSFER_SETTLEMENT and we have a settlement target stored. Else returns nul",
				"name" : "CurrentTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns true if the manipulation hasn't been unlocked yet",
				"name" : "IsActionLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Performs the manipulation with the current source, objective and settlement target, if it can",
				"name" : "PerformAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Does the initial setup of the factions without notifying.",
				"name" : "SetupInitialTargetFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Sets the objective faction for this manipulation",
				"name" : "SetObjectiveFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Updates the faction with the current targetting interface faction. This is so all targetting interfaces are in sync",
				"name" : "UpdateTargetFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Sets the source faction for this manipulation",
				"name" : "SetSourceFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Sets the settlement target or the source/objective faction. Which faction will be set is determined by the m_setting_source flag",
				"name" : "SetTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if we should display the faction dropdown in the changing of the way panel",
				"name" : "ShouldDisplayFactionDropdown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the average relations between source and objective factions",
				"name" : "AverageAttitide",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Clears the settlement target is this exists",
				"name" : "ClearTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles the targetting system through the CampaignTargettingInterface.",
				"name" : "ToggleTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the average corruption between the source and objective factions",
				"name" : "AverageCorruption",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Is passed true, enables this as the targetting interface, else disables it.",
				"name" : "EnableTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if objective/second faction is needed for the manuipulation type",
				"name" : "UsesObjectiveFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignEffectGroup" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEffectGroup",
		"symbols" : 
		[
			
			{
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEffectListRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEffectListRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Effects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEffectScopeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEffectScopeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignElectorSeat" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignElectorSeat",
		"symbols" : 
		[
			
			{
				"name" : "IsOwnedByHumanFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanBeRemovedFromSeat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ElectorCountRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ProvinceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LoyaltyPooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxLoyalty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SeatHolderFactionLoyalty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SeatHolderFactionHasLoyalty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAbandonedRegion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsOwnedByNonHumanFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsOwnedByPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ShouldShowElectorCountTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventAgentTargetsCharacter" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventAgentTargetsCharacter",
		"symbols" : 
		[
			
			{
				"name" : "ActionResultContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsReferingToPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DiplomaticStateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventAgentTargetsSettlement" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventAgentTargetsSettlement",
		"symbols" : 
		[
			
			{
				"name" : "IsReferingToPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DiplomaticStateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActionResultContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventAncillaryOrTrait" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventAncillaryOrTrait",
		"symbols" : 
		[
			
			{
				"name" : "Character",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Stolen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Lost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Faction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TraitLevelValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TraitChainList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TraitLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Trait",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AncillaryRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventArmoryItem" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for a campaign ARMORY_ITEM custom layout event",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignEventArmoryItem",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this event has a zoom location",
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Zooms to the event location",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a CcoArmoryItemRecord with the item that was gained",
				"name" : "ArmoryItemContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoArmoryItemRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacter with the character that the item is available for",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			}
		]
	},
	"CcoCampaignEventBattleResult" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventBattleResult",
		"symbols" : 
		[
			
			{
				"name" : "AttackingCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayersBattleResult",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DefendingBattleResult",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AttackingBattleResult",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DefendingFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AttackingFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DefendingCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventBuildingConstructed" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventBuildingConstructed",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a CcoCampaignBuildingVariant with the building variant data",
				"name" : "Building",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingVariant"
				}
			}
		]
	},
	"CcoCampaignEventDilemma" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for an event dilemma",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignEventDilemma",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a CcoCampaignFaction with the primary faction target for the dilemma",
				"name" : "PrimaryTargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the key of the choice that has been made for this dilemma, empty if no choice made yet",
				"name" : "ChoiceKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the passed in choice key is active/should be displayed",
				"name" : "IsChoiceActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the second faction pooled resource with the resource key passed in",
				"name" : "SecondTargetFactionPooledResource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the category of the dilemma",
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the number of choices for this dilemma",
				"name" : "NumberOfChoices",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the first faction pooled resource with the resource key passed in",
				"name" : "FirstTargetFactionPooledResource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the event category of the dilemma",
				"name" : "EventCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of choice details for this dilemma",
				"name" : "ChoiceDetailList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCdirEventsDilemmaChoiceDetailRecord"
				}
			},
			
			{
				"doc" : "Returns the character region target name (Used for database text)",
				"name" : "RegionTargetName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the context of the payload for the choice key passed in",
				"name" : "PayloadOfChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadInfo"
				}
			},
			
			{
				"doc" : "Returns the character first faction target name with icon (Used for database text)",
				"name" : "SecondTargetFactionNameWithIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the treasure hunt context if this dilemma is a treasure hunt",
				"name" : "AdditionalTreasureHuntContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTreasureHuntExtraInformationRecord"
				}
			},
			
			{
				"doc" : "Returns the character second faction target name (Used for database text)",
				"name" : "SecondTargetFactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the character first faction target name with icon (Used for database text)",
				"name" : "FirstTargetFactionNameWithIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the character first faction target name (Used for database text)",
				"name" : "FirstTargetFactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the character target name (Used for database text)",
				"name" : "CharacterTargetName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the delay of VO",
				"name" : "CampaignVODelay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the actor group of VO",
				"name" : "CampaignVOActorGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the secondary force target",
				"name" : "SecondaryTargetMilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns the event name of VO",
				"name" : "CampaignVOEventName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the primary force target",
				"name" : "PrimaryTargetMilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Zooms to the dilemma",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the primary settlement target",
				"name" : "PrimaryTargetSettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns the secondary character target",
				"name" : "SecondaryTargetCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Calls a command to choose the passed in choice",
				"name" : "MakeChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the dilemma has a zoom location",
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the primary character target",
				"name" : "PrimaryTargetCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Retuns true if a choice has been made",
				"name" : "HasMadeChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the dilemma record",
				"name" : "DilemmaContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoDilemmaRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the choice with the key passed in is possible to be chosen",
				"name" : "CanMakeChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the description of the dilemma",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignEventDiplomacy" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventDiplomacy",
		"symbols" : 
		[
			
			{
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EventType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EventIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsTreatyBroken",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SecondFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FirstFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventFaction" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFaction",
		"symbols" : 
		[
			
			{
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DiplomaticStateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SecondFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FirstFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventFeed" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for the event feed",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeed",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoEventFeedCategoryRecord"
					}
				],
				"doc" : "Returns whether this category of events is allowed to instant open",
				"name" : "CanCategoryInstantOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoEventFeedCategoryRecord"
					}
				],
				"doc" : "Toggles the passed in category as being or not being allowed to instant open",
				"name" : "ToggleCategoryInstantOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the next auto open event if any",
				"name" : "NextAutoOpenEventContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEventFeedMessageDetails"
				}
			},
			
			{
				"doc" : "Returns a list of event groups",
				"name" : "EventGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignEventFeedGroup"
				}
			}
		]
	},
	"CcoCampaignEventFeedCustomMission" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for an event mission",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedCustomMission",
		"symbols" : 
		[
			
			{
				"doc" : "Zooms to the location of the mission",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the misison has a zoom location",
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignMission with the mission context",
				"name" : "MissionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMission"
				}
			},
			
			{
				"doc" : "Returns the description of the mission",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the subtitle of the mission",
				"name" : "Subtitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the title of the mission",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignEventFeedFilter" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedFilter",
		"symbols" : 
		[
			
			{
				"name" : "InclusionState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsCategoryIncluded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventFeedGroup" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedGroup",
		"symbols" : 
		[
			
			{
				"name" : "ShouldAutoExpand",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EventList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventFeedMessageDetails" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedMessageDetails",
		"symbols" : 
		[
			
			{
				"name" : "MissionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEventFeedCustomMission"
				}
			},
			
			{
				"doc" : "Returns true if the event uses revealing text (currently only used for incidents)",
				"name" : "UseRevealingText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "CustomContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns true if the incident has a sepia fade multiplier",
				"name" : "HasSepiaFade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the sepia fade multiplier, used for story panels to fade out a few seconds of at the end of the movie",
				"name" : "SepiaFadeMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "FullFlavourText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if we are an incident and event image is over default event size (current 800x450) as we use a different incident layout for these, originally for story panel on wh3",
				"name" : "IsLargeIncident",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "FlavourText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if event image is over default event size (current 800x450) as we use different component set for larger images for these important events for things like stories in wh3",
				"name" : "IsUsingLargeImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "SecondaryDetail",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "PrimaryDetail",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ShouldReposition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "EventSound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "MoviePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RequiresResponse",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "SecondaryDetailsWithTags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Layout",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "PrimaryDetailsWithTags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "MarkAsRead",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsRead",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "EventType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignEventFeedOpenEvent" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignEventFeedOpenEvent",
		"symbols" : 
		[
			
			{
				"name" : "EventContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEventFeedMessageDetails"
				}
			},
			
			{
				"name" : "ShouldReposition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IconContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoCampaignEventFeedRecords" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedRecords",
		"symbols" : 
		[
			
			{
				"name" : "RoundsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EndYear",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "StartYear",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "YearContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "YearList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventFeedRound" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedRound",
		"symbols" : 
		[
			
			{
				"name" : "IsEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RoundTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SummaryList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventFeedSummary" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedSummary",
		"symbols" : 
		[
			
			{
				"name" : "EventList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FirstEventContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MarkAsRead",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsRead",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TotalEvents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventFeedYear" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventFeedYear",
		"symbols" : 
		[
			
			{
				"name" : "ProvinceList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CharacterList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RoundsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventHostileAction" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventHostileAction",
		"symbols" : 
		[
			
			{
				"name" : "DiplomaticStateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActingFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActingCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsReferingToPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventIncident" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for a campaign incident",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignEventIncident",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this incident can be zoomed to",
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignPayloadInfo with the payload of this incident",
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadInfo"
				}
			},
			
			{
				"doc" : "Returns the delay of VO",
				"name" : "CampaignVODelay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a CcoIncidentRecord with the record of this incident",
				"name" : "Incident",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoIncidentRecord"
				}
			},
			
			{
				"doc" : "Returns the actor group of VO",
				"name" : "CampaignVOActorGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the event name of VO",
				"name" : "CampaignVOEventName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Zooms to the incident location",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignFaction with the primary faction target",
				"name" : "PrimaryTargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignMilitaryForce with the primary force target",
				"name" : "PrimaryTargetMilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignSettlement with the primary settlement target",
				"name" : "PrimaryTargetSettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacter with the primary character target",
				"name" : "PrimaryTargetCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns an it with the enum index of the event category passed in",
				"name" : "EventCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the blood overlay needs to be shown for this incident",
				"name" : "IsBloodEvent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the name of the faction of the second target",
				"name" : "SecondTargetFactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the second target",
				"name" : "SecondTargetName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the faction of the first target",
				"name" : "FirstTargetFactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the first target",
				"name" : "FirstTargetName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the description of the incident",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignEventMercenaryUnitUnlock" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventMercenaryUnitUnlock",
		"symbols" : 
		[
			
			{
				"name" : "Unit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventTechnologyResearched" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventTechnologyResearched",
		"symbols" : 
		[
			
			{
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Faction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NextTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResearchedTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventTrainingDilemmaAvailable" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for a campaign TRAINING_DILEMMA_AVAILABLE custom layout event",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignEventTrainingDilemmaAvailable",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this event has a zoom location",
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Zooms to the event location",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventUnitRecruitment" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventUnitRecruitment",
		"symbols" : 
		[
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Agent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Unit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignEventWindsOfMagic" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignEventWindsOfMagic"
	},
	"CcoCampaignFaction" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign faction",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFaction",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the list of faction interactions with all factions have interactions setup with (for things like waagh)",
				"name" : "FactionInteractionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFactionInteraction"
				}
			},
			
			{
				"doc" : "Returns a localised string with the attitude towards the player (friendly, hostile etc)",
				"name" : "AttitudeTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns if the faction is vassal of the player",
				"name" : "IsVassalOfPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current technology being researched",
				"name" : "CurrentTechContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the number of ancillaries that can be equipped into this category per category for a (optionally provided) faction, e.g. 3 for runes",
				"name" : "NumAncillariesAllowedPerCharacterForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Adjusts the diplomatic relations with the given faction. A tad dodgy, factors added are permanent. Value has to be in the range -6 to 6",
				"name" : "DevAdjustRelationsWith",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"doc" : "Returns the current treasury amount of this faction",
				"name" : "TreasuryAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the network player that is controlling this faction (humans steam info)",
				"name" : "NetworkPlayerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns true if this faction has been killed",
				"name" : "IsDead",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of the missions currently pinned for this faction",
				"name" : "PinnedMissionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMission"
				}
			},
			
			{
				"doc" : "Returns the total upkeep cost of all this faction's armies",
				"name" : "TotalArmyUpkeep",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if faction can capture territory (so not a horde faction)",
				"name" : "CanCaptureTerritory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoSubcultureRecord for this faction",
				"name" : "SubcultureContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSubcultureRecord"
				}
			},
			
			{
				"doc" : "Returns a list of provinces this faction has a stake in",
				"name" : "ProvinceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"doc" : "Returns the amount of income per turn this faction is earning",
				"name" : "Income",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction CcoCampaignFactionWarContracts context",
				"name" : "FactionWarContracts",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionWarContracts"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns name of faction with faction flag as image tag next to it",
				"name" : "NameWithIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns list of current active missions for this faction",
				"name" : "MissionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMission"
				}
			},
			
			{
				"doc" : "Returns the current number of slaves the faction has",
				"name" : "SlavesAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if faction has a valid position",
				"name" : "HasValidPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns how many tech research points this faction has left from the last research requiring less points than those generated in a turn",
				"name" : "TechnologyResearchPointSurplus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCultureRecord for this faction",
				"name" : "CultureContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCultureRecord"
				}
			},
			
			{
				"doc" : "Returns true if this player has ended turn in simultaneous turns, and is just waiting for rest of players in their group to end turn before the turn is actually ended",
				"name" : "IsFactionReadyToEndTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of settlements owned by this faction",
				"name" : "SettlementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns the faction CcoCampaignFactionCaravans context if this faction can use the caravans system",
				"name" : "FactionCaravansContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionCaravans"
				}
			},
			
			{
				"doc" : "Returns true if faction has an active battle or pending action, used to report that a player is blocking gameplay in simultaneous turns",
				"name" : "HasPendingAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of enemies that this faction has",
				"name" : "EnemiesCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignModelFaction for this faction",
				"name" : "ModelFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelFaction"
				}
			},
			
			{
				"doc" : "Returns true if it is currently this factions turn",
				"name" : "IsFactionsTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns name of faction",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the list of all pooled resources for the faction",
				"name" : "PooledResourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the faction CcoCampaignFactionInteraction context with supplied target faction (for things like war coordination, loan armies, etc)",
				"name" : "FactionInteractionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionInteraction"
				}
			},
			
			{
				"doc" : "Returns a TreeCallback with all the ui groups that exists for the technologies in this faction(if any)",
				"name" : "TechnologyUiGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyUiGroupRecord"
				}
			},
			
			{
				"doc" : "Returns how many tech research points this faction has",
				"name" : "TechnologyResearchPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of allies that this faction has",
				"name" : "AlliesCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the list of climates that are applicable to this faction based on the supplied suitability key",
				"name" : "ClimatesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSettlementClimateTypeRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoFactionRecord for this faction",
				"name" : "FactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"doc" : "Returns true if this is the players faction",
				"name" : "IsPlayersFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if can send faction a trespass warning (if cooldown expired since last did this or havent done yet)",
				"name" : "CanIssueTrespassWarning",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the faction's prison system",
				"name" : "PrisonSystem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPrisonSystem"
				}
			},
			
			{
				"doc" : "Returns the colour based on alliance to local player (as in colour based on player/ally/enemy/neutral)",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns the number of active missions if no args, or number of active mission matching any of the mission category strings passed in",
				"name" : "ActiveMissionCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns true if specified amount of slaves are available",
				"name" : "HasEnoughSlaves",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Enables all ancillaries for character",
				"name" : "DevAddAllAncillaries",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoTechnologyUiTabRecord"
					}
				],
				"doc" : "Returns a TreeCallback with all the technologies for this faction",
				"name" : "TechnologyTree",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "TreeData"
				}
			},
			
			{
				"doc" : "Returns true if faction has a trade agreement with the player",
				"name" : "HasTradeAgreement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the faction's cooking system",
				"name" : "CookingSystem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCookingSystem"
				}
			},
			
			{
				"doc" : "Returns the primary colour for this faction",
				"name" : "PrimaryColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns a list of all the factions that this faction is at war with",
				"name" : "EnemyFactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns list of CcoPair<CcoCampaignMilitaryForce attacker, target> which is a list of the factions forces and their current targets (settlement/character/force) designated by the AI",
				"name" : "AIMilitaryTargetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoAgentRecord"
					}
				],
				"doc" : "Returns unit cap modifier for provided agent record for this faction",
				"name" : "UnitCapForAgent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the players faction currently has negative funds",
				"name" : "IsBankrupt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignResourceTransaction"
					}
				],
				"doc" : "Returns the amount of gained resource when salvaging ancillaries",
				"name" : "AncillarySalvageGain",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns an active mission context for the given key if it exists on the mission manager",
				"name" : "ActiveMissionForKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMission"
				}
			},
			
			{
				"doc" : "Toggles whether faction played by human or AI",
				"name" : "DevToggleHuman",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"doc" : "Returns a list of all the factions this faction knows (that it can see in diplomacy basically)",
				"name" : "FactionsKnownList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoMainUnitRecord"
					}
				],
				"doc" : "Returns unit cap for provided main unit record for this faction",
				"name" : "UnitCapForUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the pooled resource manager which manages all responsibility for pooled resources on a faction",
				"name" : "PooledResourceManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceManager"
				}
			},
			
			{
				"doc" : "Returns list of the diplomacy manipulation infos, if the faction has any.",
				"name" : "DiplomacyManipulationInfoList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignDiplomacyManipulationInfo"
				}
			},
			
			{
				"doc" : "Returns trade state with players faction",
				"name" : "TradeState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if faction is an ally of the player",
				"name" : "IsDefensiveAlly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the appropriate tooltip text for salvaging ancillaries based on the subculture",
				"name" : "AncillarySalvageTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the context of the faction mercenary pool",
				"name" : "MercenaryPoolContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionMercenaryPool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the specified campaign feature key is available for this faction",
				"name" : "IsCampaignFeatureAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Researches all techs for the faction instantly",
				"name" : "DevEnableAllTech",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"doc" : "Returns the alliance state with the players faction",
				"name" : "AllianceState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the faction governorship context, manager responsible for all governor functionality",
				"name" : "FactionGovernorshipContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionGovernorship"
				}
			},
			
			{
				"doc" : "Returns list of all ancillaries in the faction ancillary pool, plus any assigned ones on the characters from this faction.",
				"name" : "AncillaryList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignAncillary"
				}
			},
			
			{
				"doc" : "Returns true if faction is a defensive ally of the player",
				"name" : "IsAlly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns how many turns until can issue trespass warning again (cooldown)",
				"name" : "TrespassWarningCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current CcoShapeshiftForm equipped to a faction",
				"name" : "EquippedShapeshiftFormContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoShapeshiftForm"
				}
			},
			
			{
				"doc" : "Returns list of effect bundles currently active on the faction from various sources, without any filtering (so includes those that dont show in the UI)",
				"name" : "EffectBundleUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the faction position, depending on if the current campaign is the prologue",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns list of pending missions that are available to opt in to (contracts)",
				"name" : "PendingMissionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMission"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the specified CcoCampaignRitual for a faction given a ritual key",
				"name" : "RitualContextForKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns directory for faction flag icons - append image name including extension for use in setting images",
				"name" : "FactionFlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the specified faction feature key is available for this faction",
				"name" : "IsFactionFeatureAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the rank amongst all current active factions in terms of strength",
				"name" : "StrengthRank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Salvages all the ancillaries passed into the context list",
				"name" : "SalvageAncillaries",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of effect bundles currently active on the faction from various sources, pre-filtered to only include those that should show in the UI",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the context of the faction ritual manager if the faction has one",
				"name" : "RitualManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitualManager"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoAgentSubtypeRecord"
					}
				],
				"doc" : "Returns the count of the agent subtype for this faction",
				"name" : "AgentSubtypeCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if faction is an enemy of the player",
				"name" : "IsEnemy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns the list of rituals not yet unlocked for a faction. Deprecated, please use the ritual manager instead",
				"name" : "UnlockableRitualList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns the parent faction (for waagh factions)",
				"name" : "ParentFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the strength value used to evaluate a factions strength rank amongst all factions",
				"name" : "StrengthValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if a specified effect key is present on a faction",
				"name" : "IsEffectPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Accepts the specified pending mission (contract)",
				"name" : "AcceptPendingMission",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of all technologies linked to this faction (regardless of state)",
				"name" : "TechnologyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"doc" : "Unlocks all shapeshift forms for this faction",
				"name" : "DevUnlockAllShapeshiftForms",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"doc" : "Returns the context of the faction technology manager if the faction has one",
				"name" : "TechnologyManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnologyManager"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoAgentSubtypeRecord"
					}
				],
				"doc" : "Returns the cap for the agent subtype for this faction",
				"name" : "AgentSubtypeCap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if can use mortuary cults functionality (tomb kings usually use this on warhammer)",
				"name" : "CanUseMortuaryCults",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns child faction (for waagh parents)",
				"name" : "ChildFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the index of this faction in the end turn process (which turn is theirs)",
				"name" : "TurnIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Renames the faction to the given name, opens a text prompt to do so)",
				"name" : "Rename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the list of all military forces in the faction",
				"name" : "MilitaryForceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns the context of the corruption counter for this faction if it exists",
				"name" : "CorruptionCounterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCorruptionCounter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the list of spawned forces that can be respawned",
				"name" : "RespawnableForces",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns the list of available rituals for a faction (alreay unlocked). Deprecated, please use the ritual manager instead",
				"name" : "AvailableRitualList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns true if faction is a rebel faction",
				"name" : "IsRebelFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this faction is not currently researching a tech but has the ability to do so (reminder for end turn)",
				"name" : "IsTechSelectNeeded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns faction flag rotated icon path - prefer to use FactionFlagDir instead",
				"name" : "FactionFlagRotated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the auto management budget to use the percentage passed in of the faction's treasury",
				"name" : "SetAutoManagementBudgetPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this faction can currently perform rituals",
				"name" : "CanPerformRituals",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the cost to spawn a conditionally spawnable force",
				"name" : "SpawnForceCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Allows to step into code to fully inspec model side FACTION object",
				"name" : "BreakForDebugging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the command queue index for the faction",
				"name" : "CQI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Starts negotiation with this faction",
				"name" : "OpenDiplomacyWith",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the specified CcoCampaignPooledResource given a pooled resource key if it exists",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns true if this faction is currently researching a tech",
				"name" : "IsResearchingTech",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of active training group dilemmas",
				"name" : "CharacterTrainingActiveDilemmaList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterTrainingDilemmaRecord"
				}
			},
			
			{
				"doc" : "Returns the plague system of the faction if it exists",
				"name" : "PlaguesCompositionSystemContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlaguesCompositionSystem"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns faction flag large icon path - prefer to use FactionFlagDir instead",
				"name" : "FactionFlagLarge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the list of all controllable military forces (non-caravan & non-garrison) in the faction",
				"name" : "ControllableMilitaryForceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns the total amount of food the faction has",
				"name" : "FoodTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the settlement cap for a faction. ( 0 if they dont have)",
				"name" : "SettlementCap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignSettlement of the factions capital (home region)",
				"name" : "CapitalSettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns the attitude category with the players faction (hostile->friendly)",
				"name" : "AttitudeCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the percentage of the faction's treasury that's being used for auto managing provinces/characters",
				"name" : "AutoManagementBudgetPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the list of character training groups",
				"name" : "CharacterTrainingGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterTrainingGroup"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Vector4"
					}
				],
				"doc" : "Zooms to the faction, tries capital first, then faction leader, then first character on map. Can optionally provide an offset for the zoom.",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the faction CcoDiplomacyThreatLevel for the faction this faction considers its main threat (only for AI, returns null for human players)",
				"name" : "MainRivalDiplomaticThreatLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoDiplomacyThreatLevel"
				}
			},
			
			{
				"doc" : "Returns faction flag icon path - prefer to use FactionFlagDir instead",
				"name" : "FactionIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the specified faction is the same as this one",
				"name" : "IsSameFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Adds an amount of pooled resource with the given factor",
				"name" : "AddPooledResource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the list of all characters in the faction",
				"name" : "CharacterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the total number of military forces that are contributing to the factions upkeep increase",
				"name" : "NumMilitaryForcesContributingToUpkeepIncreaseTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns if the faction was confederated by another faction",
				"name" : "WasConfederated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of available initiative sets",
				"name" : "InitiativeSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiativeSet"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns faction flag medium icon path - prefer to use FactionFlagDir instead",
				"name" : "FactionFlagMedium",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the faction CcoDiplomacyThreatLevel for this faction, if AI we show the threat of the player to the AI, if for the player we show the general threat the AI perceives",
				"name" : "DiplomaticThreatLevelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoDiplomacyThreatLevel"
				}
			},
			
			{
				"doc" : "Returns true if this faction used to be controlled by human but the player has disconnected from the game",
				"name" : "IsIdleHuman",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignCharacter of the factions current leader",
				"name" : "FactionLeaderContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Sends a warning to specified faction from this faction to warn to get off land, otherwise will face diplomatic penalties (get off my land feature on wh3)",
				"name" : "IssueTrespassWarning",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns faction flag small icon path - prefer to use FactionFlagDir instead",
				"name" : "FactionFlagSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the list of active missions",
				"name" : "ActiveMissionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMission"
				}
			},
			
			{
				"doc" : "Returns the faction CcoCampaignFactionWomCompass context if this faction can use the winds of magic compass feature",
				"name" : "FactionWomCompassContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionWomCompass"
				}
			},
			
			{
				"doc" : "Returns true if this faction is currently under human control",
				"name" : "IsHuman",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the factions 'level' which determines things like how many armies can field, etc",
				"name" : "FactionLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of provinces this faction has discovered",
				"name" : "DiscoveredProvinceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			}
		]
	},
	"CcoCampaignFactionAlliedBuildings" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a player faction and an ally faction, used to interact with outposts.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionAlliedBuildings",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Moves the current outpost to the settlement specified",
				"name" : "MoveToSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the ally faction in whose regions the player faction can construct outposts ",
				"name" : "AllyFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the context of the faction that interacts with the outposts.",
				"name" : "PlayerFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Constructs an outpost in the passed in settlement",
				"name" : "ConstructInSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list with settlements owned by the ally faction, in which an outpost can be constructed",
				"name" : "AllyPermittedSettlementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns the amount of time it will take to construct the outpost in this settlement.",
				"name" : "ConstructInSettlementTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns the cost of constructing the outpost in this settlement.",
				"name" : "ConstructInSettlementCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns true if can construct the outpost in this settlement",
				"name" : "CanConstructInSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the long distance threshold, used for displaying the correct shared enemy distance state",
				"name" : "LongDistanceThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the middle distance threshold, used for displaying the correct shared enemy distance state",
				"name" : "MiddleDistanceThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns the distance between the closest enemy from the allied settlement specified. Returns 0 if the 2 factions have no shared enemies",
				"name" : "SharedEnemyDistanceFromSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns the amount it will cost to move the slot to this settlement",
				"name" : "MoveToSettlementCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns true if the slot can be moved to the passed in settlement",
				"name" : "CanMoveToSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns a list with units that could be recruited if an outpost is built in the passed in settlement",
				"name" : "RecruitableUnitsForSettlementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Removes the outpost from the settlement where it's constructed",
				"name" : "RemoveAlliedBuilding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the settlement where an outpost is built, if any",
				"name" : "AlliedSettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			}
		]
	},
	"CcoCampaignFactionCaravans" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign FACTION_CARAVANS struct",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionCaravans",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoPair with the first entry as CcoCampaignCharacter and second as an int with the cost of recruiting the character as a caravan master",
				"name" : "CaravanMasterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCaravanRecruitmentItem"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignCaravan with all the caravans that are idle",
				"name" : "IdleCaravanList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCaravan"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignCaravan with all active caravans",
				"name" : "ActiveCaravanList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCaravan"
				}
			},
			
			{
				"doc" : "Returns the faction context of this class",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns true if can recruit the passed in character as a caravan master",
				"name" : "CanRecruitCaravanMaster",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCaravan"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCaravanContractRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a localised tooltip with the reason why the caravan cannot be dispatched",
				"name" : "TooltipForCaravan",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a VECTOR_4 with a position where the camera should zoom when first opening the panel",
				"name" : "InitialZoomPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Recruits a caravan with the caravan master passed in",
				"name" : "RecruitCaravan",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCaravan"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCaravanContractRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Starts the caravan with the amount of cargo passed in",
				"name" : "StartCaravan",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns an int with the maximum number of caravans that a faction can have active at the same time",
				"name" : "MaximumCaravans",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignRouteNode with all the route nodes that can be used by this faction",
				"name" : "NodeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			}
		]
	},
	"CcoCampaignFactionCheatSheetEntryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a Campaign UI Cheatsheet Item Record. Used for individual entries used in creating cheat sheet layouts",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionCheatSheetEntryRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Specifies the priority which this item will be listed in the current column. Lower = Higher up the list",
				"name" : "PriorityIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "DescriptionText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "HeaderText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignFactionGovernorship" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionGovernorship",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns the province governorship that contains the passed in governor, if any",
				"name" : "ProvinceGovernashipFromGovernor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvinceGovernorship"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					}
				],
				"doc" : "Moves a governor from one province to another",
				"name" : "MoveProvinceGovernor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignDecisionChoiceRecord"
					}
				],
				"doc" : "Select dilemma choice for the passed in governor",
				"name" : "SelectProvinceDecisionChoice",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Establishes a new governorship with the province and governor passed in",
				"name" : "EstablishProvinceGovernorship",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of all province governorships that have been already established",
				"name" : "ProvinceGovernorshipList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignProvinceGovernorship"
				}
			},
			
			{
				"doc" : "Returns a list with all governors that can be used to establish new governorships",
				"name" : "GovernorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns a list with all provinces that the faction can use to establish governorship",
				"name" : "ProvinceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignProvinceGovernorship with the closest governorship that has a pending decision, if no governorship has decisions then returns null",
				"name" : "ClosestPendingDecisionGovernorshipContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvinceGovernorship"
				}
			},
			
			{
				"doc" : "Selects the first valid governorship targetting interface, if any",
				"name" : "SelectFirstValidTargettingInterface",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of unassigned governors",
				"name" : "UnassignedGovernorsCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the maximum number of governors that can be present",
				"name" : "MaximumGovernorCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					}
				],
				"doc" : "Returns the province governorship that contains the passed in province, if any",
				"name" : "ProvinceGovernashipFromProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvinceGovernorship"
				}
			}
		]
	},
	"CcoCampaignFactionInteraction" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for two factions interacting with each other, for the war coordination system  (kind of a mirror to FACTION_INTERACTIONS_ENV).",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionInteraction",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns whether the given context is targeted. (Allows child classes to add unique targeting conditions)",
				"name" : "IsContextTargeted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of military forces loaned from the target to the source faction",
				"name" : "MilitaryForcesLoanedList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Toggles targetting mode on/off to pick a target",
				"name" : "ToggleTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current target to attack or defend for war coordination (CcoCampaignMilitaryForce or CcoCampaignSettlement)",
				"name" : "CurrentTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns a list of military forces available to loan from target faction to source faction",
				"name" : "MilitaryForcesToLoanList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns a list of enemies common to both the source and target faction who can target with war coordination",
				"name" : "SharedEnemyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the number of available war coord options, used for sorting",
				"name" : "NumAvailableWarCoordOptions",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Enables targetting with the passed in option type",
				"name" : "ToggleTargettingForType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the source and target faction have war coordination available (military allies)",
				"name" : "IsWarCoordinationAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if can ever use war targetting (only disabled between human players at the minute)",
				"name" : "IsWarTargettingAllowed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "How many favour points generate each turn (determined by relationship have between factions)",
				"name" : "FavourPointsChangePerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns true if we have anything we can actually target now. Can optionally pass the targetting type(OFFENSIVE, DEFENSIVE, OCCUPY)",
				"name" : "HasAnyValidTargetToPick",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "How many favour points have to spend between factions to pay for actions such as war coordination or requesting armies",
				"name" : "FavourPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Selects a war coordination target (CcoCampaignMilitaryForce or CcoCampaignSettlement)",
				"name" : "SetTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Gets the CcoCampaignFactionAlliedBuildings context to deal with outposts",
				"name" : "AlliedBuildingsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionAlliedBuildings"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the targetting mode on/off as specified to pick a target",
				"name" : "EnableTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "The target faction interacting with",
				"name" : "TargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the interaction the opposite way around (so can see requests in opposite direction, etc)",
				"name" : "ReverseInteractionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionInteraction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Opens up the war coordination panel, pass a specific tab key to select that section otherwise defaults to first available",
				"name" : "OpenWarCoordinationPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignWarCoordinationRequest requested from the target faction to the source faction (for war coordinations requests from AI, the request accepted from WarCoordinationPendingRequestsList basically)",
				"name" : "CurrentTargetRequestContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWarCoordinationRequest"
				}
			},
			
			{
				"doc" : "The source faction (usually player)",
				"name" : "SourceFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Clears the curent war coordination target",
				"name" : "ClearTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Zooms the camera to the current war coordination target",
				"name" : "ZoomToTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Add favour points for dev functionality, can be positive or negative",
				"name" : "WarCoordinationPendingRequestsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignWarCoordinationRequest"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if supplied context is a valid war coordination target (CcoCampaignMilitaryForce or CcoCampaignSettlement)",
				"name" : "IsValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Add favour points for dev functionality, can be positive or negative",
				"name" : "DevAddFavourPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the favour point cost for the cheapest target. Can optionally pass the targetting type(OFFENSIVE, DEFENSIVE, OCCUPY) (used to show on tooltip so know how much need to use set target button for example). Returns 0 if no valid targets",
				"name" : "CheapestTargetFavourPointsCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Loans the specified force of the target faction to the source faction",
				"name" : "LoanMilitaryForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the favour point cost to set a particular war coordination target (CcoCampaignMilitaryForce or CcoCampaignSettlement)",
				"name" : "FavourPointsCostForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if targetting mode is currently active",
				"name" : "IsTargettingActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns true if the specified force of the target faction can be loaned to the source faction",
				"name" : "CanLoanMilitaryForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the reasons if any as a localised string of why you cannot target a specified attack target (CcoCampaignMilitaryForce or CcoCampaignSettlement)",
				"name" : "InvalidReasonsForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the favour point cost to loan the specified force from the target to the source faction",
				"name" : "FavourPointsCostToLoanMilitaryForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignFactionMercenaryPool" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for a faction mercenary pool",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionMercenaryPool",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMercenaryPoolUnit"
					}
				],
				"doc" : "Returns if the unit can be recruited from the pool for a faction",
				"name" : "CanRecruitUnitForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns if the mercenary pool provides any unit for the given faction",
				"name" : "IsProvidingMercenaryUnitForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the size of the list of available mercenary pool units filtered by faction",
				"name" : "MercenaryPoolSizeFilteredByFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the size of the list of available mercenary pool units",
				"name" : "MercenaryPoolSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the list of available mercenary pool units",
				"name" : "MercenaryPoolUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMercenaryPoolUnit"
				}
			}
		]
	},
	"CcoCampaignFactionProvinceManager" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign FACTION_PROVINCE_MANAGER",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionProvinceManager",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the total food",
				"name" : "FoodTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction context",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the current level of zeal",
				"name" : "ZealLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Sets the CcoProvinceInitiativeRecord initiative that is stored on the component that calls this function",
				"name" : "SetInitiative",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current level of subterfuge",
				"name" : "SubterfugeLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the province context",
				"name" : "ProvinceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"doc" : "Toggles the province to be tax exempt if it's currently not or the other way around",
				"name" : "ToggleTaxExempt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the public order context",
				"name" : "PublicOrderContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPublicOrder"
				}
			},
			
			{
				"doc" : "Returns true if this province has maximum develpoment point currently",
				"name" : "HasMaxDevelopmentPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current level of the command/authority",
				"name" : "CommandLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the pooled resource context for the key passed in",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns true if wealth is enabled for this province",
				"name" : "IsWealthEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the gross income that the province produces",
				"name" : "GrossIncome",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the selected initiative that will be installed next turn",
				"name" : "SelectedInitiative",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProvinceInitiativeRecord"
				}
			},
			
			{
				"doc" : "Returns the geomantic web text for the current level",
				"name" : "GeomanticWebLevelText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if growth is enabled for this province",
				"name" : "IsGrowthEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the currently installed initiative in this province",
				"name" : "InstalledInitiative",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProvinceInitiativeRecord"
				}
			},
			
			{
				"doc" : "Returns true if public order is enabled for this province",
				"name" : "IsPublicOrderEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percentage of predicted next turn growth to max growth",
				"name" : "PredictedGrowthPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if the selected initiative can be set",
				"name" : "CanSetInitiative",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the percentage of current growth to max growth",
				"name" : "GrowthPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if the province is not currently taking tax",
				"name" : "IsTaxExempt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current level of the geomantic web of the province",
				"name" : "GeomanticWebLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoStringValue with the breakdown of the income spent/gained",
				"name" : "IncomeBreakdownList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns how many turns it would take for the province to provide the next development point",
				"name" : "TurnsUntilNextGrowthPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoStringValue factors for the growth",
				"name" : "GrowthFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns the unique command queue index identifier of this province",
				"name" : "CQI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the amount of growth that the province is predicted to have next turn",
				"name" : "GrowthPredictedNextTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of all province initiatives",
				"name" : "InitiativeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoProvinceInitiativeRecord"
				}
			},
			
			{
				"doc" : "Returns the growth threshold for the development points",
				"name" : "GrowthThresholdForPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect that are applied to the province, this include hidden effect bundles",
				"name" : "AllEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list of pairs with province effect bundles and settlements where those effect bundles are active",
				"name" : "EffectBundleAndSettlementsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns how much growth per turn the province provides",
				"name" : "GrowthPerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the auto management system of the province",
				"name" : "AutoManagementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvinceAutoManagement"
				}
			},
			
			{
				"doc" : "Returns the accumulated growth",
				"name" : "AccumulatedGrowth",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the pooled resource distributor of this province",
				"name" : "PooledResourceDistributorContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceDistributor"
				}
			},
			
			{
				"doc" : "Returns the current development point",
				"name" : "DevelopmentPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the slave system if the faction has access to the feature",
				"name" : "SlavesContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSlaves"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Adds a pooled resource to this province",
				"name" : "AddPooledResource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignFactionWarContracts" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign FACTION_WAR_CONTRACTS struct",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionWarContracts",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoCampaignWarContract with all available non-active contracts",
				"name" : "AvailableContractsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignWarContract"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignWarContract for the current active contract",
				"name" : "ActiveContract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWarContract"
				}
			},
			
			{
				"doc" : "Returns the faction context of this class",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			}
		]
	},
	"CcoCampaignFactionWomCompass" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for wom compass",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignFactionWomCompass",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the selection can be changed by the faction",
				"name" : "CanChangeDirection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignWomCompassDirection"
					}
				],
				"doc" : "Changes the compass direction to the one specified if possible",
				"name" : "ChooseCompassDirection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns an int with the maximum cooldown the compass can have (useful for calculating percentage)",
				"name" : "MaximumCompassCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the maximum cooldown the faction can have (useful for calculating percentage)",
				"name" : "MaximumFactionCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the cooldown until the compass can be moved again by any faction",
				"name" : "CompassCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the cooldown until the faction can turn the compass again",
				"name" : "FactionCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoString event names that will fire when script updates the turns until each direction is unlocked",
				"name" : "TurnsUntilUnlockedScriptObjectEventsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns a CcoCampaignWomCompassDirection with the key specified",
				"name" : "DirectionForKeyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWomCompassDirection"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignWomCompassDirection  with the currently active direction",
				"name" : "CurrentDirectionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWomCompassDirection"
				}
			},
			
			{
				"doc" : "Returns an int with the cost in power levels that it would take to skip the compass cooldown",
				"name" : "PowerLevelCostToSkipCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignWomCompassDirection with all the directions of the compass",
				"name" : "DirectionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignWomCompassDirection"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignWomCompassDirection"
					}
				],
				"doc" : "Returns true if can select the passed in direction",
				"name" : "CanSelectDirection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignWomCompassDirection"
					}
				],
				"doc" : "Returns true if the passed in direction is currently locked",
				"name" : "IsDirectionLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignWomCompassDirection"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Activates the user action with the type passed in for the specified direction",
				"name" : "ActivateUserActionForDirection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignWomCompassDirection"
					}
				],
				"doc" : "Returns extra text for the passed in direction",
				"name" : "TooltipReasonForDirection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignGovernorshipInteraction" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignGovernorshipInteraction",
		"symbols" : 
		[
			
			{
				"doc" : "Toggles this targetting interface from active to inactive and the other way around",
				"name" : "ToggleTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Clears the current target",
				"name" : "ClearTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the passed in target is valid",
				"name" : "IsValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this targetting interface is active",
				"name" : "IsTargettingActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the reason why the target is not valid",
				"name" : "InvalidReasonsForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns whether the given context is targeted. (Allows child classes to add unique targeting conditions)",
				"name" : "IsContextTargeted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the current target",
				"name" : "CurrentTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignCharacter with the character",
				"name" : "SourceCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns an int with the combined corruption value of all the effects on the character",
				"name" : "CorruptionCombinedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the combined growth value of all the effects on the character",
				"name" : "GrowthCombinedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the combined public order value of all the effects on the character",
				"name" : "PublicOrderCombinedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the combined income value of all the effects on the character",
				"name" : "IncomeCombinedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Sets the target to the passed in one",
				"name" : "SetTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Enables or disables this targetting interface based on the bool passed in",
				"name" : "EnableTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignGroupRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a campaign group record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignGroupRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoEffectBundle linked to the campaign group if one exists",
				"name" : "EffectBundleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns list of all CcoCampaignGroupRecord in db",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignGroupRecord"
				}
			},
			
			{
				"doc" : "Returns the max range specified in a linked numeric range criteria table",
				"name" : "MaxRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the min range specified in a linked numeric range criteria table",
				"name" : "MinRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns unique key for campaign group",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignInitiative" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign initiative",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignInitiative",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns true if this initiative is locked. Alternatively given a slot index, return if locked for given slot",
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns context to intitial cost",
				"name" : "CostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns associated initiative record wrapper",
				"name" : "InitiativeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoInitiativeRecord"
				}
			},
			
			{
				"doc" : "Returns true if this initiative will not expire",
				"name" : "HasInfiniteDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the initiative set this initiative belongs to",
				"name" : "InitiativeSetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignInitiativeSet"
				}
			},
			
			{
				"doc" : "Returns true if this initiative is currently active",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the total count of required units met in a force",
				"name" : "TotalNumberOfRequirementsMetForForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total count of required units",
				"name" : "TotalCountOfRequiredUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns how many points this initiative contributes towards the set's limits (can be negative)",
				"name" : "PointsCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPayloadRecord"
					}
				],
				"doc" : "Returns the number of turns until the payload is reactivated",
				"name" : "TurnsUntilPayloadIsActivated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the remaining duration of the intiative",
				"name" : "RemainingDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Marks the initiative as seen",
				"name" : "MarkAsSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the remaining cooldown for the initiative, or 0 if it is not on cooldown",
				"name" : "RemainingCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Deactivates the initiative",
				"name" : "Deactivate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the cooldown for the initiative, or 0 if it does not have a cooldown period",
				"name" : "Cooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Activates the initiative, to an optionally provided slot index",
				"name" : "Activate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the duration for the initiative, or 0 if it has infinite duration, which should be queried seperately",
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Activates an initiative, to an optionally provided slot index, or deactivates an activated initiative.",
				"name" : "Toggle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns reasons that this initiative is locked as a string",
				"name" : "LockReasons",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns true if this initiative meets the units requirements set in the required_units field",
				"name" : "ForceMeetsUnitRequirements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of Effects provided by this initiative",
				"name" : "EffectsProvided",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns true if this initiative has been seen before (modified by MarkAsSeen)",
				"name" : "HasSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the initiative itself is on cooldown",
				"name" : "IsOnCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of technologies that modify this initiative",
				"name" : "LinkedTechnologyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Returns context to required resource cost. Initiative is locked until these transactions have been met",
				"name" : "RequiredCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns true if locked only because of being on cooldown. Can provide an optional slot index",
				"name" : "IsOnlyOnCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns context to per-turn upkeep cost",
				"name" : "UpkeepCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns true if this initiative is script locked.",
				"name" : "IsScriptLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignInitiativeManager" : 
	{
		"area" : "Campaign",
		"doc" : "Component context manager for campaign initiatives",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignInitiativeManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignPooledResource"
					}
				],
				"doc" : "Get the total cost to confirm the selection",
				"name" : "TotalCostForConfirmation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignPooledResource"
					}
				],
				"doc" : "Get the value of what the total upkeep will be after the selection has been confirmed",
				"name" : "TotalUpkeep",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignInitiativeSet"
					}
				],
				"doc" : "Returns the initiatives which will be active once the confirm button is clicked. This is used to display the potential active effects",
				"name" : "PostConfirmActiveInitiativeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiative"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignInitiativeSet"
					}
				],
				"doc" : "Returns the initiatives which have been marked for deactivation",
				"name" : "InitiativesMarkedForDeactivation",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiative"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignInitiativeSet"
					}
				],
				"doc" : "Returns the initiatives which have been marked for activation",
				"name" : "InitiativesMarkedForActivation",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiative"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns all the initiative sets within the manager optionally filtered for a category",
				"name" : "InitiativeSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiativeSet"
				}
			},
			
			{
				"doc" : "Clears the lists of to-be activated and de-activated initiatives. For when the panel is closing",
				"name" : "ClearLists",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Handler when the confirmation button is clicked",
				"name" : "ApplyPendingInitiativeChanges",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignInitiative"
					}
				],
				"doc" : "Handler when the initiative buttons are clicked",
				"name" : "ToggleInitiativeAndDependantLevels",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignInitiative"
					}
				],
				"doc" : "Handler when the initiative buttons are clicked",
				"name" : "ToggleInitiative",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignInitiative"
					}
				],
				"doc" : "Check if the initiative button should be displayed as selected (active or to-be active)",
				"name" : "IsInitiativeSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					}
				],
				"doc" : "Returns true if the pending initiatives cost can be paid.",
				"name" : "CanPayPendingInitiativesExpenditureCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignInitiativeSet" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign initiatives",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignInitiativeSet",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the resource transaction cco for the base cost",
				"name" : "BaseCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Return the resource transaction cco for multiple initiatives' cost",
				"name" : "CostForMultipleInitiatives",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Activates multiple initiatives",
				"name" : "ToggleMultipleInitiatives",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Return the active initiative for a specific slot",
				"name" : "ActiveInitiativeForSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignInitiative"
				}
			},
			
			{
				"doc" : "Returns the first ui slot number that a newly activated initiative can be set into. If the initiative limit has been reached it returns -1.",
				"name" : "GetFirstAvailableSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the list of active initiatives for this set",
				"name" : "ActiveInitiatives",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiative"
				}
			},
			
			{
				"doc" : "Return the list of all initiatives for this set",
				"name" : "InitiativeListSorted",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiative"
				}
			},
			
			{
				"doc" : "Return the list of all initiatives for this set",
				"name" : "InitiativeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignInitiative"
				}
			},
			
			{
				"doc" : "Return the initiative set record cco",
				"name" : "InitiativeSetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoInitiativeSetRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Dev function to modify the limit of initiatives for this set",
				"name" : "DevModifyLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "return whether this set is on cooldown",
				"name" : "IsOnCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "return the points allocated for this set",
				"name" : "PointsAllocated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "return the point limit for this set",
				"name" : "PointsLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "return the remaining cooldown for this set",
				"name" : "RemainingCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the int with the active initiative limit for this set",
				"name" : "ActiveInitiativeLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Return bool with the flag whether this set can activate initiatives",
				"name" : "CanActivateInitiatives",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignMapPlayableAreaRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for CAMPAIGN_MAP_PLAYABLE_AREA_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignMapPlayableAreaRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the sort order of the campaign",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns localised description of campaign",
				"name" : "DescriptionText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns localised name of campaign",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this campaign can be played via new campaign screen (owns dlc, not defined out for a special build, etc",
				"name" : "ShowsInCampaignSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the radar image for map preview",
				"name" : "RadarImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns movie to use for frontend campaign select screen",
				"name" : "MoviePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns image to use in frontend campaign select screen",
				"name" : "FrontendImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns key for campaign map",
				"name" : "CampaignKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns unique key of record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the list of CcoOwnershipProductRecord required to be owned for this campaign",
				"name" : "OwnershipProductRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRecord"
				}
			},
			
			{
				"doc" : "Returns list of all CcoCampaignMapPlayableAreaRecord in table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMapPlayableAreaRecord"
				}
			},
			
			{
				"doc" : "Returns CcoCampaignStartInfo used for campaign select screen in frontend (sp, for mp use CcoMpCampaignMap::CampaignStartInfoContext as that includes time of legend info)",
				"name" : "CampaignStartInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignStartInfo"
				}
			}
		]
	},
	"CcoCampaignMapWindsOfMagicAreaRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignMapWindsOfMagicAreaRecord",
		"symbols" : 
		[
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMapWindsOfMagicAreaRecord"
				}
			},
			
			{
				"name" : "PercentageChanceToChangePerRound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "InitialStrengthContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapWindsOfMagicStrengthRecord"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Campaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignMapWindsOfMagicStrengthRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CAMPAIGN_MAP_WINDS_OF_MAGIC_STRENGTH_RECORD record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignMapWindsOfMagicStrengthRecord",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFactionProvinceManager"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns a list of CcoEffect that would change if this strength was set as current. Optionally can pass a level to compare with instead of comparing with current",
				"name" : "PreviewChangedEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect with all wom strength records from the database table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMapWindsOfMagicStrengthRecord"
				}
			},
			
			{
				"doc" : "Returns true if this strength enables storm of magic",
				"name" : "EnableStormOfMagic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns and int the duration of this wom strength level",
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the level of this strengh",
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the frequency of this level",
				"name" : "Frequency",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of effects applied when this level is active",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a localised string with the name of the strength",
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the database key of this strength level",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignMercenaryPoolUnit" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for a mercenary pool unit",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMercenaryPoolUnit",
		"symbols" : 
		[
			
			{
				"doc" : "Returns if the mercenary pool unit has infinite amount available",
				"name" : "HasInfiniteUnitCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the max mercenary pool unit count",
				"name" : "CurrentMaxUnitCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the available mercenary pool unit count",
				"name" : "AvailableUnitCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the main unit record of this mercenary pool unit",
				"name" : "MainUnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			}
		]
	},
	"CcoCampaignMilitaryForce" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign military force",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMilitaryForce",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this force is currently besieging a settlement",
				"name" : "IsLayingSiege",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the amount of income this force is providing in via raiding",
				"name" : "RaidingIncome",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the filepath for large faction flag.",
				"name" : "FactionFlagLarge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns true if this force is replenishing and will increase in health in next turn",
				"name" : "WillReplenishThisTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns true if can show the balance of power preview for the supplied army against this current army",
				"name" : "CanShowBalanceOfPowerPreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns current active list of CcoEffect coming from force itself",
				"name" : "ForceEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns true if this force is trespassing on the players territory",
				"name" : "IsTrespassingAgainstPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the tooltip for spawning a force using supplied spawnable_force_key but ignoring resources.",
				"name" : "TooltipForRespawnForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the filepath for medium faction flag.",
				"name" : "FactionFlagMedium",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns true if this force is currently inside a settlement",
				"name" : "IsGarrisoned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the cost per to turn to keep this force active",
				"name" : "Upkeep",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this force is a naval transport",
				"name" : "IsNavalTransport",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Checks if the spawned force can be recalled",
				"name" : "CanRecallSpawnedForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns current active list of CcoEffectBundle, without any filtering (so includes those that dont show in the UI)",
				"name" : "EffectBundleUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the number of current entities",
				"name" : "SoldierCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the tooltip for spawning a force using supplied spawnable_force_key",
				"name" : "TooltipForSpawnForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the filepath for small faction flag.",
				"name" : "FactionFlagSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns current active list of CcoEffectBundle, pre-filtered to only include those that should show in the UI",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the factions localised name (use this instead of getting from faction so works correctly with rebels)",
				"name" : "FactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the type of the military force",
				"name" : "ForceType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if this force's position is valid to spawn the specified spawnable_force_key",
				"name" : "IsInValidSpawnForcePosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this force is suffering attrition and will take damage in the next turn",
				"name" : "IsSufferingAttrition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of units recruited",
				"name" : "UnitCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the available CcoCampaignStance (that force can ever do, not just available right now)",
				"name" : "StanceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForceStance"
				}
			},
			
			{
				"doc" : "Returns the additive resistance the force has against plague infection",
				"name" : "PlagueResistance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this force can currently be loaned to the player by the forces owning faction",
				"name" : "CanPlayerLoan",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignFaction that we were loaned from if any",
				"name" : "FactionLoanedFromContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Disbands the entire force essentially killing it",
				"name" : "Disband",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignRitual"
					}
				],
				"doc" : "Specific to Skulltaker, takes in a CcoCampaignRitual so we can get the ritual setup from it and returns the cost for Skulltaker to teleport to that force, since it's different depending on each force.",
				"name" : "SkulltakerTeleportCostForForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignPlagueInfection with a plague infection if it exists on the military force",
				"name" : "PlagueInfectionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueInfection"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignCharacter in this force",
				"name" : "CharacterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if this force can spawn the specified spawnable_force_key. If the optional bool is true then the cost is not taken into account.",
				"name" : "CanSpawnForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this force is a ogre camp",
				"name" : "IsOgreCamp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Manipulates the winning streaks, useful for dev purposes",
				"name" : "DevManipulateWinStreak",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns list of CcoPair<CcoUnitDetails, turns_until_recruited> for each unit being recruited in this force",
				"name" : "PendingRecruitmentUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns the number of allowed tactics for this force",
				"name" : "AllowedNumberTactics",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this force has an army plague attached",
				"name" : "HasArmyPlague",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignFaction this force belongs to",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMilitaryForceHorde for getting horde specific info like settlements etc",
				"name" : "HordeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForceHorde"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns a percentage of inaccuracy the general calculating correct CombatComparisonStrengthRelativeToForce. Larger battles and lower general rankings make this larger. (0-1)",
				"name" : "AutoresolvePredictionInaccuracyPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this force is a moving camp (like ogre camps in wh3)",
				"name" : "IsMovingCamp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Replenishes the force, useful for dev purposes",
				"name" : "DevHeal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the contract points value for the force",
				"name" : "ContractPointsValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this force has a plague attached",
				"name" : "HasPlague",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the CcoCampaignResourceTransaction for spawning a camp for the specified spawnable_force_key",
				"name" : "CampRequiredResourceCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns a percentage of relative strength against specified force (where 1 is will definitely beat and 0 is definitely will lose)",
				"name" : "CombatComparisonStrengthRelativeToForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Kills the force, useful for dev purposes",
				"name" : "DevKill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the CcoCampaignSettlement we are in if any",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns true if this force is a fixed camp (like ogre camps in wh3)",
				"name" : "IsFixedCamp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return the CcoCampaignCharacter for the commanding character who is leading the force",
				"name" : "CommandingCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignPooledResourceManager for calculating pooled resource costs",
				"name" : "PooledResourceManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceManager"
				}
			},
			
			{
				"doc" : "Returns true if this force can switch to the current stance being previewed",
				"name" : "CanSwitchToPreviewStance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns if the force is inside the sphere of influence of another given force.",
				"name" : "IsInsideSphereOfInfluenceForForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignUnit in this force",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets morale debug effect value for increasing/decreasing morale",
				"name" : "DevSetDebugMoraleEffectValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the percentage AP cost to switch to specified stance (0-1)",
				"name" : "StancePreviewPercentCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this force is not a garrison army",
				"name" : "IsNotGarrisonForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if the force contains a spellcasting character.",
				"name" : "ContainsSpellcaster",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this force is raiding",
				"name" : "IsRaiding",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Adds development points for hordes",
				"name" : "DevAddDevPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the CcoCampaignArmyPlague for any plague present",
				"name" : "ArmyPlagueContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignArmyPlague"
				}
			},
			
			{
				"doc" : "Returns true if this force is currently previewing an alternative stance (mousing over a stance choice for example)",
				"name" : "IsPreviewingStance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of CcoEffectBundle provided by the plague on this army",
				"name" : "PlagueEffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMilitaryForceWarTargetting for handling setting war coordination targets",
				"name" : "WarCoordTargettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForceWarTargetting"
				}
			},
			
			{
				"doc" : "Returns the number of turns the force is immune to plagues for, or 0 if not immune",
				"name" : "PlagueImmunityTurns",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the average health percentage of units (0-1)",
				"name" : "AverageHealthPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns list of targets the AI is targetting (forces/settlements)",
				"name" : "AITargetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Sets the force's general in limbo if possible",
				"name" : "RecallSpawnedForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMilitaryForce of the parent army (for waagh parent)",
				"name" : "ParentForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns current hp percentage of recruited units against their max health (0-1)",
				"name" : "HealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns if the force is currently immune to plagues",
				"name" : "IsImmuneToPlagues",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the specified CcoCampaignPooledResource by record key",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns true if this force is selected",
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Spawns the specified spawnable_force_key if possible. Optionally a force in limbo can be respawned instead.",
				"name" : "SpawnForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of turns until war can be declared without penalty on an army if it does not vacate your territory",
				"name" : "TrespassGracePeriod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMilitaryForce of any child armies (for waagh children)",
				"name" : "ChildForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns the current selected CcoCampaignStance",
				"name" : "ActiveStanceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForceStance"
				}
			},
			
			{
				"doc" : "Returns the percentage unit count of current units against max can have (0-1)",
				"name" : "UnitCountPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignWinStreak",
				"name" : "WinStreakList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignWinStreak"
				}
			},
			
			{
				"doc" : "Returns true if this force has an agent embedded within",
				"name" : "IsAgentEmbedded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this army is currently hidden from enemies",
				"name" : "IsHiddenToEnemies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "If true, enables preview of visualisation for how large fixed camp area of influence would be if deployed in current position (false disables it)",
				"name" : "EnableFixedCampAreaOfInfluencePreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMilitaryForceMorale",
				"name" : "MoraleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForceMorale"
				}
			},
			
			{
				"doc" : "Returns list of contexts who are targetting us (mix of factions and armies as war coordination can be on both these levels)",
				"name" : "WarCoordinationTargetterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the number of turns remaining until loan is over and will return to FactionLoanedFromContext if any (0 if not on loan)",
				"name" : "LoanTurnsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this force is a horde",
				"name" : "IsHorde",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether a this force is a transported army",
				"name" : "IsTransportedArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the map position of the force",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "If the army is a loaned army, returns them to their lending faction",
				"name" : "ReturnLoanedArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the list of CcoCampaignPooledResource attached to this force",
				"name" : "PooledResourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns a tooltip displaying information relating to whether an army can be loaned",
				"name" : "TooltipForCanLoanStatus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the command queue index (unique id of force)",
				"name" : "CQI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether a trespass warning has been issued by the player to this military force",
				"name" : "TrespassWarningIsIssued",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Vector4"
					}
				],
				"doc" : "Zooms to the military force. Can optionally provide an offset for the zoom.",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the tooltip for recalling a spawned force",
				"name" : "TooltipForRecallSpawnForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the number of turns remaining before settlement sieging falls without a fight (if sieging)",
				"name" : "SiegeTurnsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this force is currently in ambush stance",
				"name" : "IsLayingAmbush",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the filepath for rotated faction flag.",
				"name" : "FactionFlagRotated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "deprecated" ]
			},
			
			{
				"doc" : "Returns current active list of CcoEffect coming from current location",
				"name" : "LocationEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			}
		]
	},
	"CcoCampaignMilitaryForceHorde" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMilitaryForceHorde",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoStringValue with the name and value of the factors that went towards the current amount of growth",
				"name" : "GrowthFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns an int with the number of turns needed until the next development point",
				"name" : "TurnsUntilNextGrowthPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int the growth amount needed for the next development point",
				"name" : "GrowthThresholdForPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the amount of growth the horde receives each turn",
				"name" : "GrowthPerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a float with the percentage of growth value the horde will have next turn, relative to the next development point",
				"name" : "PredictedGrowthPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a float with the percentage of current growth relative to the next development point",
				"name" : "GrowthPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns an int with the current number of development points",
				"name" : "DevelopmentPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoBuildingSetRecord with all the building sets in the horde",
				"name" : "BuildingSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingSetRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignBuildingSlot with the primary slot in the horde",
				"name" : "PrimarySlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignBuildingSlot with all the slots in the horde",
				"name" : "BuildingSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns an int with the current amount of accumulated growth",
				"name" : "AccumulatedGrowth",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoBuildingChainRecord with all the building chains in the horde",
				"name" : "ChainList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			}
		]
	},
	"CcoCampaignMilitaryForceMorale" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign military force's morale",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMilitaryForceMorale",
		"symbols" : 
		[
			
			{
				"doc" : "Returns current value",
				"name" : "CurrentMorale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the current CcoEffectBundle being applied due to morale if any",
				"name" : "CurrentEffect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the predicted (next turn list of effects as a list of CcoStringValue",
				"name" : "PredictedBreakdown",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns the current list of effects as a list of CcoStringValue",
				"name" : "CurrentBreakdown",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns true if morale considered low (which gives penalties)",
				"name" : "IsLow",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current debug effect value",
				"name" : "DebugMoraleEffectValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the difference between PredictedMorale and CurrentMorale",
				"name" : "PredictedMoraleChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns predicted (next turn) value",
				"name" : "PredictedMorale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoCampaignMilitaryForceStance" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignMilitaryForceStance",
		"symbols" : 
		[
			
			{
				"name" : "DisablePreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EnablePreview",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Activate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanBeActivatedOnTerrain",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanBeActivated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignMilitaryForceWarTargetting" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMilitaryForceWarTargetting",
		"symbols" : 
		[
			
			{
				"name" : "IsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "IsValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "MilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"name" : "IssuingFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "EnableTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ClearTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ZoomToTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "SetTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsTargettingActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "InvalidReasonsForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignMission" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a CAMPAIGN_MISSION",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMission",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the mission issuer context for this mission",
				"name" : "MissionIssuerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMissionIssuerRecord"
				}
			},
			
			{
				"doc" : "Completes the mission, dev only",
				"name" : "DevComplete",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"doc" : "Returns whether the mission is a quest",
				"name" : "IsQuest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the mission definition context for this mission",
				"name" : "MissionDefinitionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMissionDefinition"
				}
			},
			
			{
				"doc" : "Returns whether the mission is completed",
				"name" : "Completed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Cancels this mission",
				"name" : "CancelMission",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Shows the schemes panel and selects this scheme (if it is a scheme)",
				"name" : "ShowInSchemesPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the mission is cancelled",
				"name" : "IsCancelled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Shows the mission panel",
				"name" : "ShowObjectivePanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the mission has a zoom location",
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the chance of winning the quest battle associated with this mission",
				"name" : "QuestBattleWinChance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Zooms the camera to the location of this mission",
				"name" : "ZoomToLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the objective panel is open",
				"name" : "IsObjectivePanelOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the mission went from active to expired/succeded/cancelled this turn",
				"name" : "BecameInactiveThisTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with the armies in the battle piece setup",
				"name" : "BattleSetPieceArmyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceArmyRecord"
				}
			},
			
			{
				"doc" : "Teleports the selected character or character associated with this mission to the quest battle for this mission",
				"name" : "TeleportCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of turns remaining for this mission",
				"name" : "TurnsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the main (non-reinforcement) opponent army in the battle piece setup",
				"name" : "MainOpponentArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceArmyRecord"
				}
			},
			
			{
				"doc" : "Shows the mission panel with this mission selected",
				"name" : "ShowMissionPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the completion status. 0 Active, 1 Succeeded, 2 Cancelled, 3 Expired",
				"name" : "CompletionStatus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Pins this mission",
				"name" : "PinMission",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the settlement located at the display position of this mission objective.",
				"name" : "SettlementContextAtObjectiveDisplayPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns the teleport reason tooltip for the mission. Why you can or cannot teleport",
				"name" : "TeleportReasonTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the character located at the display position of the settlement at this mission objective.",
				"name" : "CharacterContextAtSettlementObjectiveDisplayPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the file path to the movie for this mission",
				"name" : "MoviePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the file path to the image for this mission",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the position of this mission on the campaign map",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Float"
					}
				],
				"doc" : "Returns the character located at the display position of this mission objective. You can optionally specify a floating point argument as the additional search radius.",
				"name" : "CharacterContextAtObjectiveDisplayPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns true if the display position for the mission objective is over a settlement that has an army stationed in it.",
				"name" : "IsObjectiveOverSettlementWithGarrisonedArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a story line mission for prologue, we show some special fx on events related to these",
				"name" : "IsPrologueStoryMission",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the target settlement if applicable. You could first use HasZoomLocation to check if this mission has a valid target.",
				"name" : "TargetSettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns true if the mission can be cancelled",
				"name" : "CanBeCancelled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the target character if any. You could first use HasZoomLocation to check if this mission has a valid target.",
				"name" : "TargetCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns whether this mission is a campaign victory condition",
				"name" : "IsVictoryCondition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the quest character context if this mission is a quest battle",
				"name" : "QuestCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns whether teleport is enabled for this mission",
				"name" : "IsTeleportEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the battle setup info context for this mission",
				"name" : "BattleSetupInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupInfo"
				}
			},
			
			{
				"doc" : "Returns whether to show the teleport button for this mission",
				"name" : "ShouldShowTeleportButton",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the faction context for this mission",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the mission record context for this mission",
				"name" : "MissionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMissionRecord"
				}
			},
			
			{
				"doc" : "Returns whether the mission is pinned",
				"name" : "IsPinned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignMissionDefinition" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a CAMPAIGN_MISSION_DEFINITION",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMissionDefinition",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoPair, each containing a timed payload and the remaining time of the payload",
				"name" : "PrimaryTimedPayloadInfoList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns the list of secondary objective contexts",
				"name" : "SecondaryObjectivesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMissionObjective"
				}
			},
			
			{
				"doc" : "Returns the list of primary objective contexts",
				"name" : "PrimaryObjectivesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMissionObjective"
				}
			},
			
			{
				"doc" : "Returns the list of the secondary payload info contexts",
				"name" : "SecondaryPayloadInfoList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadInfo"
				}
			},
			
			{
				"doc" : "Returns the primary payload info context",
				"name" : "PrimaryPayloadInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadInfo"
				}
			},
			
			{
				"doc" : "Returns the faction context of the issuer",
				"name" : "FactionIssuerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the mission turn limit",
				"name" : "TurnLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the mission identifier",
				"name" : "Identifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the mission issuer icon file path",
				"name" : "IssuerIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the name of the mission issuer, if there is one",
				"name" : "IssuerName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the description for the mission",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the header for the mission definition",
				"name" : "Header",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignMissionObjective" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a CAMPAIGN_MISSION_OBJECTIVE",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMissionObjective",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the mission objective requirements list",
				"name" : "ObjectiveRequirementsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMissionObjectiveRequirements"
				}
			},
			
			{
				"doc" : "Returns whether the objective has been cancelled",
				"name" : "ObjectiveCancelled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the objective has been completed",
				"name" : "ObjectiveCompleted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the max progress value",
				"name" : "MaxProgressValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current progress value",
				"name" : "CurrentProgressValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether progress can be tracked on this mission",
				"name" : "CanTrackProgress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignMissionObjectiveRequirements" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a CAMPAIGN_MISSION_COMPLETION_STATUS_LINE",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignMissionObjectiveRequirements",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the optional unit record context of this objective",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the optional building level record context of this objective",
				"name" : "BuildingLevelRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the optional technology record context of this objective",
				"name" : "TechnologyRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Zooms the campaign camera to the objective's zoom to location",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the objective has a zoom to location",
				"name" : "HasZoomToLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the objective has been completed",
				"name" : "IsCompleted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the tooltip of the objective",
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the description of the objective",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignModelBuilding" : 
	{
		"area" : "Common",
		"doc" : "Model safe context wrapper for a campaign building",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelBuilding",
		"symbols" : 
		[
			
			{
				"doc" : "Database record key of this building",
				"name" : "RecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Province that contains this building",
				"name" : "Province",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelProvince"
				}
			},
			
			{
				"doc" : "Region that contains this building",
				"name" : "Region",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelRegion"
				}
			},
			
			{
				"doc" : "Faction that owns this building and the region",
				"name" : "Owner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelFaction"
				}
			},
			
			{
				"doc" : "Database record key of the building chain this building belongs to",
				"name" : "ChainRecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignModelFaction" : 
	{
		"area" : "Common",
		"doc" : "Model safe context wrapper for a campaign faction",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelFaction",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Test if the subculture key is one of the specified list. Can accept any number of subculture keys",
				"name" : "SubcultureIsOneOf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Test if the culture key is one of the specified list. Can accept any number of culture keys",
				"name" : "CultureIsOneOf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Test if the faction key is one of the specified list. Can accept any number of faction keys",
				"name" : "RecordKeyIsOneOf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Is this faction a rogue faction?",
				"name" : "IsRogueFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Database record key of this factions subculture",
				"name" : "SubcultureKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Database record key of this factions culture",
				"name" : "CultureKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Unit cap for main unit record key. -1 if uncapped or not valid",
				"name" : "UnitCapForUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Current treasury balance",
				"name" : "Treasury",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Database record key of this faction",
				"name" : "RecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Faction level initiative manager context",
				"name" : "InitiativeManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelInitiativeManager"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Checks if ownership product is unlocked for a faction",
				"name" : "IsOwnershipProductUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Model pooled resource context for given key, if valid",
				"name" : "ModelPooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelPooledResource"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if ritual for ritual key is currently active",
				"name" : "IsRitualActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if specific effect bundle is active on the faction",
				"name" : "IsEffectBundleActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if specific campaign feature is available",
				"name" : "IsCampaignFeatureAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if tech for given tech key is researched or not",
				"name" : "IsTechnologyResearched",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if the faction is contained in the specified faction set",
				"name" : "IsInFactionSet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignModelInitiative" : 
	{
		"area" : "Common",
		"doc" : "Initiative wrapper safe to use in campaign model contexts",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelInitiative",
		"symbols" : 
		[
			
			{
				"doc" : "Test if initiative is active",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Db key of the initiative",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignModelInitiativeManager" : 
	{
		"area" : "Common",
		"doc" : "Cco wrapper for a initiative manager, safe to use in campaign model contexts",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelInitiativeManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Initiative set context for given key if valid",
				"name" : "InitiativeSetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelInitiativeSet"
				}
			},
			
			{
				"doc" : "List of owned initiative sets",
				"name" : "OwnedSets",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignModelInitiativeSet"
				}
			},
			
			{
				"doc" : "Owning faction of the manager",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelFaction"
				}
			}
		]
	},
	"CcoCampaignModelInitiativeSet" : 
	{
		"area" : "Common",
		"doc" : "Initiative set wrapper safe to use in campaign model contexts",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelInitiativeSet",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Initiative context for given key, if valid",
				"name" : "InitiativeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelInitiative"
				}
			},
			
			{
				"doc" : "List of active initiatives in set",
				"name" : "ActiveInitiatives",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignModelInitiative"
				}
			}
		]
	},
	"CcoCampaignModelMilitaryForce" : 
	{
		"area" : "Common",
		"doc" : "Model safe context wrapper for a campaign military force",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelMilitaryForce",
		"symbols" : 
		[
			
			{
				"doc" : "Returns whether the military force can move in the current stance",
				"name" : "CanMoveInCurrentStance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignModelPooledResource" : 
	{
		"area" : "Common",
		"doc" : "Campaign model wrapper for a pooled resource",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelPooledResource",
		"symbols" : 
		[
			
			{
				"doc" : "Percentage towards full capacity for this resource",
				"name" : "PercentageOfCapacity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Current total of this resource",
				"name" : "Total",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Maximum bound of this resource",
				"name" : "Max",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Minimum bound of this resource",
				"name" : "Min",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignModelProvince" : 
	{
		"area" : "Common",
		"doc" : "Model safe context wrapper for a campaign province",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelProvince",
		"symbols" : 
		[
			
			{
				"doc" : "Test if any military force is present in the province",
				"name" : "IsAnyMilitaryForcePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the a character of the specified agent subtype, owned by an enemy of the specified faction, is present in the province",
				"name" : "IsEnemyOfFactionAgentSubtypePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the a character of the specified agent type, owned by an enemy of the specified faction, is present in the province",
				"name" : "IsEnemyOfFactionAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the a character of the specified agent subtype, owned by the specified faction, is present in the province",
				"name" : "IsFactionAgentSubtypePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the a character of the specified agent type, owned by the specified faction, is present in the province",
				"name" : "IsFactionAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if any character of the specified agent subtype is present in the province",
				"name" : "IsAgentSubtypePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if any character of the specified agent type is present in the province",
				"name" : "IsAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Does the specified faction own the entire province?",
				"name" : "IsFactionOwnerOfEntireProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Regions contained in this province, owned by the specified faction",
				"name" : "FactionRegions",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignModelRegion"
				}
			},
			
			{
				"doc" : "Regions contained in this province",
				"name" : "Regions",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignModelRegion"
				}
			},
			
			{
				"doc" : "Database record key of this province",
				"name" : "RecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if a military force that is an enemy of the specified faction is present in the province",
				"name" : "IsEnemyOfFactionMilitaryForcePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if a military force belonging to the specified faction is present in the province",
				"name" : "IsFactionMilitaryForcePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignModelRegion" : 
	{
		"area" : "Common",
		"doc" : "Model safe context wrapper for a campaign region",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelRegion",
		"symbols" : 
		[
			
			{
				"doc" : "Test if any force is present in the region",
				"name" : "IsAnyMilitaryForcePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the specified agent subtype is present in the region and owned by an enemy faction",
				"name" : "IsEnemyAgentSubtypePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Test if any agent is present in the region",
				"name" : "IsAnyAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the specified agent type is present in the region and owned by an enemy faction",
				"name" : "IsEnemyAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Record key of the currently active winds of magic strength level for the region",
				"name" : "WindsOfMagicStrengthKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if the specified agent subtype is present in the region",
				"name" : "IsAgentSubtypePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Currently active winds of magic strength level for the region",
				"name" : "WindsOfMagicStrengthLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if the specified agent type is present in the region",
				"name" : "IsAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "GDP (income) that the owning faction generates from all of its regions in the province",
				"name" : "FactionProvinceGDP",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Test if the region key is one of the specified list. Can accept any number of region keys",
				"name" : "RecordKeyIsOneOf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "GDP (income) that this Region generates. Cannot be negative",
				"name" : "GDP",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Test if the originating subculture key is one of the specified list. Can accept any number of subculture keys",
				"name" : "IsOriginatingSubcultureOneOf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Amount of development points accumulated and unspent. This value will be the same for every region owned by the faction in this province",
				"name" : "DevelopmentPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the record key of the originating subculture of this region",
				"name" : "OriginatingSubcultureKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the climate of the settlement attached to this region",
				"name" : "ClimateKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Amount of growth accumulated per-turn. This value will be the same for every region owned by the faction in this province",
				"name" : "GrowthPerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Is this the factions home region?",
				"name" : "IsHomeRegion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Amount of growth accumulated towards the next development point. This value will be the same for every region owned by the faction in this province",
				"name" : "Growth",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Amount that public order is currently changing per-turn. This value will be the same for every region owned by the faction in this province",
				"name" : "PublicOrderChangePerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction that owns this region. May be rebel if abandoned or following a successful rebellion",
				"name" : "Owner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the region belongs to the region group with the passed in key",
				"name" : "BelongsToRegionGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Province that contains this region",
				"name" : "Province",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelProvince"
				}
			},
			
			{
				"doc" : "Returns true if the region is abandoned",
				"name" : "IsAbandoned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Public order balance for next turn. This value will be the same for every region owned by the faction in this province",
				"name" : "NextTurnPublicOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the record key of this region",
				"name" : "RecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Public order balance for this turn. This value will be the same for every region owned by the faction in this province",
				"name" : "PublicOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Test if specific effect bundle is active in the region",
				"name" : "IsEffectBundleActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if any military force owned by the local faction is present in the region",
				"name" : "IsOwnMilitaryForcePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the specified agent subtype is present in the region and owned by the specified faction",
				"name" : "IsFactionAgentSubtypePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the specified agent type is present in the region and owned by the specified faction",
				"name" : "IsFactionAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if any agent owned by the local faction is present in the region",
				"name" : "IsAnyOwnAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the specified agent subtype is present in the region and owned by the local faction",
				"name" : "IsOwnAgentSubtypePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if any enemy military force is present in the region",
				"name" : "IsAnyEnemyMilitaryForcePresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if the specified agent type is present in the region and owned by the local faction",
				"name" : "IsOwnAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignModelFaction"
					}
				],
				"doc" : "Test if any enemy agent is present in the region",
				"name" : "IsAnyEnemyAgentPresent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignModelRoot" : 
	{
		"area" : "Common",
		"doc" : "Model safe context wrapper for the campaign root, allows access to other model ccos from context viewer for example",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelRoot",
		"symbols" : 
		[
			
			{
				"doc" : "Returns if it's a multiplayer game",
				"name" : "IsMultiplayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the campaign key for this campaign",
				"name" : "CampaignKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignModelUnit" : 
	{
		"area" : "Common",
		"doc" : "Model safe context wrapper for a campaign unit",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignModelUnit",
		"symbols" : 
		[
			
			{
				"doc" : "Current level of the unit",
				"name" : "ExperienceLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Context of the unit's faction",
				"name" : "OwningFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelFaction"
				}
			}
		]
	},
	"CcoCampaignNegotiation" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign negotiation",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignNegotiation",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the target faction (the non player faction in the negotiation)",
				"name" : "TargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			}
		]
	},
	"CcoCampaignOperationSetRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CAMPAIGN_OPERATION_SET_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignOperationSetRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of effect bundles for this set",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns a list of all operation sets in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignOperationSetRecord"
				}
			},
			
			{
				"doc" : "Returns a list of agents that will get unlocked by the effects in this set",
				"name" : "AgentList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"doc" : "Returns a list of units that will get unlocked by the effects in this set",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns a list of armory items for this set",
				"name" : "ArmoryItemList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmoryItemRecord"
				}
			}
		]
	},
	"CcoCampaignPayloadInfo" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a payload, a payload is basically a reward from say a mission. Contains multiple CcoCampaignPayloadInfoEntry",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPayloadInfo",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the list of CcoCampaignPayloadInfoEntry entries for this payload",
				"name" : "Entries",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadInfoEntry"
				}
			}
		]
	},
	"CcoCampaignPayloadInfoEntry" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a payload entry, a payload is basically a reward from say a mission, this is one entry from the list accessed by CcoCampaignPayloadInfo",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPayloadInfoEntry",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the numeric value of a treasury reward, pooled resource transaction etc. without the rest of the text description, if not applicable, just returns 0",
				"name" : "NumericValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns sort order of the payload",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the unit rank, will return 0 if the payload doesn't provide a unit",
				"name" : "UnitRank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if payload is accessible (with DLC permissions)",
				"name" : "IsAccessible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if there is a UnitRecordContext",
				"name" : "IsUnitPayload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoMainUnitRecord provided by the payload if there is any",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoCharacterTraitLevelRecord provided by the payload if there is any",
				"name" : "TraitLevelRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCharacterTraitLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoAncillaryRecord provided by the payload if there is any",
				"name" : "Ancillary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoEffectBundle provided by the payload if there is any",
				"name" : "EffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns how many turns the payload lasts",
				"name" : "TurnsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the state to use in layout, this is either thte rarity state of the ancillary, if no ancillary just returns 'effect'",
				"name" : "State",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns icon filepath to use",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns localised name of payload entry reward",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignPayloadRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CAMPAIGN_PAYLOAD_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPayloadRecord",
		"symbols" : 
		[
			
			{
				"name" : "WindsOfMagicStrengthChangeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResourceTransactions",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadResourceTransactionRecord"
				}
			},
			
			{
				"name" : "PooledResourceComponents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "WarCoordinationTargetComponents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitComponents",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadUnitComponentRecord"
				}
			},
			
			{
				"name" : "CharacterTraitChangeComponents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BasicValueComponents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BasicComponents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetSubPayloads",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RandomSubPayloads",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectBundles",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadRecord"
				}
			}
		]
	},
	"CcoCampaignPayloadResourceTransactionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CAMPAIGN_PAYLOAD_RESOURCE_TRANSACTION_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPayloadResourceTransactionRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadResourceTransactionRecord"
				}
			},
			
			{
				"name" : "Required",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoResourceCostRecord"
				}
			},
			
			{
				"name" : "ApplyImmediately",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "PayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadRecord"
				}
			},
			
			{
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignPayloadUnitComponentRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CAMPAIGN_PAYLOAD_UNIT_COMPONENT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPayloadUnitComponentRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadUnitComponentRecord"
				}
			},
			
			{
				"name" : "Xp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Amount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "ComponentType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"name" : "PayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadRecord"
				}
			}
		]
	},
	"CcoCampaignPendingAction" : 
	{
		"area" : "Campaign",
		"doc" : "Cco wrapper for getting information on the current pending action in campaign. There can only ever be one hence this being a singleton that basically wraps the pending action manager instead of the pending actions themselves, as would be quite involved to wrap those lifetimes",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPendingAction",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the current pending action is blocking the local player (as in there is an action and we arent involved)",
				"name" : "IsBlockingLocalPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if there is currently a pending action active (which blocks other players in simultaneous turns mpc)",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns localised description of current pending action",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns UNlocalised name of current pending action",
				"name" : "ActionType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns list of factions involved in this action",
				"name" : "InvolvedFactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns owning faction who has main responsibility of resolving this action",
				"name" : "OwningFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Zooms to location if HasZoomLocation is true",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if has a location can zoom to",
				"name" : "HasZoomLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the pending action has a timer",
				"name" : "HasTimer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns timer value of the pending action as a float",
				"name" : "TimeRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if IsBlockingLocalPlayer and certain action types (like fullscreen media) which require to disable all interaction with campaign to avoid desyncs",
				"name" : "ShouldBlockAllInteractions",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignPendingActionNotification" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for an individual notification/warning for CcoCampaignPendingActionNotificationQueue",
		"is_persistent" : false,
		"is_temporary" : true,
		"name" : "CcoCampaignPendingActionNotification",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the notification type from end_turn_notification record",
				"name" : "NotificationType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns icon path from end_turn_notification record",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns localised detailed description from end_turn_notification record",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns localised display text from end_turn_notification record",
				"name" : "DisplayText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns localised title from end_turn_notification record",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignPooledResource related to notification if exists",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignFaction related to notification if exists",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMilitaryForce related to notification if exists",
				"name" : "MilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns the CcoCamapignProvince related to notification if exists",
				"name" : "ProvinceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignSettlement related to notification if exists",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignCharacter related to notification if exists",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Activates the notification, taking context sensitive action (like opening tech panel for tech available for example)",
				"name" : "Activate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this notification can be suppressed",
				"name" : "CanBeSupressed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this notification can be skipped",
				"name" : "IsSkippable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignPendingActionNotificationQueue" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for end turn notification system (showing notifications/warnings to take care of before end turn)",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPendingActionNotificationQueue",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if specified type has been suppressed",
				"name" : "IsNotificationTypeSupressed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if there are currently no notifications so can just end turn",
				"name" : "IsNotificationListEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if notification system currently activated",
				"name" : "AreNotificationsVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current CcoCampaignPendingActionNotification to show in UI (we have cycle functionality in wh3)",
				"name" : "CurrentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPendingActionNotification"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignPendingActionNotification that are currently active (showing on WH3 UI on end turn area)",
				"name" : "NotificationsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns list of CcoCampaignPendingActionNotification matching specified type string (matching key in notifications table in db)",
				"name" : "PendingActionsOfTypeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns list of CcoCampaignPendingActionNotification that involve specified context (CcoCampaignMilitaryForce/CcoCampaignCharacter/CcoCampaignSettlement/CcoCampaignFaction)",
				"name" : "PendingActionsOfItemList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns list of CcoCampaignPendingActionNotification matching specified category (army/character/region/faction)",
				"name" : "PendingActionsOfCategoryList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns full list of current CcoCampaignPendingActionNotification to be aware of before ending turn",
				"name" : "PendingActionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Skips current notification, essentially suppressing it for this turn",
				"name" : "SkipCurrentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Cycles through the current CurrentContext through NotificationsList (pass true for forwards, false for backwards)",
				"name" : "CycleNotification",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the suppression of all types of notification.",
				"name" : "SetAllNotificationsSuppressed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Toggles suppression of a specific type of notification for specified notification key from db. If pass true as a second parameter, will ignore if db specifies if this can be suppressed (used for script)",
				"name" : "ToggleSupressNotificationType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Turns the notification system on",
				"name" : "SetActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles the notification system to be on/off",
				"name" : "ToggleNotifications",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignPlagueComposition" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a plague composition (base plague plus ingredients)",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPlagueComposition",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns an float between with the percentage the spread change for force targets",
				"name" : "SpreadChanceToForcesPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns an float between with the percentage the spread change for region targets",
				"name" : "SpreadChanceToRegionsPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns an float between with the percentage spread change reduction after spreading",
				"name" : "ReductionPostSpreadPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns an int with the immunity duration of a target after being infected",
				"name" : "ImmunityDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns an int with the duration of this compositio for the passed in target",
				"name" : "InfectionDurationForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns an int with the duration of this composition",
				"name" : "InfectionDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list of combined effects from base and ingredients, grouped by type as a CcoPair. First in CcoPair is either list of CcoEffect if bool parameter is false or list of CcoCampaignPlagueCompositionEffectList is bool is true. Second returns the type",
				"name" : "CombinedEffectsAndTypeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueEffectList"
				}
			},
			
			{
				"doc" : "Returns a list of plague ingredients in the infection data",
				"name" : "PlagueIngredientList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueIngredient"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the special composition for this combination of plague and ingredients for the passed in faction, if any",
				"name" : "SpecialCompositionForFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPlagueSpecialCompositionRecord"
				}
			},
			
			{
				"doc" : "Returns the plague record context in the infection data",
				"name" : "BasePlagueContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBasePlague"
				}
			},
			
			{
				"doc" : "Returns the name of the composition. Will be either the name of the reciepe if exists, if not the combination of base and ingredients",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the chance for this plague to spread to a specific military force for the creator",
				"name" : "SpreadChanceToForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the chance for this plague to spread to a specific region for the creator",
				"name" : "SpreadChanceToRegion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoCampaignPlagueCompositionEffectList" : 
	{
		"area" : "Campaign",
		"doc" : "A small class to wrap an effect list with a plague or ingredient where it came from (to avoid nesting CcoPairs)",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPlagueCompositionEffectList",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the plague or ingredient that the effect bundle belongs to",
				"name" : "PlagueOrIngredientContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the list of effects",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			}
		]
	},
	"CcoCampaignPlagueInfection" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign REGION_INFECTION or MILITARY_FORCE_INFECTION",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPlagueInfection",
		"symbols" : 
		[
			
			{
				"doc" : "Returns an float between with the percentage the spread change for force targets",
				"name" : "SpreadChanceToForcesPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns an float between with the percentage the spread change for region targets",
				"name" : "SpreadChanceToRegionsPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns an float between with the percentage spread change reduction after spreading",
				"name" : "ReductionPostSpreadPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns an int with the immunity duration of a target after being infected",
				"name" : "ImmunityDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the remaining duration of this infection",
				"name" : "RemainingDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the base duration of this infection",
				"name" : "InfectionDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffectBundle with the effect bundles provided by the infection",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignPlagueComposition with the plague composition context",
				"name" : "PlagueCompositionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueComposition"
				}
			},
			
			{
				"doc" : "Returns the name of the composition. Will be either the name of the reciepe if exists, if not the combination of base and ingredients",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignPlagueIngredient" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign plague component",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPlagueIngredient",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the description of the plague component record",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the plague component record",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the image path of the plague component record",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the plague component record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the number of turns left for cooldown, or 0 if none",
				"name" : "CooldownDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the offset used by the UI, or {0, 0} if none",
				"name" : "UIOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the plague parameters for this component",
				"name" : "PlagueParametersRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPlagueParameterRecord"
				}
			},
			
			{
				"doc" : "Returns the required technology needed to unlock this ingredient",
				"name" : "RequiredTechnologyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"doc" : "Returns the resource transaction context with the cost of this ingredient",
				"name" : "ResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the reason with how to unlock the ingredient for the faction passed in (or for players faction if no faction is passed)",
				"name" : "UnlockTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if the component is a mutation",
				"name" : "IsMutation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the component is blessed for the faction passed in (or for players faction if no faction is passed)",
				"name" : "IsBlessed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the component is on cooldown for the faction passed in (or for players faction if no faction is passed)",
				"name" : "IsOnCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the component is unlocked for the faction passed in (or for players faction if no faction is passed)",
				"name" : "IsUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the component is available for the faction passed in (or for players faction if no faction is passed)",
				"name" : "IsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoPlagueEffectRecord which contains all effect bundles for this ingredient",
				"name" : "PlagueEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPlagueEffectRecord"
				}
			}
		]
	},
	"CcoCampaignPlaguesCompositionSystem" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign plagues composition system",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPlaguesCompositionSystem",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns a CcoPair created from the infection and target passed in, to be used for rituals",
				"name" : "CompositionAndTargetPair",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignBasePlague"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Returns the a plague composition cco that will be created from the plague record and plague ingredients passed in",
				"name" : "PlagueCompositionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueComposition"
				}
			},
			
			{
				"doc" : "Returns a the list of special compositions that the faction has access to",
				"name" : "PlagueSpecialCompositionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueSpecialCompositionRecord"
				}
			},
			
			{
				"doc" : "Returns a the list of plague ingredients that the faction has access to",
				"name" : "PlagueIngredientsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueIngredient"
				}
			},
			
			{
				"doc" : "Unlock all base plagues and components",
				"name" : "DevUnlockPlagues",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Checks if the human player has access to any usable plague components",
				"name" : "HasAvailablePlagueComponents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPlagueComposition"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Infects the passed in target with the passed in plague composition",
				"name" : "InfectTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list will the faction plagues, if any",
				"name" : "BasePlagueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignBasePlague"
				}
			}
		]
	},
	"CcoCampaignPooledResource" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign pooled resource",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignPooledResource",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the CcoGroupPooledResourceEffectRecord taking into account a delta amount to apply to the total. Optionally can specify an effect type, defaults to percentage of capacity effect type",
				"name" : "PredictedGroupPooledResourceEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoGroupPooledResourceEffectRecord"
				}
			},
			
			{
				"doc" : "Returns a list of the factors that can be positive (but aren't necessarily currently)",
				"name" : "PositiveFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if this pooled resource has a negative total and isnt specific hardcoded resources (sigh, added in wh2)",
				"name" : "TotalLessThanZeroAndNotCertainResources",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of factors that are contributing to current value",
				"name" : "FactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns true if this pooled resource has persistant factors (as in they arent evaluated per turn and instead stockpile)",
				"name" : "IsPersistentResource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the current CcoGroupPooledResourceEffectRecord. Optionally can specify an effect type, defaults to percentage of capacity effect type",
				"name" : "CurrentGroupPooledResourceEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoGroupPooledResourceEffectRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list of effect bundles that would be active at the specified percent value. Can optionally specify faction to get effects for. Prefiltered to not include those that shouldnt appear in UI",
				"name" : "EffectBundleForPercentList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the associated tooltip VO event",
				"name" : "TooltipAudio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the current total value (not factor total, this is the current amount)",
				"name" : "Total",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns the bar percentage based on effect bounds. The last effect can be ignored and will be always full as soon at the total becomes more than the lower bound.  Optionally can specify an effect type, defaults to percentage of capacity effect type",
				"name" : "EffectBarPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the icon filepath",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the record key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list of effect bundles active due to pooled resource. Can optionally specify faction to get effects for. If none specified, will get effects of owning faction of this resource. Includes those that wont shown in UI",
				"name" : "EffectBundleUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the current effects active due to this pooled resource. Optionally can specify an effect type, defaults to percentage of capacity effect type",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoGroupPooledResourceEffectRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "adds a specified amount to this pooled resource by going through factors and adding values until value change by amount we specify). Can use negatives.",
				"name" : "DevAddAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list of effect bundles active due to pooled resource. Can optionally specify faction to get effects for. If none specified, will get effects of owning faction of this resource. Prefiltered to not include those that shouldnt appear in UI",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the percentage of the way to the next effect",
				"name" : "PercentageToNextEffect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the total of the pending factor list",
				"name" : "PendingFactorTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a localised text display of total with change (like: 10 (+20)), as a convenient function to display this in most places we show resources (as usually useful to know total/change at a glance like with treasury)",
				"name" : "TotalAndChangeString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the prediced percentage value of max on the next turn",
				"name" : "PredictedPercentageOfCapacity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the faction that owns this context if any",
				"name" : "OwningFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the localised description",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the total of all the current factors (not same as total, as factors could be leading to Total changing per turn)",
				"name" : "FactorTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the current percentage the value is of the max",
				"name" : "PercentageOfCapacity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the localised name given for the negative factors",
				"name" : "NegativeFactorsName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the breakdown context for this pooled resource on the specified military force",
				"name" : "MilitaryForceBreakdownContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceMilitaryForceBreakdown"
				}
			},
			
			{
				"doc" : "Returns the localised name given for the pending factors",
				"name" : "PendingFactorsName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the total of all the current positive factors",
				"name" : "PositiveFactorTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns the predicted number of turns needed to reach a certain amount. Optionally you can specify an extra delta for the current amount.",
				"name" : "PredictedTurnsToReachAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised name given for the positive factors",
				"name" : "PositiveFactorsName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Returns the breakdown context for this pooled resource on the specified settlement",
				"name" : "SettlementBreakdownContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceSettlementBreakdown"
				}
			},
			
			{
				"doc" : "Returns the total of all the current negative factors",
				"name" : "NegativeFactorTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					}
				],
				"doc" : "Returns the breakdown context for this pooled resource on the specified province",
				"name" : "ProvinceBreakdownContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceProvinceBreakdown"
				}
			},
			
			{
				"doc" : "Returns the localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of the pending factors that can be negative (but aren't necessarily currently)",
				"name" : "NegativePendingFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of thresholds that can be unlocked with achievements",
				"name" : "AchievementThresholdSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPooledResourceThresholdOperationSetRecord"
				}
			},
			
			{
				"doc" : "Returns the sort order for this pooled resource (for when have multiple linked pooled resources like corruption)",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of the pending factors that can be positive (but aren't necessarily currently)",
				"name" : "PositivePendingFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns the maximum value specified in the record, so that we can display the original value even after getting changed by effects",
				"name" : "InitialMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of active threshold sets, which have a range that confers effects and armory items",
				"name" : "ActiveThresholdSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPooledResourceThresholdOperationSetRecord"
				}
			},
			
			{
				"doc" : "Returns the maximum value",
				"name" : "Max",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of available threshold sets, which have a range that confers effects and armory items",
				"name" : "AvailableThresholdSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPooledResourceThresholdOperationSetRecord"
				}
			},
			
			{
				"doc" : "Returns the minimum value",
				"name" : "Min",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the list of pending factors that will be added to the value in the next turn",
				"name" : "PendingFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of effects with tiers so can see effects at each tier of values",
				"name" : "RangedTierList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRangeWithContext"
				}
			},
			
			{
				"doc" : "Returns a list of the factors that can be negative (but aren't necessarily currently)",
				"name" : "NegativeFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns true if the resource should always display zero factors",
				"name" : "ShouldDisplayZeroFactors",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the next CcoGroupPooledResourceEffectRecord. Optionally can specify an effect type, defaults to percentage of capacity effect type",
				"name" : "NextGroupPooledResourceEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoGroupPooledResourceEffectRecord"
				}
			}
		]
	},
	"CcoCampaignPooledResourceDistributor" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a pooled resource distributor. Can exist on anything that has an ENTITY_ID",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignPooledResourceDistributor",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					}
				],
				"doc" : "Returns whether distribution of the specified pooled resource is allowed to this entity",
				"name" : "IsDistributionEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets whether this entity allows pooled resource distribution for the provided pooled resource",
				"name" : "SetDistributionEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignPooledResourceManager" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for pooled resource manager.",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPooledResourceManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignResourceTransaction"
					}
				],
				"doc" : "Returns true if this transaction has the required trade resources",
				"name" : "HasRequiredTradeResources",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignResourceTransaction"
					}
				],
				"doc" : "Returns true if can afford the treasury cost of the specified resource transaction",
				"name" : "CanAffordTreasuryCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResourceTransaction"
					}
				],
				"doc" : "Returns true if can afford the specific pooled resource cost specified by provided CcoCampaignPooledResourceTransaction",
				"name" : "CanAffordSpecificPooledResourceCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignResourceTransaction"
					}
				],
				"doc" : "Returns true if can afford the pooled resource cost of the specified resource transaction",
				"name" : "CanAffordPooledResourceCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignResourceTransaction"
					}
				],
				"doc" : "Returns true if can afford the resource cost of the specified resource transaction",
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignPooledResourceMilitaryForceBreakdown" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a military force breakdown of a pooled resource",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPooledResourceMilitaryForceBreakdown",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns value of a specific factor given the specified factor key",
				"name" : "FactorValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total value from the factor list",
				"name" : "FactorTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total amount of pooled resource in this force",
				"name" : "Total",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the pooled resource this breakdown is for",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns a list of only the factors that can be negative (but arent necessarily right now)",
				"name" : "NegativeFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of only the factors that can be positive (but arent necessarily right now)",
				"name" : "PositiveFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of factors for this pooled resource in this force",
				"name" : "FactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			}
		]
	},
	"CcoCampaignPooledResourceProvinceBreakdown" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a province breakdown of a pooled resource",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPooledResourceProvinceBreakdown",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the total amount of pooled resource in this province",
				"name" : "Total",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the pooled resource this breakdown is for",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns a list of only the factors that can be negative (but arent necessarily right now)",
				"name" : "NegativeFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of only the factors that can be positive (but arent necessarily right now)",
				"name" : "PositiveFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of factors for this pooled resource in this province",
				"name" : "FactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns value of a specific factor given the specified factor key",
				"name" : "FactorValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total value from the factor list",
				"name" : "FactorTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignPooledResourceSettlementBreakdown" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a region/settlement breakdown of a pooled resource",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPooledResourceSettlementBreakdown",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns value of a specific factor given the specified factor key",
				"name" : "FactorValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total value from the factor list",
				"name" : "FactorTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total amount of pooled resource in this settlement",
				"name" : "Total",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the pooled resource this breakdown is for",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns a list of only the factors that can be negative (but arent necessarily right now)",
				"name" : "NegativeFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of only the factors that can be positive (but arent necessarily right now)",
				"name" : "PositiveFactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns a list of factors for this pooled resource in this settlement",
				"name" : "FactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			}
		]
	},
	"CcoCampaignPooledResourceTransaction" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for pooled resource transactions.",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignPooledResourceTransaction",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the colour for the transaction",
				"name" : "SupplementColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the value as a percentage of max could be",
				"name" : "ValuePercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the sort order",
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the absolute value (always positive)",
				"name" : "AbsoluteValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the value",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised description",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name to show when negative",
				"name" : "NameNegative",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name to show when positive",
				"name" : "NamePositive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised text which is value and name combination ",
				"name" : "LocalisedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the icon path for the transaction",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the resource record key",
				"name" : "ResourceKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignProvince" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign province.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignProvince",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if any settlement in this province is selected.",
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the winds of magic area in this province.",
				"name" : "WindsOfMagicAreaContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWindsOfMagicArea"
				}
			},
			
			{
				"doc" : "Returns an int with the number of regions in the province.",
				"name" : "NumRegions",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Dev command that adds development points to this province.",
				"name" : "DevAddDevPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the settlement list in the province.",
				"name" : "SettlementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the localised name of the province.",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the context of the pooled resource manager of this province, which can calculate if the province can afford transactions.",
				"name" : "PooledResourceManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceManager"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the context of the province manager of the faction that is passed in, if it exists in this province.",
				"name" : "ProvinceManagerForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionProvinceManager"
				}
			},
			
			{
				"doc" : "Returns the context of the local player province manager, if this exists in this province.",
				"name" : "LocalPlayerProvinceManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionProvinceManager"
				}
			},
			
			{
				"doc" : "Returns a list with all the pooled resources from this province.",
				"name" : "PooledResourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the context of the pooled resource with the key specified, if this resource exists in the province.",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns an int with the cqi of this object.",
				"name" : "CQI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the capital settlement of this province",
				"name" : "CapitalSettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns true if player owns all the settlements in the province",
				"name" : "IsPlayerCompleteOwner",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the player faction own any regions in this province.",
				"name" : "IsPlayerInvolved",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the income that this province generates",
				"name" : "Income",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction that owns all settlements in the province. If there is no such faction, returns nullptr",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the province income that the player makes from foreign slots",
				"name" : "PlayerFactionForeignSlotIncome",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if it's being contested by another faction.",
				"name" : "IsContested",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Zooms to capital of province",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Selects and zooms to a settlement in this order: player capital, player owned settlement, province capital.",
				"name" : "SelectAndZoom",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of mercenary pool of this province",
				"name" : "MercenaryPoolContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvinceMercenaryPool"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignModelContext for this province",
				"name" : "ModelProvinceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelProvince"
				}
			}
		]
	},
	"CcoCampaignProvinceAutoManagement" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for province auto-management logic",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignProvinceAutoManagement",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoProvinceAutomanagementFocusRecord"
					}
				],
				"doc" : "Chooses a focus for this province",
				"name" : "ChooseFocus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Sets this province as high priority, or sets it as normal priority if already high priority",
				"name" : "ToggleHighPriority",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current focus records that is selected in this province",
				"name" : "CurrentFocusContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProvinceAutomanagementFocusRecord"
				}
			},
			
			{
				"doc" : "Returns a list of focus records that can be set for this province",
				"name" : "FocusList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoProvinceAutomanagementFocusRecord"
				}
			},
			
			{
				"doc" : "Activates the auto management for this province or deactivates it if already active",
				"name" : "ToggleAutoManaging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the province is currently considered as high priority",
				"name" : "IsHighPriority",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the province is currently being auto managed by the AI",
				"name" : "IsAutoManaging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignProvinceGovernorship" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a province governorship",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignProvinceGovernorship",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the effects of the governor are on cooldown",
				"name" : "IsOnCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the detail of the character that governs this province",
				"name" : "CharacterDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the pending decision for this governorship if it exists",
				"name" : "PendingDecisionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignDecisionRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the province for this governorship",
				"name" : "ProvinceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			}
		]
	},
	"CcoCampaignProvinceMercenaryPool" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for a province mercenary pool",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignProvinceMercenaryPool",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the size of the list of available mercenary pool units",
				"name" : "MercenaryPoolSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the list of available mercenary pool units",
				"name" : "MercenaryPoolUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMercenaryPoolUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMercenaryPoolUnit"
					}
				],
				"doc" : "Returns if the unit can be recruited from the pool for a faction",
				"name" : "CanRecruitUnitForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns if the mercenary pool provides any unit for the given faction",
				"name" : "IsProvidingMercenaryUnitForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the size of the list of available mercenary pool units filtered by faction",
				"name" : "MercenaryPoolSizeFilteredByFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignPublicOrder" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignPublicOrder",
		"symbols" : 
		[
			
			{
				"name" : "ProvidedEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HappinessRangeEffectBundleList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Details",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BalancePercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BreakdownList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChangePerTurnState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChangePerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "State",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Balance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignResourceTransaction" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for resource transactions.",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignResourceTransaction",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the absolute treasury change (always positive)",
				"name" : "AbsoluteTreasuryChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignResourceTransaction"
					}
				],
				"doc" : "Returns the result of adding 2 transactions together",
				"name" : "Add",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns the list of required trade resources",
				"name" : "TradeResourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoResourceRecord"
				}
			},
			
			{
				"doc" : "Returns the list of pooled resource treasure transactions",
				"name" : "TreasuryTransactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignTreasuryTransaction"
				}
			},
			
			{
				"doc" : "Returns the list of pooled resource transactions",
				"name" : "PooledResourceTransactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					}
				],
				"doc" : "Checks if the passed pooled resource can afford this resource transaction",
				"name" : "CanAffordResourceTransaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					}
				],
				"doc" : "Returns the absolute resource change (always positive)",
				"name" : "TotalResourceChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignRitual" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign ritual",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignRitual",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the remaining time that the ritual is locked by script",
				"name" : "RemainingScriptLockTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the ritual targeting interface, used for selecting targets in 3d space.",
				"name" : "RitualInteractionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitualInteraction"
				}
			},
			
			{
				"doc" : "Returns the remaining cooldown for the ritual",
				"name" : "RemainingCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns an int with the completion payload duration",
				"name" : "RitualCompletionPayloadDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a string with the type of target this ritual requires. Returns empty string if no target is required.",
				"name" : "TargetType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if the ritual is on cooldown",
				"name" : "IsOnCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the ritual effect is active on target. Context parameter can be a CcoCampaignMilitaryForce, CcoCampaignSettlement or CcoCampaignFaction",
				"name" : "IsRitualEffectBundleActiveOnTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns a localised string with text explaining why the ritual cannot be performed",
				"name" : "InvalidRitualReason",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Performs the ritual. Optional context parameter can be a CcoCampaignMilitaryForce, CcoCampaignSettlement or CcoCampaignFaction",
				"name" : "Perform",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the remaining cast time of the ritual",
				"name" : "RemainingCastTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns a localised string with text explaining why the supplied target isnt valid to perform the ritual on. If valid to perform on, or no target supplied will return empty string",
				"name" : "InvalidTargetReason",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if the ritual is active",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a localised string with text explaining the necessary target criteria requirements",
				"name" : "TargetCriteriaText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns a context to the target resource. Parameter can be a CcoCampaignMilitaryForce, CcoCampaignSettlement or CcoCampaignFaction",
				"name" : "TargetResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns a context to the ritual chain this ritual belongs to or nullptr if it doesn't belong to any.",
				"name" : "RitualChainContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitualChain"
				}
			},
			
			{
				"doc" : "Returns a context to the ritual",
				"name" : "RitualContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Goes through all completed rituals of this type and returns a list of all targets and their remaining payload duration",
				"name" : "CompletedRitualTargetAndDurationList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the remaining cooldown for a target. Context parameter can be a CcoCampaignMilitaryForce, CcoCampaignSettlement or CcoCampaignFaction",
				"name" : "RemainingRitualCooldownForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if we can afford the cost of this ritual",
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the remaining cooldown for a target category. Context parameter can be a CcoCampaignMilitaryForce, CcoCampaignSettlement or CcoCampaignFaction",
				"name" : "RemainingCategoryCooldownForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns a localised string with text explaining why the ritual cannot be performed with any of the valid targets it has, or that it has no valid targets if there are none",
				"name" : "InvalidReasonForRitualWithAnyValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if the ritual is locked by having to complete a previous ritual in the same chain",
				"name" : "LockedByPreviousInChain",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns true if the ritual can be performed. Optional context param for the target, in case the ritual requires one",
				"name" : "CanPerformRitual",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Checks if there are any valid targets for a ritual that doesn't target self, and if there are returns true if we can perform the ritual with any of those valid targets. Optional param for a performer.",
				"name" : "CanPerformRitualWithAnyValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the provided target is valid. Context parameter can be a CcoCampaignMilitaryForce, CcoCampaignSettlement or CcoCampaignFaction",
				"name" : "IsTargetValid",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the ritual requires a target",
				"name" : "RequiresTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if a ritual category is active",
				"name" : "IsRitualCategoryActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the rituals cooldown_time is not set to -1",
				"name" : "IsRepeatableRitual",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the ritual is completed",
				"name" : "IsComplete",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the mortuary cult category if it exists",
				"name" : "MortuaryCategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMortuaryCultCategoryRecord"
				}
			},
			
			{
				"doc" : "Returns the reason for why a ritual is locked by script",
				"name" : "ScriptLockedReason",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "Returns a context to the resource transaction",
				"name" : "ResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns the index of the ritual in the ritual chain it belongs to. If it's not a part of a chain it returns -1",
				"name" : "IndexInRitualChain",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the ritual is available",
				"name" : "IsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the ritual is locked by script",
				"name" : "IsScriptLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the amount of slaves the ritual costs, taking bonus values into account",
				"name" : "SlaveCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cooldown for the ritual. Faction bonus values are checked.",
				"name" : "CooldownUponActivation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns an int with the remaining duration of the payload of the last ritual completed",
				"name" : "LastCompletedRitualRemainingPayloadDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction context of the ritual",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the context of the target that was used when last performing the ritual",
				"name" : "LastCompletedRitualTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the default faction target (if any) this ritual is setup to point at",
				"name" : "DefaultFactionTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			}
		]
	},
	"CcoCampaignRitualChain" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a live campaign ritual chain, can be used to query position in chain",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignRitualChain",
		"symbols" : 
		[
			
			{
				"doc" : "Get context of next ritual in the chain, if any",
				"name" : "NextInChainContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"doc" : "Get context of last completed ritual in chain, or first if none",
				"name" : "LastCompletedOrFirstRitualContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"doc" : "Get context of last completed ritual in chain if any completed",
				"name" : "LastCompletedContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"doc" : "Get record context for the chain",
				"name" : "RitualChainContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualChainRecord"
				}
			},
			
			{
				"doc" : "Get list of CcoCampaignRituals in the chain",
				"name" : "RitualsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			}
		]
	},
	"CcoCampaignRitualInteraction" : 
	{
		"area" : "Campaign",
		"doc" : "Class that manages targetting interface interaction for a ritual",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignRitualInteraction",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the ritual is repeatable",
				"name" : "IsRepeatable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the ritual associated with this class.",
				"name" : "RitualContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"doc" : "Returns true if the ritual is completed",
				"name" : "WasActionPerformed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns whether the given context is targeted. (Allows child classes to add unique targeting conditions)",
				"name" : "IsContextTargeted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the current target, if any has been set",
				"name" : "CurrentTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Does the initial setup of the factions without notifying. If passed in faction is not valid, sets target to first known faction instead",
				"name" : "SetupInitialTargetFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the target faction context if any",
				"name" : "TargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns a tooltip specifying whether can perform the ritual or not, exmplaining the reason if cannot be performed",
				"name" : "ActionPerformTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Returns true if can perform ritual with the current target setup",
				"name" : "CanPerformAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the cost of the ritual.",
				"name" : "ActionCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignCharacter"
					}
				],
				"doc" : "Performs a ritual with the current target stored",
				"name" : "PerformAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Sets the target to the object passed in",
				"name" : "SetTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Clears the currently stored target",
				"name" : "ClearTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles the targetting system through the CampaignTargettingInterface.",
				"name" : "ToggleTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Updates the faction with the current targetting interface faction. This is so all targetting interfaces are in sync",
				"name" : "UpdateTargetFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Is passed true, enables this as the targetting interface, else disables it.",
				"name" : "EnableTargetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Zooms to the stored target",
				"name" : "ZoomToTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if the passed in object is a valid target",
				"name" : "IsValidTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is the currently active targetting interface",
				"name" : "IsTargettingActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the reasons why the passed in target is invalid. Returns empty string if valid",
				"name" : "InvalidReasonsForTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignRitualManager" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a faction's ritual manager",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignRitualManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns list of ritual chains for given ritual category string",
				"name" : "RitualChainContextFromCategory",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitualChain"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns list of ritual chains matching given key",
				"name" : "RitualChainContextFromKey",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitualChain"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoRitualCategoryRecord"
					}
				],
				"doc" : "Returns whether faction has access to provided ritual category",
				"name" : "HasAccessToRitualCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoRitualRecord"
					}
				],
				"doc" : "Get a CcoCampaignRitual if one exists from a provided ritual record",
				"name" : "RitualContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"doc" : "Get list of unlockable rituals",
				"name" : "UnlockableRitualList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"doc" : "Get list of available rituals",
				"name" : "AvailableRitualList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			}
		]
	},
	"CcoCampaignRoot" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignRoot",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the campaign HUD is currently visible",
				"name" : "IsHUDVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of CcoCampaignFactionCheatSheetEntryRecords for the player faction's cheat sheet",
				"name" : "CampaignFactionCheatSheetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFactionCheatSheetEntryRecord"
				}
			},
			
			{
				"doc" : "Returns true if currently the players turn",
				"name" : "IsPlayersTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Cycles selection forward",
				"name" : "SelectNext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of the teleportation nodes that are currently open",
				"name" : "OpenTeleportationNodeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTeleportationNetworkNodeRecord"
				}
			},
			
			{
				"doc" : "Returns true if campaign is multiplayer",
				"name" : "IsMultiplayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Clears any selection in campaign",
				"name" : "ClearSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the current campaign is the prologue",
				"name" : "IsPrologue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Toggles the campaign HUD visibility",
				"name" : "ToggleHUD",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of all the human players in the current mp game",
				"name" : "NetworkPlayerList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Toggles cinematic mode",
				"name" : "ToggleCinematicMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of all the areas of interest in the campaign",
				"name" : "AreaOfInterestList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignAreaOfInterest"
				}
			},
			
			{
				"doc" : "Returns the current year as a number",
				"name" : "Year",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets whether the map overlay is locked or not",
				"name" : "SetOverlayLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of all provinces in the campaign",
				"name" : "ProvinceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"doc" : "Returns the current turn number",
				"name" : "TurnNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of all settlements in the campaign",
				"name" : "SettlementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Changes mode of the map overlay",
				"name" : "ChangeOverlayMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the campaign record key",
				"name" : "CampaignKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns list of all military forces in the campaign",
				"name" : "MilitaryForceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets whether map colouring overlay is visible",
				"name" : "SetOverlayVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current data as a localised string",
				"name" : "DateString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Triggers dilemma for player faction, only for dev usage",
				"name" : "DevTriggerDilemma",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns list of all characters in the campaign",
				"name" : "CharacterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns true if can select next or previous item",
				"name" : "CanAdvanceSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current round name (such as season for example)",
				"name" : "RoundName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns list of all factions in the campaign",
				"name" : "FactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if tactical view is active",
				"name" : "IsTacticalViewActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Triggers incident for player faction, only for dev usage",
				"name" : "DevTriggerIncident",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the CcoCampaignFaction for rebels",
				"name" : "RebelFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Triggers mission for player faction, only for dev usage",
				"name" : "DevTriggerMission",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if all character locomotion is complete (no characters moving)",
				"name" : "IsLocomotionComplete",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the pending action context to get information on current pending action (if any)",
				"name" : "PendingActionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPendingAction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sends a UITriggerScriptEvent to script with specified faction id and key so can have delayed script events to handle (like perform a command and then tell to script to react once command processed for example",
				"name" : "TriggerModelScriptNotificationEvent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if can currently save the campaign",
				"name" : "CanQuickSave",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the diplomacy manager context for getting pending negotiations, etc",
				"name" : "DiplomacyManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignDiplomacyManager"
				}
			},
			
			{
				"doc" : "Shows the campaign escape menu",
				"name" : "ShowEscapeMenu",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the notification queue context",
				"name" : "NotificationQueueContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPendingActionNotificationQueue"
				}
			},
			
			{
				"doc" : "Creates a quick save for campaign",
				"name" : "QuickSave",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if can currently cycle selection",
				"name" : "CanCycleSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the winds of magic system",
				"name" : "WindsOfMagicSystem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWindsOfMagicSystem"
				}
			},
			
			{
				"doc" : "Ends the current campaign turn just for local player, skips all other factions turn. Only for dev usage.",
				"name" : "DevEndTurnJustForMe",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if cinematic mode is currently enabled",
				"name" : "IsCinematicModeEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current cursor context based on current mouseover (to get information on what is moused over)",
				"name" : "CursorContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCursorContext"
				}
			},
			
			{
				"doc" : "Ends the current campaign turn",
				"name" : "EndTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMapPlayableAreaRecord for the current campaign",
				"name" : "CampaignMapPlayableAreaRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapPlayableAreaRecord"
				}
			},
			
			{
				"doc" : "Cycles selection backwards",
				"name" : "SelectPrevious",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignRouteNode" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for campaign route node",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignRouteNode",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCaravan"
					}
				],
				"doc" : "Returns true if this node is available as a destination for the specified caravan",
				"name" : "IsDestinationAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this node is an ending node for its network",
				"name" : "IsEndNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this node is a starting node for its network",
				"name" : "IsStartNode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignSettlement with the region where this node is",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignFaction with the faction that own the region where this node is, if any",
				"name" : "OwningFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns a list of available resource contracts at this node",
				"name" : "ActiveContractList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCaravanContractRecord"
				}
			},
			
			{
				"doc" : "Returns a list with all the nodes segments connected to this one",
				"name" : "NodeSegmentLinkList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRouteSegment"
				}
			},
			
			{
				"doc" : "Returns the display position of the node",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns an int with the rounds left until the contracts refresh for this node",
				"name" : "RoundsToRefresh",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCaravanContractRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a CcoCampaignResourceTransaction with the resource that the passed in cargo and contract would generate in this node",
				"name" : "ResourceRewardForContractAndCargoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCaravan"
					}
				],
				"doc" : "Returns a CcoCampaignResourceTransaction with the resources that the caravan will generate when it reaches this node",
				"name" : "ResourceRewardForCaravanContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCaravan"
					}
				],
				"doc" : "Returns true if the node can be clicked to change the path",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCaravan"
					}
				],
				"doc" : "Returns true if the node is on the path of the passed in caravan, or the selected start node",
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the node is currently visible",
				"name" : "IsVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignRouteNode"
					}
				],
				"doc" : "Returns the segment connecting this node with the one passed in, if any",
				"name" : "SegmentTowardsNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRouteSegment"
				}
			}
		]
	},
	"CcoCampaignRouteSegment" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for campaign route segment",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignRouteSegment",
		"symbols" : 
		[
			
			{
				"doc" : "Returns an int with the minimum amount for banditry to be considered a medium threat",
				"name" : "MediumBanditryLevelThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the threat icon should be shown",
				"name" : "ShouldShowThreatIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the average amount of banditry in the regions contained in the segment",
				"name" : "BanditryLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignSettlements that are present along the segment",
				"name" : "SettlementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignRouteNode with the ending node of the segment",
				"name" : "EndNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignRouteNode with the starting node of the segment",
				"name" : "StartNodeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRouteNode"
				}
			},
			
			{
				"doc" : "Returns an int with the minimum amount for banditry to be considered a high threat",
				"name" : "HighBanditryLevelThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignSettlement" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign settlement.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignSettlement",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the directory of the faction flags",
				"name" : "FactionFlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string with the key of the settlement.",
				"name" : "SettlementKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns an int with the tower level in this settlement.",
				"name" : "TowerLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list with all the allied foreign slots in the region, grouped based on the faction that owns each manager",
				"name" : "AlliedSlotsGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoGroupList"
				}
			},
			
			{
				"doc" : "Returns true if under siege.",
				"name" : "IsUnderSiege",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the income of the player faction foreign slots in this region",
				"name" : "PlayerFactionForeignSlotIncome",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Command that cancels the mark for type comversion command.",
				"name" : "UnmarkForTypeConversion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the alliance colour which for most part is owning factions, but a special case for abandoned/disguised settlements",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns a list with all the hostile foreign slots in the region, grouped based on the faction that owns each manager",
				"name" : "HostileSlotsGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoGroupList"
				}
			},
			
			{
				"doc" : "Returns true if mousing over this settlement.",
				"name" : "IsMouseOver",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoRegionRecord context of the region record",
				"name" : "RegionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRegionRecord"
				}
			},
			
			{
				"doc" : "Returns the tax income from the region.",
				"name" : "Income",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CQI of the region.",
				"name" : "CQI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list with all the allied slots in the region if any.",
				"name" : "AlliedForeignSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns true if this settlement is converting type.",
				"name" : "IsConvertingType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Command that marks the settlement for type conversion, which means this will be converted next turn.",
				"name" : "MarkForTypeConversion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a CcoPlagueInfection context if this settlement currently has a plague infection active",
				"name" : "PlagueInfectionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueInfection"
				}
			},
			
			{
				"doc" : "Returns whether the settlement is immune to occupation",
				"name" : "IsOccupationImmune",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this settlement is abandoned.",
				"name" : "IsAbandoned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Command that cancels the mark for abandon command.",
				"name" : "UnmarkForAbandon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns additive modifier to the chance of receiving plagues",
				"name" : "PlagueResistance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a float with the health percentage of the wall.",
				"name" : "WallsHealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a list with all the objects targetting this settlement, if any.",
				"name" : "WarCoordinationTargetterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignModelRegion context for this settlement",
				"name" : "ModelRegionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelRegion"
				}
			},
			
			{
				"doc" : "Returns the number of turns the settlement is immune to plagues for, or 0 if none",
				"name" : "PlagueImmunityTurns",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list with all the characters garrisoned in the settlement.",
				"name" : "ContainedCharacterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Command that marks the settlement for abandon, which means this will be abandoned next turn.",
				"name" : "MarkForAbandon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the position of the settlement on the map.",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the faction province manager of this settlement.",
				"name" : "FactionProvinceManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionProvinceManager"
				}
			},
			
			{
				"doc" : "Returns true if this settlement is currently selected",
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this settlement is currently on screen",
				"name" : "IsOnScreen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all pooled resources present in the region.",
				"name" : "PooledResourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns whether the settlement is currently immune to plagues",
				"name" : "IsImmuneToPlagues",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Selects and zooms to this settlement",
				"name" : "SelectAndZoom",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Command that selects this settlement.",
				"name" : "Select",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the character that is besiegeing this settlement.",
				"name" : "BesiegeingCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns tooltip with resources/treasury returned when this settlement gets abandoned.",
				"name" : "AbandonTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if settlement can convert to the given settlement type",
				"name" : "CanConvertToSettlementType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if it's covered by shroud.",
				"name" : "IsShrouded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with the all the slots in the settlement.",
				"name" : "BuildingSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns the context of the original subculture record",
				"name" : "OriginalSubcultureContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSubcultureRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Vector4"
					}
				],
				"doc" : "Command that zooms to this settlement. Can optionally provide an offset for the zoom.",
				"name" : "ZoomTo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the name of the faction, taking rebel factions into account.",
				"name" : "FactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns if this settlement belongs to region group with passed key",
				"name" : "BelongsToRegionGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with the effect bundles in the region, without any filtering (so includes those that dont show in the UI)",
				"name" : "EffectBundleUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the localized name for this settlement.",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if settlement has a plague",
				"name" : "HasPlague",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Command that renames the settlement.",
				"name" : "Rename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the type of the settlement, if it has one.",
				"name" : "SettlementType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if a character is garrisoned in this settlement.",
				"name" : "HasCharacterGarrisoned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the context of the pooled resource with the key specified, if it exists.",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns if a vassal is associated with the settlement",
				"name" : "IsAssociatedWithVassal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the military force context of the army stationed in this settlement, if any.",
				"name" : "StationedForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns a list with the effect bundles in the region, pre-filtered to only include those that should show in the UI",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the duration of the occupation immunity for this settlement",
				"name" : "OccupationImmunityDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if information about this settlement is visible to the player. (so if garrison and slot info is known to the player, not to do with being shrouded)",
				"name" : "IsVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list with the foreign slots in this settlement, for the passed in faction.",
				"name" : "HostileForeignSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"doc" : "Returns true if there will be a rebellion next turn.",
				"name" : "IsRebellionImminent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the capital icon of this settlement.",
				"name" : "CapitalIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the military force context of the garrison in this settlement.",
				"name" : "GarrisonForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns the treasury value of this settlement based on building levels",
				"name" : "SettlementTreasuryValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this settlement can be renamed",
				"name" : "CanRename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the rotated faction flag of this settlement.",
				"name" : "FactionFlagRotated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the maximum amount of building slots that the settlement can have for the current faction occupying it",
				"name" : "MaxBuildingSlotCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the medium faction flag of this settlement.",
				"name" : "FactionFlagMedium",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of the primary building slot.",
				"name" : "PrimarySlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a list of CcoBuildingSetRecord with all the building sets in the hostile slots owned by the passed in faction, sorted by their sort order",
				"name" : "HostileBuildingSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingSetRecord"
				}
			},
			
			{
				"doc" : "Returns true if this settlement is the capital of its province.",
				"name" : "IsProvinceCapital",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this settlement has any walls.",
				"name" : "HasWalls",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with how many turns the siege will last, Returns -1 if the settlement is not under siege.",
				"name" : "TurnsUntilSiegeSurrender",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the small faction flag of this settlement.",
				"name" : "FactionFlagSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if it's the capital of the faction that owns it.",
				"name" : "IsFactionCapital",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with all the building sets in the settlement, sorted by their sort order",
				"name" : "BuildingSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingSetRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the province that this settlement is part of.",
				"name" : "ProvinceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"doc" : "Returns a list with the resources present in this region.",
				"name" : "ResourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoResourceRecord"
				}
			},
			
			{
				"doc" : "Command that triggers a breakpoint, useful for debugging.",
				"name" : "BreakForDebugging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the index of this settlement in the province's settlement list.",
				"name" : "IndexIntoProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the faction that owns it.",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the large faction flag of this settlement.",
				"name" : "FactionFlagLarge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns an ordered list with all the buildable chains in this settlement for the players faction, even if the player doesn't currently own the settlement (for previewing buildings that player can have in a settlement)",
				"name" : "PlayersFactionChainList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			},
			
			{
				"doc" : "Returns the key of the region record.",
				"name" : "RegionRecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Dev command that forces a rebellion to spawn in settlement",
				"name" : "DevSpawnRebellion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if the local player owns this settlement.",
				"name" : "IsPlayerOwned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the number of times the wall has been breached.",
				"name" : "NumWallBreaches",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the context of the vassal faction that owns it.",
				"name" : "VassalFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if the settlement can be upgraded.",
				"name" : "IsUpgradeable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Dev command that makes the local player take control of this settlement",
				"name" : "DevTakeControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Command that resets a settlement to a different type.",
				"name" : "ResetSettlementType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the size of the garrison in this settlement.",
				"name" : "GarrisonSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an ordered list with all the buildable chains in this settlement.",
				"name" : "ChainList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingChainRecord"
				}
			},
			
			{
				"doc" : "Returns true if this settlement is in the process of being abandoned.",
				"name" : "IsAbandoning",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of the plague effect bundles present in this settlement",
				"name" : "PlagueEffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			}
		]
	},
	"CcoCampaignSkavenCorruptionOverlay" : 
	{
		"area" : "Campaign",
		"doc" : "Record wrapper for a Skaven corruption overlay",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignSkavenCorruptionOverlay",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the name of the public order skaven corruption factor",
				"name" : "PublicOrderFactorName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the menace charges provided by Skaven corruption",
				"name" : "MenaceCharges",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the public order contribution by Skaven corruption",
				"name" : "PublicOrderChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignSlaves" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignSlaves",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a float with the percent of slaves that will be discarded in a transfer, from the amount passed as a parameter",
				"name" : "PercentageDiscardedOnTransfer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns if the passed in effect(public_order, growth, income_modifier) is active or not.",
				"name" : "IsSlaveEffectTypeActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Command that toggles the passed in effect type.(public_order, growth, income_modifier)",
				"name" : "ToggleSlavesEffectType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a string with the slave distribution control type.",
				"name" : "SlaveDistributionControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Command that changes the distribution control to the specified distribution type(none/normal/high)",
				"name" : "ChangeSlaveDistributionControl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					}
				],
				"doc" : "Command that transfers slaves to the passed province (Takes CcoCampaignProvince as arg)",
				"name" : "TransferSlavesToProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a bool specifying whether the province can receive a slave transfer.",
				"name" : "CanReceiveTransfer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the amount of space still available in the province (max - current)",
				"name" : "SlaveSpaceAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the growth contribution that the slaves provide.",
				"name" : "GrowthContribution",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the public order contribution that the slaves provide.",
				"name" : "PublicOrderContribution",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a float with the income increase modifier that the slaves provide.",
				"name" : "IncomeIncreaseModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns an int the maximum number of slaves that the province can have.",
				"name" : "MaximumSlaves",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the percentage of used the slave cap",
				"name" : "SlavesCapPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns an int with the current number of slaves in the province.",
				"name" : "SlavesNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a float with the percent of slaves that will be lost next turn",
				"name" : "PercentageReducedPerTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the context of the faction province manager that owns the slaves.",
				"name" : "FactionProvinceManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionProvinceManager"
				}
			}
		]
	},
	"CcoCampaignStartInfo" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for frontend campaign start info",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignStartInfo",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoFrontendFactionLeaderRecord with faction leaders that are part of this campaign",
				"name" : "CharacterList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFrontendFactionLeaderRecord"
				}
			},
			
			{
				"doc" : "Returns a string with the campaign key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Generates overlay for supplied faction and sets up component called on",
				"name" : "GenerateMapOverlayForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the campaign is resumed",
				"name" : "IsResumed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a CcoFrontendFactionLeader for the specified CcoFactionRecord if one exists",
				"name" : "LordForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFrontendFactionLeader"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCultureRecord"
					}
				],
				"doc" : "Returns a list of effects that describe the unique traits of the passed in culture",
				"name" : "MechanicListForCulture",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCultureRecord"
					}
				],
				"doc" : "Returns a list of CcoFrontendFactionLeaders for a passed in culture that the player owns",
				"name" : "OwnedLordListForFaction",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFrontendFactionLeader"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCultureRecord"
					}
				],
				"doc" : "Returns a list of CcoFrontendFactionLeaders for a passed in culture",
				"name" : "LordListForFaction",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFrontendFactionLeader"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCultureRecord for this campaign that the player owns",
				"name" : "OwnedCultureList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCultureRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCultureRecords with the cultures from this campaign",
				"name" : "CultureList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCultureRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoFactionRecords with the factions in this campaign",
				"name" : "FactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"doc" : "Returns an int with the start date of the campaign",
				"name" : "StartDate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised victory description of the campaign which describes how to obtain victory",
				"name" : "VictoryDescriptionText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised description of the campaign",
				"name" : "DescriptionText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the campaign",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoTimeOfLegendsCampaignRecord for this campaign, if any (only used in a subset of mp campaigns)",
				"name" : "TimeOfLegendsCampaignRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTimeOfLegendsCampaignRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignMapPlayableAreaRecord with the playable area record for this campaign",
				"name" : "CampaignMapPlayableAreaRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapPlayableAreaRecord"
				}
			}
		]
	},
	"CcoCampaignStormTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignStormTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RespectExcludedRegionsTable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanSpawnOverCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ForSea",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ForLand",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanMove",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanDecay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignStreakEffectRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignStreakEffectRecord",
		"symbols" : 
		[
			
			{
				"name" : "OnScreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Min",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Max",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CampaignStreakKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignStreakRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignStreakRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Min",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResetTurns",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Max",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Type",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "StreakEffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignTechnology" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign technology",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignTechnology",
		"symbols" : 
		[
			
			{
				"doc" : "Returns financial cost to research this tech",
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "If one of the effects unlocks a training slot, returns the group of that",
				"name" : "TrainingGroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacterTrainingGroup"
				}
			},
			
			{
				"doc" : "Breaks into attached IDE for debugging and getting full information from internal objects",
				"name" : "BreakForDebugging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the records of the unresearched parents of this technology",
				"name" : "UnresearchedParentRecords",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Returns true if available and can currently research meeting any additional requirements like cost, etc",
				"name" : "CanResearch",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignTechnology that disabled us when it was researched (some techs mutually exclusive)",
				"name" : "DisablingTechContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"doc" : "Returns true if available, researching or researched",
				"name" : "IsAtLeastAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of parents that have already been researched",
				"name" : "ResearchedParents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoTechnologyRecord context",
				"name" : "RecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if this technology matches given query text",
				"name" : "MatchesQuery",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if researching or researched",
				"name" : "IsAtLeastResearching",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of CcoCampaignTechnology required before player can research this tech",
				"name" : "RequiredTechnologiesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Returns true if this technology is part of the research map",
				"name" : "IsQueued",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if available to be researched",
				"name" : "IsAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of CcoBuildingLevelRecord required to be built by player before can research this tech",
				"name" : "RequiredBuildingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns required number of parents to unlock this technology",
				"name" : "RequiredParentsNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this tech has building requirements before can start researtching",
				"name" : "HasBuildingRequirement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the key of technology node record",
				"name" : "NodeKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if currently researching",
				"name" : "IsResearching",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Starts researching this tech",
				"name" : "StartResearching",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the context of the faction that this technology belongs to",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if already been researched",
				"name" : "IsResearched",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the ui group that this technology is part of, if it exists",
				"name" : "UiGroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTechnologyUiGroupRecord"
				}
			},
			
			{
				"doc" : "Returns the list of CcoCharacterTraitLevelRecord provided by this tech",
				"name" : "CharacterTraitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterTraitLevelRecord"
				}
			},
			
			{
				"doc" : "Current state as a string (available/researched, etc",
				"name" : "CurrentState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of the required resource transaction",
				"name" : "ResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns the list of CcoCampaignAncillary provided by this tech",
				"name" : "AncillaryList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"doc" : "Returns the list of CcoBuildingLevelRecord provided by this tech",
				"name" : "BuildingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Colour defined by tech node set",
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Instantly disables tech for dev purposes",
				"name" : "DevDisableTech",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Full icon filepath for tech icons",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the list of CcoMainUnitRecord provided by this tech",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Localised long description",
				"name" : "LongDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Instantly enables tech for dev purposes. Can pass in true if want to report in event feed the new tech researched, otherwise will suppress this by default so as not to take out of tech panel to see event (better for testing tech tree)",
				"name" : "DevEnableTech",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if any progress has been made",
				"name" : "HasProgressed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of CcoEffect that this tech enables when researched, includes those not shown in ui",
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Localised short description",
				"name" : "ShortDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the override sound category for this technology if it exists",
				"name" : "OverrideSoundCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the list of CcoEffect that this tech enables when researched, prefiltered to not show those that shouldnt appear in ui",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the indent value from db (x position)",
				"name" : "Indent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns tier value from db (y position)",
				"name" : "Tier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoInitiativeRecord"
					}
				],
				"doc" : "Returns list of effects (flagged as visible in UI) that this tech grants to given initiative",
				"name" : "EffectsGrantedToInitiative",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the number of turns it takes to finish researching this tech",
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a VECTOR_4 that can be used with things like ContextRadarIcon for positioning free form using tier and indent from db",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns true if can afford the Cost of researching this tech",
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns list of initiatives affected by unlocking this tech, can pass to EffectsGrantedToInitiative to get specific effects",
				"name" : "AffectedInitiativeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoInitiativeRecord"
				}
			},
			
			{
				"doc" : "Returns script locked reasons for tech with challenge numbers formatted in, if any",
				"name" : "ScriptLockedReason",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the unlocalised name of the technology node set this technology belongs to",
				"name" : "NodeSetName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns required research points minus completed research points for this tech",
				"name" : "ResearchPointsCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "returns the context of the ui tab if any",
				"name" : "UiTabContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTechnologyUiTabRecord"
				}
			}
		]
	},
	"CcoCampaignTechnologyManager" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a faction's technology manager",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignTechnologyManager",
		"symbols" : 
		[
			
			{
				"doc" : "Return if this manager is currently researching a technology or not",
				"name" : "IsResearchingTech",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return research points for this manager",
				"name" : "ResearchPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return a context to the goal research technology if valid",
				"name" : "GoalTechnologyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"doc" : "Return a context to the current technology this manager is researching, if valid",
				"name" : "CurrentResearchingTechnologyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"doc" : "Return a list of effects granted by technology in this manager",
				"name" : "EffectsGranted",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Return a list of researched technology from this manager",
				"name" : "ResearchedTechnologyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"doc" : "Return a list of technology available to this manager",
				"name" : "TechnologyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			}
		]
	},
	"CcoCampaignTreasuryTransaction" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for treasury transactions.",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignTreasuryTransaction",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the localised text key for what text to use (NOT sure why done this way instead of returning text, see Mikaela)",
				"name" : "LocalisedTextKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the value",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignUnit" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a campaign unit",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignUnit",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Returns the reason why the unit cannot upgrade using the supplied CcoUnitPurchasableEffectRecord",
				"name" : "UpgradeUnavailableText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Returns a CcoUnitDetails object describing the unit with a given purchasable effect applied.",
				"name" : "UnitDetailsIfEffectPurchased",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the CcoMainUnitRecord",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the max raw health value this unit can have",
				"name" : "HealthMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if player knows enough about army to know how experience (might not be close enough to army, etc)",
				"name" : "IsExperienceKnown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the incremental cost per each subsequent scrap upgrade for this unit. It can be 0.",
				"name" : "PurchasableEffectsIncrementalScrapCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the list of CcoUnitAbility that this unit can use in battle",
				"name" : "AbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns true if player knows enough about army to know how many men they have left (might not be close enough to army, etc)",
				"name" : "IsNumMenKnown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns how much attrition will take in the next turn (how much health will lose) (0-1)",
				"name" : "AttritionPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Returns the CcoTechnologyRecord that locks the provided CcoUnitPurchasableEffectRecord.",
				"name" : "GetPurchasableEffectLockingTechnologyRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Returns true if player doesn't know details about this unit due to spying level (might not be close enough to army, etc)",
				"name" : "IsUnknown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Determines whether the provided CcoUnitPurchasableEffectRecord is locked behind an unresearched technology.",
				"name" : "GetPurchasableEffectLockedStatus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the health percent that will be next turn (0-1)",
				"name" : "HealthPercentNextTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Returns true if this unit can upgrade using the supplied CcoUnitPurchasableEffectRecord",
				"name" : "CanUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if unit is loaned from another faction",
				"name" : "IsLoaned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the amount of health that will be replenished on the next turn as a percentage (0-1)",
				"name" : "HealthReplenishPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Returns true if unit have purchased the supplied CcoUnitPurchasableEffectRecord",
				"name" : "HasPurchasedEffect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Upgrades the unit with the supplied CcoUnitPurchasableEffectRecord",
				"name" : "Upgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current experience progression to next level as a percent (0-1)",
				"name" : "ExperiencePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Returns true if unit have access to the supplied CcoUnitPurchasableEffectRecord",
				"name" : "HaveAccessToPurchasableEffect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Removes the unit from the army, essentially deleting the unit",
				"name" : "Disband",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current health as a percentage (0-1)",
				"name" : "HealthPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Brings up a prompt to rename the unit to give it a custom name",
				"name" : "Rename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if unit has purchased all available purchasable effects.",
				"name" : "HasPurchasedAllAvailableEffects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the icon filepath used for things like unit card images",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns unique string identifier for this unit",
				"name" : "UniqueUiId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if the unit has effects available for purchase. If it has no purchasable effects available, or has purchasable effects available that cannot currently be purchased it returns false.",
				"name" : "CanPurchaseAvailableEffects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit will suffer attrition on the next turn (take damage)",
				"name" : "WillSufferAttrition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of CcoUnitPurchasableEffectRecord that this unit have purchased",
				"name" : "PurchasedEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitPurchasableEffectRecord"
				}
			},
			
			{
				"doc" : "Returns true if this unit is for a character (general or agent)",
				"name" : "IsCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the actor voice-over id",
				"name" : "ActorVO",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the raw health value (hitpoints)",
				"name" : "HealthValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the alliance colour of this unit (usually same as factions colour, but if we have an origin faction it will use that colour)",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a CcoCampaignResourceTransaction for the purchase cost of a supplied CcoUnitPurchasableEffectRecord, including any cost increase from all previously purchased upgrades and a given number of ones selected to be purchased.",
				"name" : "PurchasableEffectIncreasedPurchaseCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns how many turns it will take for this unit to be back to full strength",
				"name" : "TurnsUntilReplenished",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the faction of this unit",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the allied origin faction of this unit (if this unit has been recruited through allied recruitment)",
				"name" : "AlliedOriginFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the current experience level of the unit (0-9)",
				"name" : "ExperienceLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Returns a CcoCampaignResourceTransaction for the total purchase cost of a supplied list of CcoUnitPurchasableEffectRecord as a whole, including the cost increases caused by earlier upgrades to the later ones.",
				"name" : "PurchasableEffectsTotalPurchaseCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignCharacter if any (for agents/generals)",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Levels up or down a unit by given number of levels",
				"name" : "DevLevelUp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the upkeep cost of this unit (how much pay each turn)",
				"name" : "UpkeepCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitPurchasableEffectRecord"
					}
				],
				"doc" : "Returns the CcoCampaignUnitPurchasableEffectCost for a supplied CcoUnitPurchasableEffectRecord",
				"name" : "PurchasableEffectCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignUnitPurchasableEffectCost"
				}
			},
			
			{
				"doc" : "Returns the owning CcoCampaignMilitaryForce",
				"name" : "MilitaryForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Fully heals the unit, useful for dev purposes",
				"name" : "DevHeal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the recruitment cost of this unit (one off payment when first recruit)",
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignUnitPurchasableEffectCost that this unit can use",
				"name" : "PurchasableEffectsCostList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnitPurchasableEffectCost"
				}
			},
			
			{
				"doc" : "Returns the max number of entities this unit can have",
				"name" : "NumEntitiesInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoMainUnitRecord"
					}
				],
				"doc" : "Upgrades the unit to the supplied CcoMainUnitRecord",
				"name" : "UpgradeUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of CcoUnitPurchasableEffectRecord that this unit can use",
				"name" : "PurchasableEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitPurchasableEffectRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the CcoUnitDetails for this unit (used on unit info panel which shows unit info from various sources)",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the current number of entities",
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignUnitGroupUpgrade" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a UNIT_GROUP_UPGRADE",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCampaignUnitGroupUpgrade",
		"symbols" : 
		[
			
			{
				"doc" : "Returns if the requirement of the unit rank is met",
				"name" : "RankRequirementMet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns rank required on the unit for the upgrade",
				"name" : "RankRequired",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignUnitUpgradesBuildingRequirement for the unit group",
				"name" : "BuildingRequirementsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnitUpgradesBuildingRequirement"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCampaignUnitUpgradesRequirement for the unit group",
				"name" : "TechRequirementsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnitUpgradesTechRequirement"
				}
			},
			
			{
				"doc" : "Returns the category that the unit group upgrade belong to for filtering purposes",
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if unit can apply this upgrade",
				"name" : "CanUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns the CcoCampaignResourceTransaction belonging to the unit upgrade",
				"name" : "ResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns a list of CcoMainUnitRecords that belongs to this unit group",
				"name" : "UnitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns the provided units rank after upgrade have been applied",
				"name" : "UnitRankAfterUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignUnitPurchasableEffectCost" : 
	{
		"area" : "Campaign",
		"doc" : "Context wrapper for pairing purchasable effect record and resource transaction.",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignUnitPurchasableEffectCost",
		"symbols" : 
		[
			
			{
				"doc" : "Returns resource transaction cco",
				"name" : "ResourceTransaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns purchasable effect record cco",
				"name" : "EffectRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitPurchasableEffectRecord"
				}
			}
		]
	},
	"CcoCampaignUnitUpgradeManager" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a UNIT_UPGRADE_MANAGER",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignUnitUpgradeManager",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns if unit has any unit group upgrades",
				"name" : "UnitHasUpgrades",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the first valid unit upgrade category that the given unit have access to",
				"name" : "FirstValidUpgradeCategoryForUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Returns a list of CcoCampaignUnitGroupUpgrades for a list of CcoCampaignUnitGroupUpgrades",
				"name" : "UnitGroupUpgradesTree",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "TreeData"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns a list of CcoCampaignUnitGroupUpgrades for a given CcoCampaignMilitaryForce",
				"name" : "ForceUnitGroupUpgradesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnitGroupUpgrade"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns a list of CcoCampaignUnitGroupUpgrades for the given CcoCampaignUnit",
				"name" : "UnitsUpgradeGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnitGroupUpgrade"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns the first valid upgrade group for the given CcoCampaignUnit",
				"name" : "FirstAvailableUnitUpgradeGroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignUnitGroupUpgrade"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns a list of CcoMainUnitRecord which the unit can upgrade to for a given CcoCampaignUnit",
				"name" : "UnitUpgradeMainUnitRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			}
		]
	},
	"CcoCampaignUnitUpgradesBuildingRequirement" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a UNIT_GROUP_TECH_REQUIREMENT",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignUnitUpgradesBuildingRequirement",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoBuildingLevelRecord required to unlock the unit group",
				"name" : "BuildingRequiredRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns true if unit have met the requirement",
				"name" : "IsRequirementMet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignUnitUpgradesTechRequirement" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a UNIT_GROUP_TECH_REQUIREMENT",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCampaignUnitUpgradesTechRequirement",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoTechnologyRecord required to unlock the unit group",
				"name" : "TechRequiredRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Returns the requirement display text",
				"name" : "RequirementText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if unit have met the requirement",
				"name" : "IsRequirementMet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCampaignVideoRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignVideoRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the scripted value registry key of the video (used for unlocking videos)",
				"name" : "ScriptedValueRegistryKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the still/thumbnail path for the video",
				"name" : "StillPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the video's localised title",
				"name" : "LocalisedTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoVideoRecord associated with the video",
				"name" : "VideoRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoVideoRecord"
				}
			}
		]
	},
	"CcoCampaignWarContract" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a campaign war contract",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignWarContract",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the reward payload info context for the contract",
				"name" : "RewardPayloadInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadInfo"
				}
			},
			
			{
				"doc" : "Returns if this is contract is currently active or not",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the client faction for the contract",
				"name" : "ClientFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the hired faction for the contract",
				"name" : "HiredFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns true if the faction has more that the target contract points for their active contract",
				"name" : "HasFactionExceededTargetPointsForActiveContract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns CcoCampaignPooledResource that the hired faction for this contract uses for contract points",
				"name" : "ContractPointsResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Completes the current active contract",
				"name" : "CompleteContract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Tries to break this contract if active",
				"name" : "BreakContract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Tries to activate this contract if available",
				"name" : "ActivateContract",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current contract points accumulated for the contract",
				"name" : "CurrentPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the required contract points to complete the contract",
				"name" : "TargetPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the remaining duration of the contract. If it's not an active contract this is equal to the contract duration",
				"name" : "RemainingDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the duration of the contract",
				"name" : "ContractDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the list of targets for the contract",
				"name" : "TargetFactionsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the localised description text for this contract if it has one",
				"name" : "CustomDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignWarCoordinationRequest" : 
	{
		"area" : "Campaign",
		"doc" : "Component context wrapper for a war coordination request from the AI with details of the mission",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignWarCoordinationRequest",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the type of target used for state names (attack_army/defend_army/attack_settlement/defend_settlement)",
				"name" : "TargetType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the context of the target to defend/attack, either a CcoCampaignMilitaryForce or CcoCampaignSettlement",
				"name" : "TargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the target faction who we are requesting to attack/defend (the settlement or forces owning faction)",
				"name" : "TargetFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the faction receiving this request",
				"name" : "RecipientFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the faction issuing this request",
				"name" : "IssuingFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignFactionInteraction this request belongs to",
				"name" : "FactionInteractionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFactionInteraction"
				}
			},
			
			{
				"doc" : "Accepts the request for pending target",
				"name" : "AcceptRequest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this request is still pending and hasnt been accepted yet, if not pending then it is an accepted request currently active",
				"name" : "IsPending",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if can currently perform this request (if can afford, etc)",
				"name" : "CanCurrentlyRequest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the turns remaining until this request becomes invalid",
				"name" : "TurnsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the favour points reward for completing the request",
				"name" : "FavourPointsReward",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCampaignWinStreak" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignWinStreak",
		"symbols" : 
		[
			
			{
				"name" : "CurrentStreakEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TurnsUntilDecay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "WinStreakPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "InvalidationRound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentWinStreak",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CampaignStreakContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCampaignWindsOfMagicArea" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a winds of magic area.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignWindsOfMagicArea",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if the wind can be changed. If passed true, will return if the wind strength can be increased, otherwise if it can be decreased.",
				"name" : "CanManipulateWindsOfMagic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the cost of performing a wind manipulation in this area. If passed true, will return cost for increasing strength, otherwise for decreasing",
				"name" : "WindsOfMagicManipulationCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Changes the current area strength. If the bool passed in is true, then it increases the strength, else it decreases it.",
				"name" : "ChangeAreaStrength",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of rounds until the next transition.",
				"name" : "RoundsUntilTransition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the round number when the duration of the current strength finishes.",
				"name" : "TransitionRound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the current wind strength record in the area.",
				"name" : "CurrentStrengthContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapWindsOfMagicStrengthRecord"
				}
			},
			
			{
				"doc" : "Returns a list with all the regions in the area.",
				"name" : "RegionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRegionRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the winds of magic area record.",
				"name" : "RecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapWindsOfMagicAreaRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the passed in faction has ownership of this area",
				"name" : "DoesFactionHaveAreaOwnership",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a tooltip with the reason winds of magic can't be activated, or with the cost if it can. If passed true, will return tooltip for increasing strength, otherwise for decreasing.",
				"name" : "ManipulateWindsOfMagicTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCampaignWindsOfMagicSystem" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignWindsOfMagicSystem",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignWindsOfMagicArea"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMapWindsOfMagicStrengthRecord"
					}
				],
				"name" : "ChangeAreaStrength",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AllAreaContexts",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignProvince"
					}
				],
				"name" : "AreaContextForProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWindsOfMagicArea"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoRegionRecord"
					}
				],
				"name" : "AreaContextForRegion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWindsOfMagicArea"
				}
			}
		]
	},
	"CcoCampaignWomCompassDirection" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for wom compass direction",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignWomCompassDirection",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the script key for the turns until unlocked script object",
				"name" : "TurnsUntilUnlockScriptKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the tooltip for the action of the type specified",
				"name" : "ActionTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the action with the type specified can be activated",
				"name" : "CanActivateAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of power level ranges grouped based on effects",
				"name" : "PowerLevelRangeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignWomCompassPowerLevelRange"
				}
			},
			
			{
				"doc" : "Returns true if this direction is the currently selected one",
				"name" : "IsCurrentDirection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised description of the direction",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised title of the direction",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the number of turns until this direction will be unlocked",
				"name" : "TurnsUntilUnlock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the sort order of the direction",
				"name" : "DisplayOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the current power level that this direction has",
				"name" : "CurrentPowerLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the maximum power level this direction can have",
				"name" : "MaxPowerLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this direction was initially locked",
				"name" : "IsInitiallyLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the minimum power level this direction can have",
				"name" : "MinPowerLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if this direction has access to the passed in action",
				"name" : "HasAccessToAction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list with the effects that this direction gets while it's selected",
				"name" : "SelectionEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list with the current effects of this direction based on the power level",
				"name" : "PowerLevelEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns true if the passed in faction can set this compass direction",
				"name" : "CanFactionSetDirection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of factors that have affected the power level of this direction",
				"name" : "FactorList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns the key of the direction record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCampaignWomCompassPowerLevelRange" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a direction power level to make it easier to have a list of them with their own effect list",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCampaignWomCompassPowerLevelRange",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the maximum level of this range",
				"name" : "MaxLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the minimum level of this range",
				"name" : "MinLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the percentage that this segment has based on the range's min and max",
				"name" : "SegmentPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a list of effects for this level",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the compass direction context",
				"name" : "DirectionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignWomCompassDirection"
				}
			}
		]
	},
	"CcoCapturePointCategoryTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCapturePointCategoryTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCapturePointTypeRecord" : 
	{
		"area" : "Record",
		"doc" : "A DB record wrapper for a battle capture point type",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCapturePointTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCapturePointTypeRecord"
				}
			},
			
			{
				"doc" : "Gets the spotting range (in metres) that the capture point can be spotted",
				"name" : "VisibilitySpottingRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a localised UniString that should be the displayed name for this capture point type",
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the DB primary key for this capture point type",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string path of this capture point types' icon",
				"name" : "IconName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCaravanContractRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CARAVAN_CONTRACT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCaravanContractRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all contract in the db",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCaravanContractRecord"
				}
			},
			
			{
				"doc" : "Returns true if the contract cannot be revoked",
				"name" : "Irrevocable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a float with the rate at which the cargo is bought",
				"name" : "CargoToResourceBoughtRate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a float with the rate at which the cargo is sold",
				"name" : "CargoToResourceSoldRate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a CcoCampaignPooledResource with the resource sold context. Tries to get resource from faction then from faction capital",
				"name" : "ResourceSoldContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns a CcoCampaignPooledResource with the resource bought context. Tries to get resource from faction then from faction capital",
				"name" : "ResourceBoughtContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCdirEventsCategoryRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCdirEventsCategoryRecord",
		"symbols" : 
		[
			
			{
				"name" : "Type",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnScreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CategoryKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCdirEventsDilemmaChoiceDetailRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a CDIR_EVENTS_DILEMMA_CHOICE_DETAIL_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCdirEventsDilemmaChoiceDetailRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the associated vo event for this choice",
				"name" : "ChoiceAudio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all effect bundles granted by the payload of this choice",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns a list with all pooled resource transactions granted by the payload of this choice",
				"name" : "ResourceTransactionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns a list with all ancillaries granted by the payload of this choice",
				"name" : "AncillaryList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"doc" : "Returns a list with all choice records from the database table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCdirEventsDilemmaChoiceDetailRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoTreasureHuntExtraInformationRecord"
					}
				],
				"doc" : "Returns a list with all treasure hunt symbols for the this choice, given the treasure hunt info passed in",
				"name" : "TreasureHuntImageList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				}
			},
			
			{
				"doc" : "Returns a localised title for the choice",
				"name" : "LocalisedChoiceTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a localised label for the choice",
				"name" : "LocalisedChoiceLabel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the dilemma that this choice is part of",
				"name" : "DilemmaKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the choice",
				"name" : "ChoiceKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "RecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCharacterAncillaryQuestUiDetailRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for character ancillary quest details",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCharacterAncillaryQuestUiDetailRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the ancillary is instantly awarded without a quest or mission",
				"name" : "Instant",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the rank at which the ancillary quest gets unlocked for the agent subtype",
				"name" : "Rank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context of the ancillary of this junction",
				"name" : "AncillaryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"doc" : "Returns the context of the agent subtype of this junction",
				"name" : "AgentSubtypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"doc" : "Returns a list of all character ancillary quest details from the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterAncillaryQuestUiDetailRecord"
				}
			},
			
			{
				"doc" : "Returns true if the ancillary will be awarded after a quest battle",
				"name" : "IsQuestBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCharacterSkillRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a character skill record.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCharacterSkillRecord",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a list of CcoEffect with all default effects for the level passed in",
				"name" : "EffectListForLevel",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list with all skills in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterSkillRecord"
				}
			},
			
			{
				"doc" : "Returns true if this is a male only background skill",
				"name" : "IsMaleOnlyBackgroundSkill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a female only background skill",
				"name" : "IsFemaleOnlyBackgroundSkill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a background skill",
				"name" : "IsBackgroundSkill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the rank at which this skill unlocks",
				"name" : "UnlockedAtRank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the default localised name of the skill",
				"name" : "DefaultLocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the default localised description of the skill",
				"name" : "DefaultLocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the default image path of the skill",
				"name" : "DefaultImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCharacterSpecialUnitAvailability" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for a character special units availability",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoCharacterSpecialUnitAvailability",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the character special unit is locked",
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitDetails",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			}
		]
	},
	"CcoCharacterTrainingDilemmaChoiceRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCharacterTrainingDilemmaChoiceRecord",
		"symbols" : 
		[
			
			{
				"name" : "DilemmaRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedLabel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChoiceEffectRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCharacterTrainingDilemmaRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCharacterTrainingDilemmaRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TrainingEffectType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChoiceList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCharacterTraitLevelRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCharacterTraitLevelRecord",
		"symbols" : 
		[
			
			{
				"name" : "FlavourDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TraitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ThresholdPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Level",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TraitKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BonusValues",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LoseLevelDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ExplanationDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCharacterTraitRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCharacterTraitRecord",
		"symbols" : 
		[
			
			{
				"name" : "ExcludedCulturesList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IncludedAgentsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PreBattleSpeechParameter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Precedence",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasMultipleLevels",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Hidden",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NoGoingBackLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AllTraitsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AntitraitsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TraitLevelsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoClickHoldContext" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoClickHoldContext",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the percentage hold value",
				"name" : "HoldPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoClimateRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoClimateRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoComponent" : 
	{
		"area" : "Common",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoComponent",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the relative position of the component",
				"name" : "RelativePosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Toggles the visibility of the component",
				"name" : "ToggleVisibility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "If this component has a custom tooltip layout, this command will create that layout and pin it allowing you to inspect it",
				"name" : "CustomTooltipCreate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Forces the ContextCallback::UpdateDisplay call to hit, which is very handy for debugging combined with conditional breakpoints",
				"name" : "ForceUpdateContextDisplay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the number of children recursively (so number of our children, and childrens children, and so forth)",
				"name" : "ChildCountPropagated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the dock offset of the component",
				"name" : "DockOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the list of state names as a string",
				"name" : "StateList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the template layout path this component is authored from if any",
				"name" : "TemplatePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the CcoComponent that is the current priority lock",
				"name" : "CurrentPriorityLocker",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"doc" : "Returns the components path from the root so can see all the parent ids that lead to this component",
				"name" : "CopyFullPathToClipboard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Toggles debug display which helps to visualise the bounds of this component and any additional debug info",
				"name" : "ToggleDebugDisplay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns a list of every child component matching the passed predicate.",
				"name" : "FindWithPredicate",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"doc" : "Returns the id of the component",
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "ui" ]
			},
			
			{
				"doc" : "Returns true if this components priority is lower than the current priority lock, meaning this component cannot be interacted with",
				"name" : "IsPriorityLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Will pin component to follow cursor until next left click. Primarily added for dev purposes so can find components easily and workaround overlap issues",
				"name" : "StartDragging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of visible children",
				"name" : "NumVisibleChildren",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the absolute position of the component",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Checks if there is currently an active debug display for the component",
				"name" : "IsDebugDisplayEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Allows to view the history of what contexts have been present on a component and where they originated from, useful for debugging flow of contexts",
				"name" : "ContextHistoryList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the priority of the component",
				"name" : "Priority",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Copies the memory address of this component so that it can be used in conditional breakpoints",
				"name" : "CopyMemoryAddressToClipboard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns last location in script that did anything to the component which is useful when investigating functionality/issues",
				"name" : "LastScriptCallLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Sorts children using the provided expression",
				"name" : "SortChildren",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the specified property key and value on the specified callback id",
				"name" : "SetCallbackProperty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Sets the current text on the component",
				"name" : "SetText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					}
				],
				"doc" : "Returns true if the component is a parent of the other component passed.",
				"name" : "IsParentOf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "If UiEd is open, this will open the layout this component is authored in and select it",
				"name" : "SelectInActiveUiEd",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the value of the specified user property key",
				"name" : "GetProperty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the memory address of this component",
				"name" : "MemoryAddress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Sets the context on a component (including children) using a specified context object given as a parameter",
				"name" : "PropagateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this component was created from script",
				"name" : "IsCreatedFromScript",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets image using specified image index and filepath",
				"name" : "SetImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Simulates a left click on the component",
				"name" : "SimulateLClick",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the component is currently disabled",
				"name" : "IsDisabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localisation string sources for the component tooltip",
				"name" : "CurrentTooltipLocalisationStrings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Sets the context on a component only (not children) using a specified context object given as a parameter",
				"name" : "SetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the specified property key exists",
				"name" : "PropertyExists",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the layout path so know which layout this component is authored in",
				"name" : "LayoutPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns list of warnings of potential issues with this component",
				"name" : "WarningList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUiWarning"
				}
			},
			
			{
				"doc" : "Returns true if the mouse is currently over this component or its children",
				"name" : "IsMouseOverChildren",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the components disabled flag to the specified bool value.  Only relevant if a component is interactive, if a component is interactive but disabled it will handle mouseovers but not clicks",
				"name" : "SetDisabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the component is currently interactive",
				"name" : "IsInteractive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the context on a component using a specified context object id (type + objectid) to get it from the cache",
				"name" : "SetContextFromId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the localisation string sources for the component text",
				"name" : "CurrentTextLocalisationStrings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Toggles a highlighting effect on the component to make it easier to find",
				"name" : "ToggleHighlight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if the mouse is currently over this component",
				"name" : "IsMouseOver",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the sound category of the component",
				"name" : "SoundCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "sound" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Rotates the specified image index by the specified angle in degrees",
				"name" : "RotateImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context with the specified type id on any of our parents,  and will assert if it fails",
				"name" : "StoredContextRequiredFromParent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns true if visible and all parents to root are visible (meaning it can actually be seen by player if in the bounds of the screen and not occluded)",
				"name" : "IsVisibleFromRoot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Gets the values set for a given animation property on a specific frame of an animation on this component.",
				"name" : "GetAnimationFrameProperty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the current tooltip for the component",
				"name" : "CurrentTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the visibility of the component based on specified bool",
				"name" : "SetVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the index we are in our parents child list",
				"name" : "ChildIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current text for the component",
				"name" : "CurrentText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Resizes this component to the specified size",
				"name" : "Resize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list engine tied to the component if valid",
				"name" : "ListLayoutContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoListLayout"
				}
			},
			
			{
				"doc" : "Returns true if visible property is set (can be true if this is visible but not parent)",
				"name" : "IsVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context with the specified type id and will assert if it fails",
				"name" : "StoredContextRequired",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets a component to be a topmost object, meaning it will render on top of everything else",
				"name" : "SetIsTopmostObject",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Sets the specified property on a specific frame of a given animation on this component.",
				"name" : "SetAnimationFrameProperty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Changes the relative position of the component to the position specified",
				"name" : "MoveToRelative",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the last update time of the component matches the root i.e. did update this frame",
				"name" : "IsUpdating",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Destroys this component",
				"name" : "Trash",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returnstrue if supplied guid is same as ours",
				"name" : "IsSameGuid",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the component is a topmost object, meaning it will render on top of everything else",
				"name" : "IsTopmostObject",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this component is the current focus (for example if a text input typing into)",
				"name" : "IsActiveFocus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "CallbackStoreList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCallbackExpressionStore"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context with the specified type id (if one exists) on any of our parents",
				"name" : "StoredContextFromParent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Finishes the current animation instantly if there is one playing",
				"name" : "FinishCurrentAnimationInstantly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Changes the absolute position of the component to the position specified",
				"name" : "MoveToAbsolute",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "This is the guid id to use when using conditional breakpoints, can just use CopyDebugGuidToClipboard to make this process smoother",
				"name" : "GuidOriginalDebugID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns all context callbacks, context objects and functions as one big string for viewing in context viewer",
				"name" : "ContextCallbacks",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets a property on the component using the supplied key and value",
				"name" : "SetProperty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Triggers the specified animation",
				"name" : "TriggerAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets list offset on component (only works if in a list)",
				"name" : "SetListOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if any image on component is currently set to placeholder due to image tried to set not existing",
				"name" : "HasPlaceholderImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context with the specified type id (if one exists)",
				"name" : "StoredContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "This is the globally unique id that the layout has in uied, but not the same necessarily it has in game since gets regenerated to ensure uniqueness. Useful for debug breakpoints",
				"name" : "GuidOriginal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns list of all contexts stored on this component and its callbacks",
				"name" : "ContextsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns true if component is in an active state",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Clears the current priority lock",
				"name" : "ClearPriorityLock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current animations id if any",
				"name" : "CurrentAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets dock offset on component (only works if already docked)",
				"name" : "SetDockOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if in a selected state",
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if component dimensions are the same as the root component dimensions (so same size as screen). Used to easily toggle child components on based on if a panel is occupying whole of screen for example.",
				"name" : "IsFullscreen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "This is the globally unique id has currently in game, for layouts created in game will be different to UiEd as we regenerate to ensure unique",
				"name" : "Guid",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns whether the component have a specific callback",
				"name" : "HasCallback",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Pushes a priority lock, any component with a priority under the value supplied will be made non-interactive",
				"name" : "PushPriorityLock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the dock point using specified string key (tl, tc, tr, cl, c, cr, bl, bc, tle, tce, tre, cle, ce, cre, ble, bce, bre)",
				"name" : "SetDockPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of the animations on the component as a string",
				"name" : "AnimationList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the current state name as a string",
				"name" : "CurrentState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Breaks into code when attached to VS so can inspect internal component in greater detail",
				"name" : "BreakForDebugging",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns a CcoSpineController context for the component if it has a spine controller",
				"name" : "SpineContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineController"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets the priority of the component to the supplied priority",
				"name" : "SetPriority",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Clears specified context type, and propagates if specified",
				"name" : "ClearContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current name of the current font category in the current state",
				"name" : "FontCategoryName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the child with the id specified (essentially does a find from this component, so child doesnt have to be direct children of us but can be a child of a child)",
				"name" : "ChildContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets the size of the image metric on the current state",
				"name" : "SetImageMetricSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the image path of the image at the specified index",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns number of children",
				"name" : "NumChildren",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the components interactive flag to the specified bool value, and if specify false as a second parameter will just apply to current state (defaults to all states). Interactivity determines if a component can handle mouse interactions like clicks and mouseovers",
				"name" : "SetInteractive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a CcoComponentModelView context for the component if it has a model view (3d model display)",
				"name" : "ModelViewContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponentModelView"
				}
			},
			
			{
				"doc" : "Returns a string that represents the tooltip text for the component",
				"name" : "ShortcutKeyText",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the parent component if we have one",
				"name" : "ParentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets the colour of the debug display activated with ToggleDebugDisplay. Useful for when debugging layout engines within layout engines for example",
				"name" : "SetDebugDisplayColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Exports the current component and its children to an xml located in working_data/UI/GameLayoutExports",
				"name" : "ExportComponentAndChildrenToXML",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns list of all image paths as string with each path on new line",
				"name" : "ImageList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the current dimensions of the component",
				"name" : "Dimensions",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the state of the component to the supplied state",
				"name" : "SetState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if has any children",
				"name" : "HasChildren",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Clears any tooltip created with CustomTooltipCreate",
				"name" : "CustomTooltipClear",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Enables/disables debug display which helps to visualise the bounds of this component and any additional debug info",
				"name" : "EnableDebugDisplay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns list of all children",
				"name" : "ChildList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"doc" : "Copies the debug guid to clipboard so can set conditional breakpoints easily",
				"name" : "CopyDebugGuidToClipboard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Exports the entire layout that the current component is in to an xml located in working_data/UI/GameLayoutExports",
				"name" : "ExportLayoutToXML",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			}
		]
	},
	"CcoComponentModelView" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a Components model view, so can get/set model/camera info",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoComponentModelView",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the cameras distance from the target",
				"name" : "SetCameraDistance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the camera field of view in degrees",
				"name" : "SetCameraFov",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the camera phi orientation in degrees",
				"name" : "SetCameraPhi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the camera theta orientation in degrees",
				"name" : "SetCameraTheta",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the environment filepath that is being used (that affects lighting)",
				"name" : "EnvironmentFilepath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the x,y,z,0 of the cameras target position",
				"name" : "CameraTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the distance of the camera from the target",
				"name" : "CameraDistance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the field of view of the camera in degrees",
				"name" : "CameraFov",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the phi angle for the orientation of the camera in degrees",
				"name" : "CameraPhi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the pheta angle for the orientation of the camera in degrees",
				"name" : "CameraTheta",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Sets the cameras target position",
				"name" : "SetCameraTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoContextExpression" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoContextExpression",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"name" : "EvaluateExpression",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"name" : "TextRepresentation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoContextExpressionCompilationError" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoContextExpressionCompilationError",
		"symbols" : 
		[
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoContextExpressionResult" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoContextExpressionResult",
		"symbols" : 
		[
			
			{
				"name" : "HasStringRepresentation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ResultType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoContextObjectType"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			}
		]
	},
	"CcoContextExpressionRuntimeError" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoContextExpressionRuntimeError",
		"symbols" : 
		[
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoContextHistoryObject" : 
	{
		"area" : "Common",
		"is_persistent" : false,
		"is_temporary" : true,
		"name" : "CcoContextHistoryObject",
		"symbols" : 
		[
			
			{
				"name" : "Time",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Reason",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "ContextObjectId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "CcoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"name" : "OriginComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"name" : "CallbackId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "ContextId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoContextList" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoContextList",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the list is empty",
				"name" : "IsEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list in the opposite order",
				"name" : "Reverse",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Skip the first x elements of the list",
				"name" : "Skip",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if supplied context exists in the list",
				"name" : "Contains",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the first N elements of the list",
				"name" : "Take",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the number of elements in the list",
				"name" : "Size",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Sort based on a function that expects left and right and returns true if their relative position is correct and false if they need to swap places ",
				"name" : "BSort",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns a list of CcoSummedValueContext, where the first expression supplied is to determine what groups two contexts, and the second expression is used to calculate the value for each context for summing the values",
				"name" : "SummedValueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"name" : "CompareSort",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the list sorted by the given expression, pass true for second parameter to sort in ascending order (defaults to descending)",
				"name" : "Sort",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the distinct elements of the list",
				"name" : "Distinct",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Returns a list with at least N number of elements. If the original list had less than N elements, the new elements will be either CcoEmptyObject or the object returned by the given expression.",
				"name" : "PadRight",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns a list with all the elements of the given list that satisfy the condition.",
				"name" : "Filter",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns a list new list, containing the current list's elements + any elements passed in as an argument (the argument must be a context expression, and must return either a single context object or another context object list).",
				"name" : "Append",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns true if any of the contexts return true for the given expression",
				"name" : "Any",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the number of elements that satisfy the given expression",
				"name" : "Count",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns true if all the contexts return true for the given expression",
				"name" : "All",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the largest value evaluated for each context in the list using expression",
				"name" : "MaxValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the smallest value evaluated for each context in the list using expression",
				"name" : "MinValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Performs the supplied expression on each context",
				"name" : "ForEach",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Transforms the list into a new one where each element is produced by the given expression",
				"name" : "Transform",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the context with the largest value evaluated for each context in the list using expression",
				"name" : "MaxContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Given a context that exists in the list, returns the next context if one exists, will also wrap around the end of the list. If list only has one element will return the one element",
				"name" : "NextContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the context at the specified index",
				"name" : "At",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the context with the smallest value evaluated for each context in the list using expression",
				"name" : "MinContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Given a context that exists in the list, returns the previous context if one exists, will also wrap around the beginning of the list. If list only has one element will return the one element",
				"name" : "PreviousContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the last context by default, if supply an expression as a parameter it will return the last context that returns true for the condition and otherwise return null",
				"name" : "LastContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the subset of the list at the point where the first context matches the given expression",
				"name" : "Partition",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"name" : "FindIf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the index of the first context that returns true for the supplied expression",
				"name" : "IndexForFirstContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns a combined string using the first expression to determine how to get the string for each context, and splitting each entry with the supplied separator",
				"name" : "JoinString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the first context by default, if supply an expression as a parameter it will return the first context that returns true for the condition and otherwise return null",
				"name" : "FirstContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Reduces the list based on given predicate starting at optional initialiser value",
				"name" : "Reduce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "Find",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Accumulates the values returns by each contexts expression (for adding up totals)",
				"name" : "Sum",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"doc" : "Returns internal list of contexts",
				"name" : "List",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoContextObjectType" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoContextObjectType",
		"symbols" : 
		[
			
			{
				"name" : "IsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsArithmetic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "HasStringRepresentation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "SymbolsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoContextSelection" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoContextSelection",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoComponent that has the selection parent that is sending us",
				"name" : "SelectionParentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"doc" : "Returns the context currently mousing over if we have one",
				"name" : "MouseOverContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the first selected context object",
				"name" : "FirstObject",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the list of selected context objects",
				"name" : "SelectedObjectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoContextSymbol" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoContextSymbol",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"name" : "EvaluateSymbol",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"name" : "IsCommand",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Documentation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "TypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoContextObjectType"
				}
			},
			
			{
				"name" : "Tags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCookingDish" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a COOKING_DISH struct",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCookingDish",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoEffect with the faction effects provided by this dish",
				"name" : "FactionEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect with the faction leader effects provided by this dish",
				"name" : "FactionLeaderEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCookingIngredientRecord with the ingredients of this dish",
				"name" : "IngredientList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCookingRecipeRecord with the recipe record of this dish",
				"name" : "CookingDishRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCookingRecipeRecord"
				}
			},
			
			{
				"doc" : "Returns the number of rounds left on the active dish effect",
				"name" : "RoundsLeft",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect with the allied unit effects provided by this dish",
				"name" : "AlliedUnitEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffect with the enemy unit effects provided by this dish",
				"name" : "EnemyUnitEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			}
		]
	},
	"CcoCookingIngredientGroupRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCookingIngredientGroupRecord",
		"symbols" : 
		[
			
			{
				"name" : "FlavourText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Ingredients",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCookingIngredientRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a COOKING_INGREDIENT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCookingIngredientRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a string with the key of the ingredient",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of all ingredients in the db",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCookingIngredientGroupRecord with the group the ingredient is part of",
				"name" : "GroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCookingIngredientGroupRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the allied unit effect list of this ingredient",
				"name" : "AlliedUnitEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the enemy unit effect list of this ingredient",
				"name" : "EnemyUnitEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the faction leader effect list context",
				"name" : "FactionLeaderEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the faction effect list context",
				"name" : "FactionEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns an int with the VO enum type",
				"name" : "IngredientVOTrigger",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the index of the db record",
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a localised string with the text displaying how to unlock the ingredient",
				"name" : "DisplayUnlockText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a localised string with the flavour text/description of the ingredient",
				"name" : "FlavourText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a localised string with the display text/name of the ingredient",
				"name" : "DisplayText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the icon path of the ingredient",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCookingRecipeRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a COOKING_RECIPE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCookingRecipeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a localised string with the flavour text/description of the recipe",
				"name" : "FlavourText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a localised string with the display text/name of the recipe",
				"name" : "DisplayText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the icon of the recipe",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string with the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingIngredientRecord"
					}
				],
				"doc" : "Returns true if the passed in ingredient is part of the required ingredients for this recipe",
				"name" : "IsRequiredIngredient",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of all recipes from the db",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingRecipeRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the allied unit effect list of this recipe",
				"name" : "AlliedUnitEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the enemy unit effect list of this recipe",
				"name" : "EnemyUnitEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the faction leader effect list of this recipe",
				"name" : "FactionLeaderEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignEffectListRecord with the faction effect list of this recipe",
				"name" : "FactionEffectsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectListRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoResourceCostRecord with the cost of this recipe",
				"name" : "ResourceCostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoResourceCostRecord"
				}
			},
			
			{
				"doc" : "Returns true if this recipe requires a specific ingredient",
				"name" : "RequiresSpecificIngredient",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the VO type",
				"name" : "CookingRecipieVO",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the duration of the recipe",
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the db index of this recipe",
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoCookingSystem" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for the cooking system for a given faction",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCookingSystem",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingRecipeRecord"
					}
				],
				"doc" : "Returns true if the passed in recipe has all the ingredients unlocked and not on cooldown",
				"name" : "HasValidIngredientsForRecipe",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCookingDish with the dishes applied to all units",
				"name" : "DishesAppliedToAllUnitsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingDish"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingDish"
					}
				],
				"doc" : "Reverts the passed in cooking dish on the passed in unit",
				"name" : "RevertDishAppliedToUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"doc" : "Returns a list of CcoCookingDish with the dishes applied to the passed in unit",
				"name" : "DishesAppliedToUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingDish"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingIngredientRecord"
					}
				],
				"doc" : "Returns an int with the cooldown of the passed in ingredient (returns 0 if not on cooldown)",
				"name" : "IngredientCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCookingDish with all stored cooking dishes",
				"name" : "StoredCookingDishList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingDish"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCookingIngredientGroupRecord with all ingredient categories",
				"name" : "PossibleIngredientCategories",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientGroupRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingDish"
					}
				],
				"doc" : "Returns an int with the number of dishes stored of the dish passed in",
				"name" : "StoredAmountForDish",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingIngredientGroupRecord"
					}
				],
				"doc" : "Returns a list of CcoCookingIngredientRecord for the CcoCookingIngredientGroupRecord passed in",
				"name" : "PossibleIngredientsForCategory",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingRecipeRecord"
					}
				],
				"doc" : "Returns an int with the number of dishes stored for the passed in recipe",
				"name" : "StoredAmountForRecipe",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Returns true if the passed in ingredients can be cooked into a valid dish",
				"name" : "CanCookIngredients",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingIngredientGroupRecord"
					}
				],
				"doc" : "Returns true if any ingredient from the passed in CcoCookingIngredientGroupRecord is unlocked",
				"name" : "AnyIngredientOfCategoryIsUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if the slot with the passed in number is unlocked. Needs to also pass true for whether should check primary slots, or false for secondary slots",
				"name" : "IngredientSlotIsUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingIngredientRecord"
					}
				],
				"doc" : "Returns true if the passed in CcoCookingIngredientRecord is unlocked",
				"name" : "IngredientIsUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the maximum number of allowed secondary ingredients",
				"name" : "MaximumNumberOfSecondaryIngredients",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the maximum number of allowed primary ingredients",
				"name" : "MaximumNumberOfPrimaryIngredients",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingRecipeRecord"
					}
				],
				"doc" : "Returns a list of CcoCookingIngredientRecord for the CcoCookingRecipeRecord passed in",
				"name" : "AllIngredientsUnlockedForRecipe",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoCookingDish with the current dish context",
				"name" : "CurrentActiveDishContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCookingDish"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingRecipeRecord"
					}
				],
				"doc" : "Returns true if the passed in CcoCookingRecipeRecord is unlocked",
				"name" : "RecipeIsUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if a dish is currently active",
				"name" : "IsDishActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCookingRecipeRecord with all recipes",
				"name" : "GetPossibleRecipeRecords",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingRecipeRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCookingIngredientRecord with all ingredients",
				"name" : "GetPossibleIngredientRecords",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Calls a CCQ command to cook the primary and secondary CONTEXT_LIST ingredients passed in",
				"name" : "CookIngredients",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingIngredientRecord"
					}
				],
				"doc" : "Dev command to unlock the passed in ingredient",
				"name" : "DevUnlockIngredient",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns a list of CcoCookingRecipeRecord with all the unlocked recipes",
				"name" : "GetUnlockedRecipeRecords",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingRecipeRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingRecipeRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a list of CcoCookingIngredientRecord with secondary ingredients needed for the CcoCookingRecipeRecord passed in",
				"name" : "SecondaryIngredientsForRecipe",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientRecord"
				}
			},
			
			{
				"doc" : "Dev command to unlock all recipes",
				"name" : "UnlockAllRecipes",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns a list of CcoCookingIngredientRecord with all the unlocked ingredients",
				"name" : "GetUnlockedIngredientRecords",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingRecipeRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns a list of CcoCookingIngredientRecord with primary ingredients needed for the CcoCookingRecipeRecord passed in",
				"name" : "PrimaryIngredientsForRecipe",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCookingIngredientRecord"
				}
			},
			
			{
				"doc" : "Dev command to unlock all ingredients",
				"name" : "UnlockAllIngredients",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Returns a CcoCookingRecipeRecord that would result from the primary and secondary CONTEXT_LIST ingredients passed in",
				"name" : "RecipeForIngredients",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCookingRecipeRecord"
				}
			}
		]
	},
	"CcoCorruptionCounterIntervalRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CORRUPTION_COUNTER_INTERVAL_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCorruptionCounterIntervalRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all intervals in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCorruptionCounterIntervalRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns what percentage this interval takes out of a max value passed in",
				"name" : "SegmentPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the upper bound of the interval",
				"name" : "UpperBound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the lower bound of the interval",
				"name" : "LowerBound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCorruptionTypeRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CORRUPTION_TYPE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCorruptionTypeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Return the unique key for the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Return the colour of the corruption record",
				"name" : "CorruptionColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Return the optional icon path for the corruption type",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns list of all corruption types in the db",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCorruptionTypeRecord"
				}
			},
			
			{
				"doc" : "Return the localised name for the corruption type for display in the UI",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Return the tile upgrade name that gets applied as tile upgrade to battle when corruption active",
				"name" : "BattleTileUpgradeString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCultureRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a culture record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCultureRecord",
		"symbols" : 
		[
			
			{
				"name" : "FramePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsTzeentch",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "LargeImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsSlaanesh",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsSkaven",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCultureRecord"
				}
			},
			
			{
				"name" : "IsOgreKingdoms",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "UiBackgroundImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsNurgle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Fallback",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsLizard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Not Implemented",
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsKhorne",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsGreenskins",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsDaemon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "GroupByCulture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "FrontendDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "QuestBattleGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceFrontendGroupRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "GroupedUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoGroupList"
				}
			},
			
			{
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattlePermissionRecord"
				}
			},
			
			{
				"name" : "StripLargeImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "StripImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoCustomBattleArmyPreset" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for an army preset that can be saved / loaded",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoCustomBattleArmyPreset",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the preset is valid. Invalid files either failed to load or did not pass DLC checks",
				"name" : "IsValid",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the raw time stamp",
				"name" : "TimeStampRaw",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cost of reinforcing units of the army",
				"name" : "ReinforcingArmyCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cost of the main army",
				"name" : "MainArmyCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the key of the faction that this is a preset for",
				"name" : "FactionKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns timestamp formatted with given string",
				"name" : "TimeStampFormat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the preset",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a context to the battle type stored in the preset",
				"name" : "BattleTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleTypeRecord"
				}
			},
			
			{
				"doc" : "Returns a context to the faction that this preset stores an army for",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"doc" : "Returns a list of siege equipment saved in the army preset",
				"name" : "SiegeEquipmentList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattlefieldSiegeVehicleRecord"
				}
			},
			
			{
				"doc" : "Toggles the preset as pinned in the save / load army presets panel",
				"name" : "TogglePinned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of reinforcing units saved in the army preset",
				"name" : "ReinforcingUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns a list of unit saved in the army preset",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Removes the army preset from the filesystem, and removes it from the context cache",
				"name" : "Delete",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattlePlayerSlot"
					}
				],
				"doc" : "Loads the preset for the given player slot context",
				"name" : "LoadForPlayerSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the preset is hidden to save / load panel",
				"name" : "IsHidden",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this army preset is pinned in the save / load army preset panel",
				"name" : "IsPinned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this army preset was saved with a custom budget",
				"name" : "IsCustomBudget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCustomBattleArmyPresetFileHandler" : 
	{
		"area" : "Common",
		"doc" : "Singleton wrapper for army preset file handler",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleArmyPresetFileHandler",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a list of army presets saved to disk",
				"name" : "ArmyPresetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleArmyPreset"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if an army preset exists with the given filename",
				"name" : "ArmyPresetExists",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Saves army preset once the overwrite operation has been accepted",
				"name" : "ConfirmSaveOverwrite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattlePlayerSlot"
					}
				],
				"doc" : "Saves the provided player slot's army with name given as the first argument",
				"name" : "SaveArmyPresetForPlayerSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCustomBattleCorruptionType" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for the corruption type setting in custom battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleCorruptionType",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the record context (which can be null)",
				"name" : "RecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCorruptionTypeRecord"
				}
			},
			
			{
				"doc" : "Returns the localised name for the corruption type to display in the UI",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCustomBattleFactionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleFactionRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CultureSortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCustomBattleLobby" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for the custom battle lobby",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleLobby",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if lobby is currently active/in use",
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if can currently invite a player to the lobby",
				"name" : "CanInvite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCustomBattleArmyPresetFileHandler context which handles loading/saving army presets",
				"name" : "ArmyPresetFileHandlerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleArmyPresetFileHandler"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleResult for an autoresolve simulation of units armies currently in the lobby",
				"name" : "AutoresolveBattleResultsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleResult"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if the player can no longer change their faction",
				"name" : "IsLocalPlayerFactionLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the host players CcoCustomBattlePlayerSlot",
				"name" : "HostSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Returns true if the local player is ready to play",
				"name" : "IsLocalPlayerReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the local player is currently spectating",
				"name" : "IsLocalPlayerSpectating",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the local players CcoCustomBattlePlayerSlot",
				"name" : "LocalPlayerSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Returns the CcoCustomBattleSettings context that handles settings for lobby",
				"name" : "SettingsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettings"
				}
			},
			
			{
				"doc" : "Returns true if the local player is currently the host",
				"name" : "IsLocalPlayerHost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a single player lobby (custom battle)",
				"name" : "IsSinglePlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of CcoCustomBattlePlayerSlot that are currently spectators",
				"name" : "SpectatorSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Returns true if this lobby is for a matchmade quick battle",
				"name" : "IsMatchmadeBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "For dev purposes, sets corruption tile type for trying out different corruptions in battles to make testing easier for env artists",
				"name" : "DevUISetCorruptionTileType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns list of CcoCustomBattlePlayerSlot that are active in lobby",
				"name" : "PlayerSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Adds a new spectator slot to lobby",
				"name" : "AddSpectatorSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns list of CcoCustomBattleTeam that are active in lobby",
				"name" : "TeamList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleTeam"
				}
			},
			
			{
				"doc" : "Returns the current auto/faction lock/commencement countdown in seconds (only used in quick battles). Returns -1 if not active",
				"name" : "CountdownTimeSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of active players in the lobby",
				"name" : "NumberOfPlayers",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Toggles ready-for-faction-lock status of player",
				"name" : "ToggleFactionLockReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of player slots in the lobby",
				"name" : "NumberOfPlayerSlots",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Toggles ready status of player",
				"name" : "ToggleReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the current phase is faction selection (ready button locks in faction rather than starts game)",
				"name" : "IsFactionSelectionCountdownPhase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a simulate autoresolve balance of power based on armies in the lobby",
				"name" : "LocalBalanceOfPowerPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if should use small card format (based on resolution)",
				"name" : "IsUsingSmallCards",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns ready button text",
				"name" : "ReadyButtonText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the current state to set on the ready button for local player",
				"name" : "ReadyButtonState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if can currently add a spectator slot",
				"name" : "CanAddSpectatorSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the text used on tooltip for ready button (to show ready errors)",
				"name" : "ReadyStatusText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if the ready countdown is active (active once all players readied up)",
				"name" : "IsReadyCountdownActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if can use autoresolve simulation",
				"name" : "CanAutoResolve",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the default CcoCustomBattlePlayerSlot to select when entering lobby (default army shown)",
				"name" : "DefaultSelectedPlayerSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			}
		]
	},
	"CcoCustomBattleMap" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a custom map",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleMap",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the clickgen region name",
				"name" : "ClickgenRegionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the map",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the battle type for the map",
				"name" : "BattleTypeString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the climate context for the map",
				"name" : "ClickgenClimateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoClimateRecord"
				}
			},
			
			{
				"doc" : "Returns the campaign map record context for the map",
				"name" : "CampaignMapRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapPlayableAreaRecord"
				}
			},
			
			{
				"doc" : "Returns string containing technical details about the map",
				"name" : "DevInfo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the campaign battle preset context for the map",
				"name" : "CampaignBattlePresetRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBattlePresetRecord"
				}
			},
			
			{
				"doc" : "Opens the terrain.html file in your appdata/logs folder so you can see more details about the current selected map in custom battle",
				"name" : "OpenTerrainHTML",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the battle context for the map",
				"name" : "BattleRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleRecord"
				}
			},
			
			{
				"doc" : "Toggled this map as pinned in custom battle UI",
				"name" : "TogglePinned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Toggles this map as a favourite",
				"name" : "ToggleFavourite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the map is pinned in custom battle UI",
				"name" : "IsPinned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the map is favourited",
				"name" : "IsFavourite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the map is a preset",
				"name" : "IsPreset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the raw clickgen co-ordinates",
				"name" : "ClickgenCoordsRaw",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the clickgen co-ordinates",
				"name" : "ClickgenCoords",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the clickgen ground type",
				"name" : "ClickgenGroundTypeName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the clickgen province name",
				"name" : "ClickgenProvinceName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCustomBattlePlayerSlot" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattlePlayerSlot",
		"symbols" : 
		[
			
			{
				"name" : "IsHost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumSiegeVehiclesAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetSubculture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocalPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanInvite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SlotIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionsForCulture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanSwitchTeam",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsRecruitingReinforcements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AvailableSubcultureList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SiegeVehicleTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanViewUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SubcultureContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NetworkPlayerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanSelectFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionSavedCharactersContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AvailableFactionList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TooltipForUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanModifyUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetIsRecruitingReinforcements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanRecruitUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayerName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AutogenerateReinforcements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanModifySlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RemoveSiegeEquipment",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsFactionVisibleToLocalPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanKickOrRemove",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AddSiegeEquipment",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AutogenerateMainArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsSpectator",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsUsingAutogenUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GetReinforcementFundsMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanAddSiegeEquipment",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AutogenerateUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FundsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SiegeEquipmentList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ClearReinforcements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GetTotalBudget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AvailableSiegeEquipmentList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ClearMainArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ClearUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FundsBudget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAvailableForAutogenForDev",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsHuman",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecruitUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TeamContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleAutogenAvailabilityForDev",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReinforcingUnitList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAllocated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SwitchTeam",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitListForUnitGroupParent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "KickPlayerInSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TooltipToModifyUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CycleFactionForCurrentSubculture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsTeamLeader",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RemovePlayerSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsSynchronisedWithLobby",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AvailableFactionsForCurrentSubcultureList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoCustomBattleSettingRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a CUSTOM_BATTLE_SETTING_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleSettingRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all custom battle settings in the db",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns the value of the custom battle setting",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the key of the custom battle setting",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the name of the custom battle setting",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCustomBattleSettings" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for the settings of custom battles",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleSettings",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the value of the ai stats modifier setting",
				"name" : "BattleAiStatsModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the given context as the time of day setting",
				"name" : "SetTimeOfDaySettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the maximum number of units that can reinforce",
				"name" : "MaxUnitsCanReinforce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether the attacking team can be toggled (switched), some battle types do not allow toggling",
				"name" : "CanToggleAttackingTeam",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether custom battle settings can be changed",
				"name" : "CanChangeSettings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if storm of magic setting available to use (currently just a dev thing accessible via dev_custom_battle tweaker",
				"name" : "IsStormOfMagicAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether a commander is required before the battle can start",
				"name" : "IsCommanderRequiredFirst",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the laboratory info",
				"name" : "LaboratoryInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleLaboratoryInfo"
				}
			},
			
			{
				"doc" : "Returns whether this battle has attackers and defenders",
				"name" : "HasAttackerDefender",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the maximum number of units that can currently be recruited",
				"name" : "MaxUnitsCanRecruit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether reinforcing units are used",
				"name" : "IsUsingReinforcingUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of available setting records for times of day",
				"name" : "TimeOfDaySettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns whether storm of magic setting enabled (storm of magic is for warhammer, where magic is greatly empowered and the lore boosted changes every so often)",
				"name" : "IsStormOfMagicEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a context to the unit scale setting",
				"name" : "UnitScaleSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns a list of currently available custom battle maps",
				"name" : "MapPresetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleMap"
				}
			},
			
			{
				"doc" : "Returns a context to the time of day setting",
				"name" : "TimeOfDaySettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the given context as the unit scale setting",
				"name" : "SetUnitScaleSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether this battle has attackers and defenders",
				"name" : "HasTwoAlliances",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether this is a settlement battle type",
				"name" : "IsSettlementBattleType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of available unit scale settings",
				"name" : "UnitScaleSettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggles unit caps",
				"name" : "ToggleLoadingCharacters",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the given context as the escalation level setting",
				"name" : "SetEscalationLevelSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a context to the current map",
				"name" : "MapContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleMap"
				}
			},
			
			{
				"doc" : "Returns whether this is a siege battle type",
				"name" : "IsSiegeBattleType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the index of the attacking team",
				"name" : "AttackingTeamIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Sets the given amount as the custom funds limit",
				"name" : "SetCustomFundsAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether unit set caps are enforced",
				"name" : "IsLoadingCharactersEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleCorruptionType"
					}
				],
				"doc" : "Sets corruption type for map supplying a CcoCorruptionTypeRecord, if pass empty then removes any corruption type (has visual impact on battlefield)",
				"name" : "SetCorruptionTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of available escalation level settings",
				"name" : "EscalationLevelSettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the given context as the fund type setting",
				"name" : "SetFundTypeSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of available battle types for custom battle",
				"name" : "BattleTypeRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleTypeRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the given context as the difficulty level",
				"name" : "SetDifficultyLevelSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a context to the escalation level setting",
				"name" : "EscalationLevelSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggles unit caps",
				"name" : "ToggleUnitCaps",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of available CcoCorruptionTypeRecord",
				"name" : "CorruptionTypeRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleCorruptionType"
				}
			},
			
			{
				"doc" : "Returns a list of available difficulty levels",
				"name" : "DifficultyLevelSettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns a context to the battle type",
				"name" : "BattleTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleTypeRecord"
				}
			},
			
			{
				"doc" : "Returns the amount of the custom budget if being used",
				"name" : "CustomBudgetAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the value of the current custom ticket limit",
				"name" : "CustomTicketLimitAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether unit set caps are enforced",
				"name" : "IsUsingUnitCaps",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the given context as the settlement level setting",
				"name" : "SetSettlementLevelSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoCorruptionTypeRecord being used for the corruption setting, null if none (has visual impact on battlefield)",
				"name" : "CorruptionTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleCorruptionType"
				}
			},
			
			{
				"doc" : "Returns whether custom funds amount is being used",
				"name" : "IsUsingCustomFunds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a context to the difficulty level",
				"name" : "DifficultyLevelSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggles multiple lords enabled bool",
				"name" : "ToggleMultipleLords",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggles large armies setting",
				"name" : "ToggleIsUsingLargeArmies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if currently using custom ticket limit",
				"name" : "IsUsingCustomTicketLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the given time limit setting context",
				"name" : "SetTimeLimitSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Returns the cost for the given settlement level context",
				"name" : "CostForSettlementLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSeasonRecord"
					}
				],
				"doc" : "Sets the given context as the season",
				"name" : "SetSeasonRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of available setting records for funds",
				"name" : "FundTypeSettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleMap"
					}
				],
				"doc" : "Sets the given custom map context as the current map",
				"name" : "SetMapContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether a time limit is used",
				"name" : "IsTimeLimitUsed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of available settlement level settings",
				"name" : "SettlementLevelSettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns whether large armies can be used",
				"name" : "CanUseLargeArmies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether we can use multiple lords",
				"name" : "IsMultipleLordsEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Sets the given amount as the custom ticket limit",
				"name" : "SetCustomTicketLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a context to the fund type setting",
				"name" : "FundTypeSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns a list of available season records",
				"name" : "SeasonRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSeasonRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggle the split funds mode",
				"name" : "ToggleSplitFunds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCustomBattleSettingRecord"
					}
				],
				"doc" : "Sets the ticket limit setting value",
				"name" : "SetTicketLimitSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether timeouts result in a draw",
				"name" : "IsTimeoutDraw",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a context to the settlement level setting",
				"name" : "SettlementLevelSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns whether large armies are being used",
				"name" : "IsUsingLargeArmies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleTypeRecord"
					}
				],
				"doc" : "Sets the given context as the battle type",
				"name" : "SetBattleTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the game type has a configurable ticket limit",
				"name" : "HasConfigurableTicketLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a context to the season record",
				"name" : "SeasonRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSeasonRecord"
				}
			},
			
			{
				"doc" : "Returns a context list of time limit settings",
				"name" : "TimeLimitSettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns a list of custom battle maps that have settlements",
				"name" : "SettlementMapList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleMap"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggles realism mode",
				"name" : "ToggleRealismMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether can use the split funds mode",
				"name" : "CanUseSplitFunds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggles the lab mode on/off",
				"name" : "ToggleLabMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a context to the setting record for time limit",
				"name" : "TimeLimitSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBattleWeatherTypeRecord"
					}
				],
				"doc" : "Sets the given context as the weather type",
				"name" : "SetWeatherTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a context list of ticket limit settings",
				"name" : "TicketLimitSettingList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"doc" : "Returns a list of favourited custom battle maps",
				"name" : "FavouriteMapList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleMap"
				}
			},
			
			{
				"doc" : "Returns true if current battle type supports adding of AI",
				"name" : "CanAddAi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether realism mode is being used",
				"name" : "IsRealismMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of available records for weather types",
				"name" : "WeatherTypeRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleWeatherTypeRecord"
				}
			},
			
			{
				"doc" : "Returns if lab mode has been chosen for this battle",
				"name" : "IsLabMode",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of custom battle map history",
				"name" : "HistoryMapList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleMap"
				}
			},
			
			{
				"doc" : "Returns true if split funds mode is enabled",
				"name" : "IsSplitFundsEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the time limit of the battle in seconds",
				"name" : "TimeLimitSeconds",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a context to the setting record for ticket limit",
				"name" : "TicketLimitSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleSettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Chooses a random map and sets it as the current map",
				"name" : "ChooseRandomMap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether this is a free for all battle",
				"name" : "IsFreeForAll",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Switches the attacking team",
				"name" : "ToggleAttackingTeam",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Toggles storm of magic setting (storm of magic is for warhammer, where magic is greatly empowered and the lore boosted changes every so often)",
				"name" : "ToggleStormOfMagic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a string representation of the battle type",
				"name" : "CampaignBattleTypeString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a context to the weather type record",
				"name" : "WeatherTypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleWeatherTypeRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the value of the ai stats modifier setting",
				"name" : "SetBattleAiStatsModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Forces settings to be resynced",
				"name" : "ForceSettingResync",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the co-ord at index give ('x' or 'y'), to the value given",
				"name" : "SetMapCoordinate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether can enable storm of magic setting (not matchmade and not survival battle)",
				"name" : "CanEnableStormOfMagic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCustomBattleTeam" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for the custom battle team",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleTeam",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if this is the attacking team",
				"name" : "IsAttacker",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the team contains any human players",
				"name" : "HasHumansOnTeam",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the numeric index of this team (team id)",
				"name" : "TeamIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the default CcoCustomBattlePlayerSlots that should be selected for the player on this team (when players/added removed, etc)",
				"name" : "DefaultSelectedPlayerSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Returns the CcoCustomBattlePlayerSlots that is the current team leader for this team",
				"name" : "TeamLeaderPlayerSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Returns list of CcoCustomBattlePlayerSlots on this team",
				"name" : "PlayerSlotList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Adds an AI slot to this team",
				"name" : "AddAIBot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Adds an open player slot to this team for a player to join",
				"name" : "AddPlayerSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if can add an AI slot to this team",
				"name" : "CanAddAI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of slots that can be added to this team",
				"name" : "NumPlayerSlotsCanAdd",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if can add a player slot to this team",
				"name" : "CanAddPlayerSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoCustomBattleUnit" : 
	{
		"area" : "Common",
		"doc" : "Context object for a given player/unit/reinforcement slot combo",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleUnit",
		"symbols" : 
		[
			
			{
				"doc" : "Increases the level of the unit associated with the unit index stored on this context",
				"name" : "IncreaseExperience",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitsCustomBattleMountRecord associated with the unit index stored on  this context",
				"name" : "CurrentMountRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattleMountRecord"
				}
			},
			
			{
				"doc" : "Removes this unit from the player slot",
				"name" : "RemoveUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitDetails associated with this unit index stored on this context",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitsCustomBattlePermissionRecord record associated with the unit index stored on this context",
				"name" : "CustomBattleUnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattlePermissionRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitsCustomBattleMountRecord"
					}
				],
				"doc" : "Returns whether the unit index stored on this context can change mount",
				"name" : "CanAffordMount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoMainUnitRecord associated with the unmounted version of the unit index stored on this context",
				"name" : "UnmountedRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitsCustomBattleMountRecord"
					}
				],
				"doc" : "Returns whether the unit index stored on this context can change mount",
				"name" : "CanChangeMount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoMainUnitRecord associated with the unit index stored on  this context",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoCustomBattlePlayerSlot associated with the slot index stored on  this context",
				"name" : "PlayerSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattlePlayerSlot"
				}
			},
			
			{
				"doc" : "Returns whether the unit associated with the unit index stored on this context has an armory",
				"name" : "HasArmory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the unit associated with the unit index stored on this context is a loaded character",
				"name" : "IsPersistentCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns variants for this unit, eg different ammo or spell lore overrides",
				"name" : "UnitTypes",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattleTypeRecord"
				}
			},
			
			{
				"doc" : "Returns the current CcoCustomBattleUnitUpgrades of the unit associated with the unit index stored on this context",
				"name" : "CurrentUpgradeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleUnitUpgrade"
				}
			},
			
			{
				"doc" : "Returns whether the unit associated with the unit index stored on this context can currently increase its level",
				"name" : "CanIncreaseExperience",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the unit associated with the unit index stored on this context can ever increase its level",
				"name" : "CanEverIncreaseExperience",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCustomBattleUnitUpgrades available to the unit associated with the unit index stored on this context",
				"name" : "AvailableUpgradeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCustomBattleUnitUpgrade"
				}
			},
			
			{
				"doc" : "Returns whether the unit associated with the unit index stored on this context is a commander",
				"name" : "IsCommander",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the unit's transformation unit override.",
				"name" : "TransformationUnitOverrideContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitsCustomBattleMountRecords available to the unit associated with the unit index stored on this context",
				"name" : "AvailableMountsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattleMountRecord"
				}
			},
			
			{
				"doc" : "Returns whether the unit associated with the unit index stored on this context is a reinforcement",
				"name" : "IsReinforcement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoMainUnitRecord"
					}
				],
				"doc" : "Sets the unit's transformation unit override.",
				"name" : "SetTransformationUnitOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Attempts to move the current context to the position of the context associated with state component passed in",
				"name" : "MoveToDraggableUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the unit associated with the unit index stored on this context is valid",
				"name" : "IsValid",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the cost of the unit associated with the unit index stored on this context",
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Removes the mount of the unit associated with the unit index stored on this context",
				"name" : "RemoveMount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the level of the unit associated with the unit index stored on this context",
				"name" : "ExperienceLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitsCustomBattleTypeRecord"
					}
				],
				"doc" : "Changes, to the provided alternate unit type, specified by the provided CcoUnitsCustomBattleTypeRecord",
				"name" : "ChangeUnitType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the cost at a provided level of the unit with the unit index stored on this context",
				"name" : "CostAtLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the portrait path of the unit with the unit index stored on  this context",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitsCustomBattleMountRecord"
					}
				],
				"doc" : "Changes, to the provided CcoUnitsCustomBattleMountRecord, the mount of the unit associated with the unit index stored on this context",
				"name" : "ChangeMount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Decreases the level of the unit associated with the unit index stored on this context",
				"name" : "DecreaseExperience",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the name of the unit with the unit index stored on  this context",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoCustomBattleUnitUpgrade" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoCustomBattleUnitUpgrade",
		"symbols" : 
		[
			
			{
				"name" : "IsEquipped",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AncillaryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SkillContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TypeName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleEquipped",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanAfford",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanToggle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoDaemonAbilityBarDescriptionRecord" : 
	{
		"area" : "Record",
		"doc" : "wrapper for a DAEMON_ABILITY_BAR_DESCRIPTION_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoDaemonAbilityBarDescriptionRecord",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Returns true if the faction set of this record contains the passed in faction",
				"name" : "ContainsFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the record's description",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the record's title",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the record's key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of all Daemon ability bar description records",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoDaemonAbilityBarDescriptionRecord"
				}
			}
		]
	},
	"CcoDeployableRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoDeployableRecord",
		"symbols" : 
		[
			
			{
				"name" : "Hitpoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CustomBattleEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IgnitionThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanAttack",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecruitmentCap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DamageValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoDeployablesCustomBattleRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoDeployablesCustomBattleRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Probability",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Cap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DeployableContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoDilemmaRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a DILEMMA_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoDilemmaRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the ui image of the dilemma",
				"name" : "UiImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the db key of the dilemma",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all dilemma records in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoDilemmaRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCdirEventsDilemmaChoiceDetailRecord with the choices of this dilemma",
				"name" : "ChoiceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCdirEventsDilemmaChoiceDetailRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCdirEventsCategoryRecord with the event category context",
				"name" : "EventCategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCdirEventsCategoryRecord"
				}
			},
			
			{
				"doc" : "Returns true if this dilemma should be prioritized",
				"name" : "Prioritized",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if should generate the dilemma",
				"name" : "Generate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised title of the dilemma",
				"name" : "LocalisedTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised description of the dilemma",
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the sound click override string, if any",
				"name" : "SoundClickOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the sound popup override string, if any",
				"name" : "SoundPopupOverride",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoDiplomacyThreatLevel" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for FACTION_STRATEGIC_THREAT_LEVEL_RECORD and flag stating whether for the player or not",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoDiplomacyThreatLevel",
		"symbols" : 
		[
			
			{
				"doc" : "Localised title for threat level based on if for player or AI",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Localised description for threat level based on if for player or AI",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Record key for FACTION_STRATEGIC_THREAT_LEVEL_RECORD wrapping",
				"name" : "RecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Record CcoCampaignFaction for faction this threat is for",
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			}
		]
	},
	"CcoDiplomaticStanceRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoDiplomaticStanceRecord",
		"symbols" : 
		[
			
			{
				"name" : "StatusState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Stance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoEffect" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for an effect, just a text and icon pair basically! Allows it to be generically created for different effect systems",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoEffect",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of linked unit sets if they exist, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "UnitSetsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSetRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the effect record key, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "EffectKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of linked units if they exits, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns a list of linked UNIT_LIST_RECORDs",
				"name" : "UnitListsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitListRecord"
				}
			},
			
			{
				"doc" : "Returns the raw value of the effect as a number",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of linked INITIATIVE_SET_RECORDs",
				"name" : "InitiativeSetsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoInitiativeSetRecord"
				}
			},
			
			{
				"doc" : "Returns the priority of the effect, used for ordering and if 0 isn't shown in UI",
				"name" : "Priority",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this is a positive effect",
				"name" : "IsPositive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the first linked special ability phase record if it exists",
				"name" : "SpecialAbilityPhaseRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the first linked plague component if it exists",
				"name" : "PlagueComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueIngredient"
				}
			},
			
			{
				"doc" : "Returns a list of unit abilities linked to effect",
				"name" : "UnitAbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of all the unit sets affected by the CAMPAIGN_EFFECT that are excluded (as strings with their owning effect key).",
				"name" : "DevUnitSetStringsFromEffectExcluded",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the first linked CcoCampaignDiplomacyManipulationInfo if it exists",
				"name" : "ManipulationInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignDiplomacyManipulationInfo"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the first linked CcoRitualRecord if it exists",
				"name" : "RitualContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of all the unit sets affected by the CAMPAIGN_EFFECT that are excluded.",
				"name" : "DevUnitSetsFromEffectExcluded",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSetRecord"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"doc" : "Returns the CcoCampaignEffectScopeRecord if it exists",
				"name" : "EffectScopeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEffectScopeRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of all the units affected by the CAMPAIGN_EFFECT that are excluded.",
				"name" : "DevUnitsFromEffectExcluded",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"doc" : "Returns a list of all linked CcoRitualRecord.",
				"name" : "RitualList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the linked CcoCampaignPooledResource for the object passed in (faction, province manager etc), with the specified key, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "PooledResourceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of all the units affected by the CAMPAIGN_EFFECT that are not excluded.",
				"name" : "UnitsFromEffectNotExcluded",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the linked CcoUnitAttributeRecord with this effect if exists, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "AttributeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAttributeRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the linked CcoUnitAbility with this effect if exists, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "AbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns the additional description for this effect, if it exists",
				"name" : "AdditionalDetails",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of linked unit sets from any sources that junction to unit sets, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "UnitSetsFromAllSourcesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSetRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of linked agent subtype and agent pairs if they exist, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "UniqueAgentSubtypeAgentPairList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeAgentPair"
				}
			},
			
			{
				"doc" : "Returns the localised text for the effect",
				"name" : "LocalisedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the icon for the additional description of this effect, if it exists",
				"name" : "AdditionalDetailsIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of linked agent records if they exist, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "AgentList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"doc" : "Returns the icon path",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of linked plague records if they exits, only valid to call when created with a CAMPAIGN_EFFECT",
				"name" : "PlagueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueRecord"
				}
			}
		]
	},
	"CcoEffectBundle" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for an effect bundle, stores ptr to record and turns remaining. Used mostly for campaign effects. Can also get a list of effects.",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoEffectBundle",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the icon path",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the unique key of the effect bundle record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the list of all effect bundle records",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns true if owner_only is set to true on effect bundle record, used in conjunction with show_in_3d_space to highlight effect bundles on the 3d UI",
				"name" : "ShowHighlightedOnOwnerOnly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if show_in_3d_space is set to true on effect bundle record, used in conjunction with owner_only to highlight effect bundles on the 3d UI",
				"name" : "IsHighlightedEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if is_global_effect is set to true on effect bundle record",
				"name" : "IsGlobalEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if has different effects to the effect bundle record, for example if the bundle was constructed from script",
				"name" : "HasOverrideEffects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the priority (used for ordering and if 0 generally isnt shown in UI)",
				"name" : "Priority",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the turns remaining for this effect bundle, 0 if infinite",
				"name" : "TurnsRemaining",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the list of all effects for this effect bundle, including hidden ones. This should never be used for displaying the effects, use EffectList for that",
				"name" : "EffectsIncludingHiddenList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the list of effects for this effect bundle (CcoEffect)",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the localised description",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoElectorCountRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoElectorCountRecord",
		"symbols" : 
		[
			
			{
				"name" : "AncillaryRewardContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MapPos",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MapPosY",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MapPosX",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinisterialPositionEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CapitalRegionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitRewardContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoEndTurnNotificationRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoEndTurnNotificationRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsRelevantToPlayersFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanBeSuppressedByPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DetailedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Blocking",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EnabledByDefault",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DisplayText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoEpisodicOverride" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoEpisodicOverride",
		"symbols" : 
		[
			
			{
				"name" : "IsOverriden",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoEventFeedCategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for an event feed category record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoEventFeedCategoryRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all CcoEventFeedCategoryRecord in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEventFeedCategoryRecord"
				}
			},
			
			{
				"doc" : "Returns a string from the category enum",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoFactionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a faction record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFactionRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the list of CcoOwnershipProductRequirement required to be owned for this faction, if it came in a DLC",
				"name" : "OwnershipProductRequirementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRequirement"
				}
			},
			
			{
				"doc" : "Returns the list of CcoOwnershipProductRecord required to be owned for this faction, if it came in a DLC",
				"name" : "OwnershipProductRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRecord"
				}
			},
			
			{
				"doc" : "Returns the list of text replacement keys for this faction in order evaluated. Used to \"skin\" text using the ui_text_replacements table",
				"name" : "TextReplacementKeys",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns flag directory for this faction",
				"name" : "FlagDir",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the path to the rotated version of the faction's flag",
				"name" : "FlagPathRotated",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the path to the large version of the faction's flag",
				"name" : "FlagPathLarge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the path to the medium version of the factio'n flag",
				"name" : "FlagPathMedium",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the path to the small version of the faction's flag",
				"name" : "FlagPathSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the faction's name along with a small icon of their flag",
				"name" : "NameWithIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Marks this faction as seen content",
				"name" : "MarkAsHasSeenContent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the faction's localised name",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the faction audio voiceover culture",
				"name" : "AudioVoiceoverCulture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the faction hasn't been seen by the player yet",
				"name" : "HasSeenContent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the faction's banner tertiary colour",
				"name" : "BannerTertiaryColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns if the faction is unlocked",
				"name" : "IsFactionUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the faction's banner secondary colour",
				"name" : "BannerSecondaryColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns faction's skin",
				"name" : "FactionSkin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the faction's subculture context",
				"name" : "SubcultureContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSubcultureRecord"
				}
			},
			
			{
				"doc" : "Returns the faction's banner primary colour",
				"name" : "BannerPrimaryColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the effects provided to this faction by all storm of magic ascendancy lores",
				"name" : "FactionSpecificAscendancyEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the faction's primary colour",
				"name" : "PrimaryColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the faction's mechanics as a list of CcoEffects",
				"name" : "MechanicList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the key of this faction record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the list of CcoSettlementClimateTypeRecord with the climate list for this faction",
				"name" : "ClimatesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSettlementClimateTypeRecord"
				}
			},
			
			{
				"doc" : "Returns a list of all CcoFactionRecords",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			}
		]
	},
	"CcoFactionSavedCharacters" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a SAVED_CHARACTER_INFO struct",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFactionSavedCharacters",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if we're in campaign, since some info will only show there",
				"name" : "IsCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSavedCharacterInfo"
					}
				],
				"doc" : "Deletes the passed in saved character file from the local machine's saved characters folder",
				"name" : "DeleteSavedCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSavedCharacterInfo"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Loads the passed in saved character at the settlement or military force passed in",
				"name" : "LoadSavedCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of saved characters for this faction, filtered on whether should show agents or lords",
				"name" : "FilteredCampaignCharacterInfoList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSavedCharacterInfo"
				}
			},
			
			{
				"doc" : "Returns a list with all saved characters for this faction",
				"name" : "SavedCharacterInfoList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSavedCharacterInfo"
				}
			}
		]
	},
	"CcoFactionSetRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a FACTION_SET_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFactionSetRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the name of the faction set",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the faction set",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all faction sets in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFactionSetRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Returns true if the set contains the passed in faction record",
				"name" : "ContainsFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoFactorBreakdown" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFactorBreakdown",
		"symbols" : 
		[
			
			{
				"name" : "List",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Header",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoFindResult" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoFindResult",
		"symbols" : 
		[
			
			{
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Context",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoFloatingTextAgentActionEvent" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFloatingTextAgentActionEvent",
		"symbols" : 
		[
			
			{
				"name" : "ActionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TextType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetFlagPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentFlagPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsSuccess",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoFloatingTextBattleEvent" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFloatingTextBattleEvent",
		"symbols" : 
		[
			
			{
				"name" : "TextType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DefenderFlagPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AttackerFlagPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Defender",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Attacker",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoFloatingTextEvent" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFloatingTextEvent"
	},
	"CcoFloatingTextStanceEvent" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFloatingTextStanceEvent",
		"symbols" : 
		[
			
			{
				"name" : "TextType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GeneralFlagPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GeneralName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OldStanceName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NewStanceName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoFormationRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFormationRecord",
		"symbols" : 
		[
			
			{
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsNaval",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Formation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoFrontendFactionLeader" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a frontend faction leader",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFrontendFactionLeader",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the localised name of the general",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Generates a random name for the general",
				"name" : "RandomiseName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Sets the name of the general to the one passed in",
				"name" : "SetName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the location of the lord on the map",
				"name" : "PinLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns a list of faction effects to be displayed in frontend",
				"name" : "FactionEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns a CcoFrontendFactionLeaderRecord with the leader record",
				"name" : "FrontendFactionLeaderRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFrontendFactionLeaderRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoFactionRecord with the faction record that the lord is part of",
				"name" : "FactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"doc" : "Sets this leader as the active model",
				"name" : "SetAsActiveModel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list of CcoUnitDetails of units that are present in the leader's military force",
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the start pos character key for the general",
				"name" : "GeneralKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if cant play as lord due to them being locked behind achievement currently",
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns localised text to show for achievement locked lord",
				"name" : "AchievementLockedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMapPlayableAreaRecord"
					}
				],
				"doc" : "Returns the a localised description of why cant start campaign with this lord currently. Empty if nothing stopping starting the campaign",
				"name" : "LockedReasonText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoFrontendFactionLeaderRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFrontendFactionLeaderRecord",
		"symbols" : 
		[
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasAccessToCampaignType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Voiceover",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FrontendDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "StartPosDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "StartPosMap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DifficultyLocalised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Difficulty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SkillEffectList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MoviePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LoadingScreenImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LoadingScreenText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActionPointsText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DescriptionText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoFrontendRoot" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoFrontendRoot",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the current multiplayer campaign lobby context",
				"name" : "CampaignLobbyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMPCampaignLobby"
				}
			},
			
			{
				"doc" : "Returns the current custom battle lobby context",
				"name" : "CustomBattleLobbyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCustomBattleLobby"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Starts campaign with specified campaign and faction key",
				"name" : "StartCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if intro movies finished playing on loading into game",
				"name" : "AreIntroMoviesFinished",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the id of the current menu that is open in the frontend",
				"name" : "CurrentMenuId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the in game messaging manager context",
				"name" : "IngameMessagingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoIngameMessaging"
				}
			}
		]
	},
	"CcoGameCore" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for the game core",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoGameCore",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the current build number",
				"name" : "BuildNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Set the ui text scale",
				"name" : "DevSetTextScale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "dev" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Set the ui scale",
				"name" : "DevSetUiScale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "dev" ]
			},
			
			{
				"doc" : "Get the current ui scale",
				"name" : "DevUiScale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "dev" ]
			},
			
			{
				"doc" : "Returns the list of installed product contexts",
				"name" : "InstalledProductList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRecord"
				}
			},
			
			{
				"doc" : "Returns the Mirrors of Madness Trial Manager context",
				"name" : "TrialManager",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMoMTrialManager"
				}
			},
			
			{
				"doc" : "Returns the Narrative Manager context",
				"name" : "NarrativeManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNarrativeManager"
				}
			},
			
			{
				"doc" : "Returns the Advisor context",
				"name" : "AdvisorContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAdvisor"
				}
			},
			
			{
				"doc" : "Returns whether the -memory_leak_report is defined and so we are tracking memory allocations",
				"name" : "IsMemoryLeakReportingEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the build is a debug build, i.e. non final release",
				"name" : "IsDebugBuild",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the game is connected to an online service, e.g. Steam",
				"name" : "IsOnline",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the short version of the current build number",
				"name" : "BuildNumberShort",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoGroundTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoGroundTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BurnRate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IgnorePenaltiesAttribute",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectsForSelectionList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinimumThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ColourBlue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ColourGreen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ColourRed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoGroundTypeToStatEffectRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoGroundTypeToStatEffectRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectTextWithValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsPositive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AffectedGroupName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ValueForDisplay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GroundType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoGroupList" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoGroupList",
		"symbols" : 
		[
			
			{
				"name" : "GroupedList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "CategoryObject",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoGroupPooledResourceEffectRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a campaign group pooled resource effect, which provides an effect bundle when the pooled resource is between the lower and upper bounds",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoGroupPooledResourceEffectRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all group pooled resource effects from the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoGroupPooledResourceEffectRecord"
				}
			},
			
			{
				"doc" : "Returns the effect bundle that is provided by this group when the pooled resource is between the lower and upper bounds",
				"name" : "EffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns an int with the upper bound of this group",
				"name" : "UpperBound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the lower bound of this group",
				"name" : "LowerBound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoIncidentRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for an incident record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoIncidentRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the incident's campaign voice over delay",
				"name" : "CampaignVODelay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the incident's sepia fade multiplier",
				"name" : "SepiaFadeMultiplier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the incident's movie path pointed to the correct EventPic movie folder",
				"name" : "MoviePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the incident's image path pointed to the correct EventPic image folder",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the incident's campaign voice over event name",
				"name" : "CampaignVOEventName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns if the incident is a large incident",
				"name" : "IsLargeIncident",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the incident's additional sound event",
				"name" : "AdditionalSoundEvent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the ui image of this incident record",
				"name" : "Image",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of this incident record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the incident's localised button text",
				"name" : "ButtonText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the incident's localised description",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the incident's localised title",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the event category of this incident if it has one assigned to it",
				"name" : "EventCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCdirEventsCategoryRecord"
				}
			},
			
			{
				"doc" : "Returns a list of all CcoIncidentRecord",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoIncidentRecord"
				}
			},
			
			{
				"doc" : "Returns true if this incidents uses revealing text",
				"name" : "UseRevealingText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if the incident has a sepia fade",
				"name" : "HasSepiaFade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this incident is prioritised",
				"name" : "Prioritised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the incident's campaign voice over actor group",
				"name" : "CampaignVOActorGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoIngameMessaging" : 
	{
		"area" : "Common",
		"doc" : "Ingame messaging singleton, used to get ingame news items",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoIngameMessaging",
		"symbols" : 
		[
			
			{
				"doc" : "Goes back to previous page of news",
				"name" : "PreviousPage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Advances news page by 1 to view next set of news",
				"name" : "NextPage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the current page of news being viewed on frontend",
				"name" : "CurrentPage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if ingame messaging is loaded and ready",
				"name" : "IsReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if there is more news to be shown",
				"name" : "HasMoreNews",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if we are able to get any news at all",
				"name" : "CanGetAnyNews",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns news items for the current page of news",
				"name" : "CurrentNewsItems",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoIngameMessagingItem"
				}
			},
			
			{
				"doc" : "Returns all news items that could be visible (DLC permission checks, platform checks, etc)",
				"name" : "FilteredNewsItems",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoIngameMessagingItem"
				}
			}
		]
	},
	"CcoIngameMessagingItem" : 
	{
		"area" : "Common",
		"doc" : "A messaging item, basically news item. Can get fields based on JSON response for different templates",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoIngameMessagingItem",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the ID of the template used as a string",
				"name" : "TemplateId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the category of the item as a string",
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Opens up the button url in an external browser",
				"name" : "OpenLink",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if given field is not empty (value has non-zero length and exists)",
				"name" : "HasField",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Given a key return value for stored field on messaging item, from original JSON response",
				"name" : "Field",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoInitiativeRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a INITIATIVE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoInitiativeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the resources required to activate the initiative",
				"name" : "RequiredResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns the resources that will be spent to activate the initiative",
				"name" : "ExpendedResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns a flag whether all the unit requirements have been met for a force",
				"name" : "ForceMeetsUnitRequirements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the progress of the completion in percentage",
				"name" : "PercentageRequirementFulfilled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the number of unit requirements met for a millitary force",
				"name" : "TotalNumberOfRequirementsMetForForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the total count of required units",
				"name" : "TotalCountOfRequiredUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the duration of the initiative",
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPayloadRecord"
					}
				],
				"doc" : "Returns the cooldown of the paylaod",
				"name" : "CooldownForPayload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised description of the initiative",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the initiative",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of all requrement records CCOs for this initiative",
				"name" : "UnitRequirements",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoInitiativeUnitSetRequirementsRecord"
				}
			},
			
			{
				"doc" : "Returns the image path of the initiative",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of all required units for this initiative",
				"name" : "RequiredUnits",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the key of the initiative",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of all initiatives from the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoInitiativeRecord"
				}
			},
			
			{
				"doc" : "Returns a list of agent subtypes that are linked to this initiative",
				"name" : "LinkedAgentSubtypeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"doc" : "Returns a list of payloads for the initiative",
				"name" : "PayloadRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadRecord"
				}
			},
			
			{
				"doc" : "Returns a list of all the effects provided when active",
				"name" : "EffectUnfilteredList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list of the effects with priority higher than 0, that are provided when active",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the upkeep of the resources used while the initiative is active",
				"name" : "UpkeepResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			}
		]
	},
	"CcoInitiativeSetCategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a INITIATIVE_SET_CATEGORY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoInitiativeSetCategoryRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoInitiativeSetCategoryRecord"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoInitiativeSetRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoInitiativeSetRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActivationCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActiveInitiativeLimit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Items",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoInitiativeUnitSetRequirementsRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a INITIATIVE_UNIT_SET_REQUIREMENT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoInitiativeUnitSetRequirementsRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns localised display name, or empty if it has none",
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the flag whether the requirements are met for this requirement CCO",
				"name" : "ForceMeetsUnitRequirements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the number of requirements met for a particular force",
				"name" : "NumberOfRequirementsMetForForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the number of required units to fulfill this requirement",
				"name" : "RequiredNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the path to an optional icon representing this requirement",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of main unic records of the unit set",
				"name" : "RequiredUnits",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the CCO of the unit set record this requirement is linked to",
				"name" : "UnitSetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitSetRecord"
				}
			},
			
			{
				"doc" : "Returns the CCO of the initiative record this requirement is linked to",
				"name" : "InitiativeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoInitiativeRecord"
				}
			}
		]
	},
	"CcoJadeDatabase" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for the Jade database",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoJadeDatabase",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoPlagueComponentUiDataRecord.",
				"name" : "PlagueComponentUiDataList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueComponentUiDataRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoPlagueMutationUiDataRecord.",
				"name" : "PlagueMutationUiInfoList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueMutationUiDataRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoMalakaiOathsQuestChain.",
				"name" : "MalakaiOathsQuestChainList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMalakaiOathsQuestChain"
				}
			}
		]
	},
	"CcoJadeMissionElement" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a quest chain mission",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoJadeMissionElement",
		"symbols" : 
		[
			
			{
				"doc" : "Return true if the mission notification has been seen",
				"name" : "HasSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return if the mission is available in the current campaign",
				"name" : "HasMissionBeenIssued",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return if the mission is available in the current campaign",
				"name" : "IsMissionAvailableInCurrentCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a string with the image path for the mission",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Return the sort order for the mission in the quest chain",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the CcoCampaignMission",
				"name" : "MissionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMission"
				}
			},
			
			{
				"doc" : "Return the CcoMissionRecord",
				"name" : "MissionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMissionRecord"
				}
			},
			
			{
				"doc" : "Mark the mission notification as seen",
				"name" : "MarkAsSeen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoLabSettingRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a LAB_SETTING_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoLabSettingRecord",
		"symbols" : 
		[
			
			{
				"name" : "VideoPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "ComparisonImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoLabSettingRecord"
				}
			},
			
			{
				"name" : "IsWindsOfMagicSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "DisplayAsPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "DefaultValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "StepSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "MinValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "MaxValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "LocalisedTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoLandUnitArticulatedVehicleRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a LAND_UNIT_ARTICULATED_VEHICLE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoLandUnitArticulatedVehicleRecord",
		"symbols" : 
		[
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "ArticulatedEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntityRecord"
				}
			},
			
			{
				"name" : "GunMountEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntityRecord"
				}
			},
			
			{
				"name" : "AmmoCaissionKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "AmmoCaissonEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntityRecord"
				}
			},
			
			{
				"name" : "AmmoCaissonDestroyedModel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoLandUnitArticulatedVehicleRecord"
				}
			},
			
			{
				"name" : "HeadOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ArticulationMaxAngle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ArticulationNode3Radius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ArticulationNode3Offset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ArticulationNode2Radius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ArticulationNode2Offset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ArticulationNode1Radius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ArticulationNode1Offset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoLandUnitsToExtraEngineRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a LAND_UNITS_TO_EXTRA_ENGINE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoLandUnitsToExtraEngineRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoLandUnitsToExtraEngineRecord"
				}
			},
			
			{
				"name" : "AttachArticulation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "BattleEngineContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattlefieldEngineRecord"
				}
			},
			
			{
				"name" : "LandUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitLandRecord"
				}
			}
		]
	},
	"CcoListLayout" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a component list engine",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoListLayout",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets items allowed per row in list layout",
				"name" : "SetItemsPerRow",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets whether list layout resizes to contents",
				"name" : "SetSizeToContents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Sets spacing of list layout",
				"name" : "SetSpacing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Sets secondary margins of list layout",
				"name" : "SetSecondaryMargins",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Sets margins of list layout",
				"name" : "SetMargins",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if the list layout is a vertical list, or false if horizontal",
				"name" : "IsVertical",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the list layout resizes to contents",
				"name" : "SizeToContents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of items per row the list layout allows",
				"name" : "ItemsPerRow",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list layout spacing",
				"name" : "Spacing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns list layout secondary margins",
				"name" : "SecondaryMargins",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns list layout margins",
				"name" : "Margins",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			}
		]
	},
	"CcoLoadingScreenQuotesRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a loading screen quote record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoLoadingScreenQuotesRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the title of the loading screen quote",
				"name" : "Title",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all loading screen quotes in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoLoadingScreenQuotesRecord"
				}
			},
			
			{
				"doc" : "Returns the bullet points of the loading screen quote",
				"name" : "BulletPointList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBulletPoint"
				}
			},
			
			{
				"doc" : "Returns if the quote category is of character quote",
				"name" : "IsOfCharacterQuoteCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if the image path is empty",
				"name" : "HasNoImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if the image path points to a portrait image",
				"name" : "HasPortraitImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns if the image path points to a unit image",
				"name" : "HasUnitImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the character quote text of the loading screen quote",
				"name" : "CharacterQuoteText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the long description of the loading screen quote",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the image path of the loading screen quote",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoLobbyBase" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoLobbyBase",
		"symbols" : 
		[
			
			{
				"name" : "LocalPlayerSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayerSlotList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumberOfPlayers",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumberOfPlayerSlots",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReadyStatusText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReadyButtonState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocalPlayerReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocalPlayerSpectating",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AddSpectatorSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocalPlayerHost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanAddSpectatorSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsSinglePlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpectatorSlotList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsMatchmadeBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAutoReadyCountdownActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AutoReadyCountdownTimeSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsReadyCountdownActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReadyCountdownTimeSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HostSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoLobbyPlayer" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a lobby player slot",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoLobbyPlayer",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the id of the player",
				"name" : "PlayerID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current state of the player (ready/not ready)",
				"name" : "GetCurrentState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the name of the current campaign difficulty",
				"name" : "CampaignDifficultyName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the current battle difficulty",
				"name" : "BattleDifficultyName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Kicks this player out of the lobby",
				"name" : "KickPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the starting general custom name",
				"name" : "StartingGeneralCustomName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the player",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCultureRecord"
					}
				],
				"doc" : "Sets the culture to the passed in one",
				"name" : "SetCulture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFrontendFactionLeader"
					}
				],
				"doc" : "Sets the lord to the passed in one",
				"name" : "SetLord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Sets the faction to the passed in one",
				"name" : "SetFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this player is the host of the lobby",
				"name" : "IsHost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this player is the local player",
				"name" : "IsLocalPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this player can be kicked from the lobby",
				"name" : "CanKick",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Returns true if the passed in faction is valid to be set for this player",
				"name" : "CanSetFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the network player",
				"name" : "NetworkPlayerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns the currently chosen lord",
				"name" : "CurrentLordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFrontendFactionLeader"
				}
			},
			
			{
				"doc" : "Returns the currently chosen faction",
				"name" : "CurrentFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"doc" : "Returns the team id of the player",
				"name" : "TeamID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoLobbyTeam" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for a MPC lobby team",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoLobbyTeam",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Makes the supplied player slot join this team",
				"name" : "Join",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if we should show this team in the UI",
				"name" : "ShouldShow",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the local player can currently join this team",
				"name" : "CanLocalPlayerJoin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is free for all team",
				"name" : "IsFFATeam",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the team id (index)",
				"name" : "TeamID",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoMPCampaignLobby" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMPCampaignLobby",
		"symbols" : 
		[
			
			{
				"name" : "PlayerSlotList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAutoReadyCountdownActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AutoReadyCountdownTimeSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SettingsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsReadyCountdownActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnselectedLords",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReadyCountdownTimeSecs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumberOfPlayers",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SelectedLords",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumSelectedFactionsForCulture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumberOfPlayerSlots",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalPlayerSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DownloadProgressPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReadyStatusText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ReadyButtonState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanInvite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocalPlayerReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayerForFactionLeaderContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocalPlayerSpectating",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsLocalPlayerHost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsResumed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MPCampaignSettings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsSinglePlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CampaignStartInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsMatchmadeBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GetTeams",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayersForTeam",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HostSlotContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMPCampaignMap" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a playable map in multiplayer campaigns",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMPCampaignMap",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the localised name for the map",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns CcoCampaignStartInfo used for campaign select screen in mpc lobby in frontend, use this one instead of playable area record as it includes time of legend info",
				"name" : "CampaignStartInfoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignStartInfo"
				}
			},
			
			{
				"doc" : "Returns the CcoTimeOfLegendsCampaignRecord for this map (can be empty)",
				"name" : "TimeOfLegendCampaignRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTimeOfLegendsCampaignRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMapPlayableAreaRecord for this map",
				"name" : "CampaignMapRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapPlayableAreaRecord"
				}
			},
			
			{
				"doc" : "Returns the max number of players that can play in this campaign",
				"name" : "MaxPlayers",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the map image path to be used on map displays",
				"name" : "MapImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the image path to be used on selectable entries",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised description for the map",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoMPCampaignSettings" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMPCampaignSettings",
		"symbols" : 
		[
			
			{
				"name" : "SetBattleAiStatsModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GetBattleAiStatsModifier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleAllianceOnly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ToggleOptionForSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetOptionForSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAllianceOnly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsAllianceOnlySettingActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanChangeSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GetCurrentOptionForSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GetOptionsForSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMainUnitRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a main unit",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMainUnitRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the unit's key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the sort order of the parent group that this unit record is part of",
				"name" : "ParentGroupSortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the class name for the unit",
				"name" : "ClassName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the unit",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if the unit is a naval one",
				"name" : "IsNaval",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the context of the additional building requirement for this unit, if any",
				"name" : "AdditionalBuildingRequirementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBuildingLevelRecord"
				}
			},
			
			{
				"doc" : "Returns a path to the icon of the unit",
				"name" : "InfoPicPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the upkeep for the unit",
				"name" : "Upkeep",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns list of unit sets to unit caps for the unit",
				"name" : "UnitSetUnitCapList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSetToMpUnitCapRecord"
				}
			},
			
			{
				"doc" : "Returns a path to the icon of the unit",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the tier of the unit",
				"name" : "Tier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of special abilities for the unit",
				"name" : "SpecialAbilityGroupList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			},
			
			{
				"doc" : "Returns the name of the parent category",
				"name" : "CategoryParentTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Return a context list of all main units",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the banner hitpoints for the unit",
				"name" : "BannerHp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the associated CcoShapeshiftForm if there is one",
				"name" : "ShapeshiftFormContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoShapeshiftForm"
				}
			},
			
			{
				"doc" : "Returns the historical description of the unit",
				"name" : "HistoricalDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns this or the base version of the mount according to unit permissions table",
				"name" : "UnitLandRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitLandRecord"
				}
			},
			
			{
				"doc" : "Returns a context to the unit porthole camera setting for the unit record",
				"name" : "PortholeCameraSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitPortholeCameraSettingRecord"
				}
			},
			
			{
				"doc" : "Returns this or the base version of the mount according to unit permissions table",
				"name" : "UnmountedUnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Returns a context to the battle permissions of the unit",
				"name" : "CustomBattlePermissionsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattlePermissionRecord"
				}
			},
			
			{
				"doc" : "Returns whether this unit should be hidden from effect lists by the UI",
				"name" : "IsVisuallyExcludedFromEffects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the porthole composite scene filepath used by this record if any (optional in db)",
				"name" : "PortholeCompositeScene",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a context to the unit group of the unit",
				"name" : "UiUnitGroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUiUnitGroupingRecord"
				}
			},
			
			{
				"doc" : "Returns whether this unit is a train unit",
				"name" : "IsTrain",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the name of the parent category's icon",
				"name" : "CategoryParentIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the special category of the unit (default if none)",
				"name" : "SpecialCategoryKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of CcoMainUnitRecords with the records that the unit is composed of, i.e. carriges for a train",
				"name" : "TrainCarriageCompositionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the tooltip text for the category of the unit",
				"name" : "CategoryTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns whether this unit is owned by the player",
				"name" : "IsOwned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns a context to the unit details the provided unit would have if upgraded to this unit record",
				"name" : "UpgradedUnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the category name of the unit",
				"name" : "CategoryName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of CcoOwnershipProductRequirement for this unit",
				"name" : "OwnershipProductRequirementList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRequirement"
				}
			},
			
			{
				"doc" : "Returns a context to the unit details of the unit with predicted values a unit might be recruited with",
				"name" : "RecruitableUnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a path to the category icon of the unit",
				"name" : "CategoryIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns the base cost to recruit the unit",
				"name" : "BaseCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a context to the unit details of the unit",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns whether the recruitment is disabled for this unit. Optional pass the faction for which to check, defaults to players faction",
				"name" : "IsRecruitmentDisabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a record of the default projectile for the unit (if there is one)",
				"name" : "DefaultProjectileRecord",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoProjectileRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns the cost to recruit the unit",
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether this unit uses hitpoints.",
				"name" : "UsesHitpointsInCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of abilities for the unit",
				"name" : "AbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns true if this is a unit of renown",
				"name" : "IsRenown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a tooltip with the additional requirements to unlock this unit.",
				"name" : "BuildingUnlockTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a description of the unit",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoMalakaiOathsQuestChain" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a battles of legend quest chain",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMalakaiOathsQuestChain",
		"symbols" : 
		[
			
			{
				"doc" : "Returns whether this quest chain is pinned",
				"name" : "IsPinned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether this quest chain is unlocked",
				"name" : "IsUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return a CcoRitualRecord with the ritual required to switch to this quest",
				"name" : "SwitchingRitualContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualRecord"
				}
			},
			
			{
				"doc" : "Return a CcoRitualRecord with the ritual required to activate this quest",
				"name" : "ActivatingRitualContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualRecord"
				}
			},
			
			{
				"doc" : "Return the number of other quest chains that need to be completed for this quest to be unlocked",
				"name" : "CompletedQuestsRequiredToUnlock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the number of required missions to unlock the final quest",
				"name" : "NumMissionsRequired",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the sort order of the quest chain",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Return the icon path of the quest chain",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Return the name of the quest chain",
				"name" : "QuestChainName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Return associated CcoAncillaryRecord",
				"name" : "AncillaryRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillaryRecord"
				}
			},
			
			{
				"doc" : "Return associated CcoEffectBundle",
				"name" : "EffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Return a CcoMainUnitRecord associated with the battles of legend quest chain",
				"name" : "MainUnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Return a list of CcoEffectBundle",
				"name" : "HighlightedEffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Return a list of CcoMainUnitRecord",
				"name" : "HighlightedUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Return a list of CcoMalakaiOathsMission",
				"name" : "OathsMissionList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoJadeMissionElement"
				}
			},
			
			{
				"doc" : "Returns the localised bullet point text of the chain",
				"name" : "BulletPointText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised description of the chain",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoMeleeWeaponRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMeleeWeaponRecord",
		"symbols" : 
		[
			
			{
				"name" : "WeaponLength",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SplashAttackPowerMultiplierContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ApDamageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DamageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BonusVInfantryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BonusVLargeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CollisionAttackMaxTargetsCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CollisionAttackMaxTargets",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ContactPhase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsMagical",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IgnitionAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BuildingDamageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SplashAttackMaxAttacks",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SplashAttackTargetSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MeleeWeaponType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMercenaryRecruitmentInfoRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a mercenary recruitment info record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMercenaryRecruitmentInfoRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the image path of the ornament icon of the confirmation button",
				"name" : "OrnamentIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the image path of the HUD button of the mercenary recruitment info",
				"name" : "HUDButtonIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the image path of the confirm button of the mercenary recruitment info",
				"name" : "ConfirmButtonIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the confirm button title of the mercenary recruitment info",
				"name" : "ConfirmButtonTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoMissileWeaponRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMissileWeaponRecord",
		"symbols" : 
		[
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UseSecondaryAmmoPool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ProjectileContextList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Precursor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMissionIssuerRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMissionIssuerRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DefaultRoundsBetween",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMissionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a MISSION_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMissionRecord",
		"symbols" : 
		[
			
			{
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "LocalisedSupplementaryText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "LocalisedTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "QuestCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "BattleSetPieceRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetPieceRecord"
				}
			},
			
			{
				"name" : "UiImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "LocalisedTitleKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "IsQuest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMissionRecord"
				}
			},
			
			{
				"name" : "LocalisedDescriptionKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "QuestMission",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "StickyByDefault",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Prioritised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Generate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "BaseCategoryWeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "TriggerRadius",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "LocationY",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "LocationX",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "EventCategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCdirEventsCategoryRecord"
				}
			},
			
			{
				"name" : "LocalisedMissionCompletedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoMoMTrialManager" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for Mirrors of Madness Trials",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMoMTrialManager",
		"symbols" : 
		[
			
			{
				"doc" : "Returns an int with the score needed to achieve a gold medal in a trials battle",
				"name" : "TrialGoldMedalScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the score needed to achieve a silver medal in a trials battle",
				"name" : "TrialSilverMedalScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the score needed to achieve a bronze medal in a trials battle",
				"name" : "TrialBronzeMedalScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns an int with the score needed to achieve the next tier relative to the passed in score",
				"name" : "NextTierScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns an int with the last tier that was already achieved relative to the passed in score",
				"name" : "CurrentTierScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns an int with the highscore of the trial battle piece key passed",
				"name" : "TrialsHighScoreForBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns an int with the score needed to achieve a gold medal in a trials battle",
				"name" : "TrialPlatinumMedalScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoMortuaryCultCategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a MORTUARY_CULT_CATEGORY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMortuaryCultCategoryRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMortuaryCultCategoryRecord"
				}
			},
			
			{
				"name" : "ShowOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "LocalisedButtonDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "CraftButtonText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "CategoryIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoMountRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMountRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Entity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMountableArtilleryUnitsCustomBattleRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMountableArtilleryUnitsCustomBattleRecord",
		"symbols" : 
		[
			
			{
				"name" : "Probability",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Cap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMultiplayerCampaignSettingRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a MULTIPLAYER_CAMPAIGN_SETTING_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMultiplayerCampaignSettingRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Return a context list of all mp campaign settings, sorted in the right order",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMultiplayerCampaignSettingRecord"
				}
			},
			
			{
				"doc" : "Returns true if this setting can be set by all players (like difficulty), if false only host can set",
				"name" : "IsPerPlayerSetting",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return unique db key for setting",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns localised tooltip for the setting",
				"name" : "LocalisedTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns localised name for the setting",
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoMultiplayerCampaignSettingsOptionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMultiplayerCampaignSettingsOptionRecord",
		"symbols" : 
		[
			
			{
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MultiplayerCampaignSettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoMultiplayerRoot" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for the root of the mp system, so can get useful information such as local player, players in game, players waiting on, etc",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoMultiplayerRoot",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the friend list of the local player as a list of CcoNetworkPlayer",
				"name" : "FriendList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns list of CcoNetworkPlayers waiting to load into the game still",
				"name" : "StalledNetworkPlayerList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns list of CcoNetworkPlayers in the current game",
				"name" : "PlayerList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns the CcoNetworkPlayer for the host player",
				"name" : "HostPlayerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			},
			
			{
				"doc" : "Returns the CcoNetworkPlayer for the local player",
				"name" : "LocalPlayerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNetworkPlayer"
				}
			}
		]
	},
	"CcoNarrativeManager" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoNarrativeManager",
		"symbols" : 
		[
			
			{
				"doc" : "Decrements the page spread value if possible",
				"name" : "TurnPageLeft",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of CcoCampaignVideoRecords and CcoIncidentRecords associated with the current tab",
				"name" : "NumEntriesForSelectedTab",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the selected tab as a context object",
				"name" : "SelectedTabContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNarrativeViewerTabRecord"
				}
			},
			
			{
				"doc" : "Returns a list of all CcoNarrativeViewerTabRecords for dlcs in the current context",
				"name" : "DlcTabsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNarrativeViewerTabRecord"
				}
			},
			
			{
				"doc" : "Returns a list of all CcoNarrativeViewerTabRecords for cultures in the current context",
				"name" : "CultureTabsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNarrativeViewerTabRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoNarrativeViewerTabRecord"
					}
				],
				"doc" : "Sets the current tab given a tab record context",
				"name" : "SetTabUsingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the current tab given a tab key",
				"name" : "SetTabUsingKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Enables subtitles if the ENV_BOOL for subtitles is true or the language being used requires subtitles",
				"name" : "EnableSubtitlesIfNecessary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Selects an appropriate tab using the current campaign",
				"name" : "ContextSelectAppropriateTab",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the number of two page spreads to show for this tab",
				"name" : "PageSpreadsForSelectedTab",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current page spread as a number",
				"name" : "CurrentPageSpread",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the selected tab key",
				"name" : "SelectedTabIndex",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the selected tab index",
				"name" : "SelectedTabKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Increments the page spread value if possible",
				"name" : "TurnPageRight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoNarrativeViewerEntryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a NARRATIVE_VIEWER_ENTRY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoNarrativeViewerEntryRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true when this entry has a valid campaign video",
				"name" : "IsCampaignVideoEntry",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the sort value used to order entries in tabs",
				"name" : "Sort",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoNarrativeViewerTabRecord associated with this entry",
				"name" : "NarrativeViewerTabContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoNarrativeViewerTabRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignVideoRecord associated with this entry",
				"name" : "CampaignVideoContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignVideoRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoIncidentRecord associated with this entry",
				"name" : "StoryPanelIncidentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoIncidentRecord"
				}
			},
			
			{
				"doc" : "Returns the string id which should be looked up in the registry to tell whether this entry has been unlocked",
				"name" : "ScriptedValueRegistryKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the thumbnail image path from  it's campaign video record or story panel incident",
				"name" : "ThumbnailImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised title from it's campaign video record or story panel incident",
				"name" : "LocalisedTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of this NARRATIVE_VIEWER_ENTRY_RECORD",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNarrativeViewerEntryRecord"
				}
			},
			
			{
				"doc" : "Returns the audio state used for this entry",
				"name" : "AudioState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the entry is locked by default",
				"name" : "DefaultLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true when this entry has a valid story incident",
				"name" : "IsStoryIncidentEntry",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoNarrativeViewerTabRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a NARRATIVE_VIEWER_TAB_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoNarrativeViewerTabRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all CcoNarrativeViewerTabRecords",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNarrativeViewerTabRecord"
				}
			},
			
			{
				"doc" : "Returns a list of this tab's entries",
				"name" : "EntriesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoNarrativeViewerEntryRecord"
				}
			},
			
			{
				"doc" : "Returns the offset in the x direction of the tab",
				"name" : "OffsetX",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the integer used to sort the tabs",
				"name" : "Sort",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoCultureRecord for the tab",
				"name" : "CultureContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCultureRecord"
				}
			},
			
			{
				"doc" : "Returns the tab image path",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised name of the tab",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the tab key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoNetworkPlayer" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a player in the multiplayer system, can query current state, and send invites, view steam profile, etc",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoNetworkPlayer",
		"symbols" : 
		[
			
			{
				"doc" : "Session player id for current game",
				"name" : "SessionPlayerId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Slot id for current game",
				"name" : "PlayerSlot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the alliance colour of this player in relation to local player",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the units currently controllable by this player in a battle (either if active their armies units, or if passive participant the units they have been gifted)",
				"name" : "CurrentGameControllableUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				}
			},
			
			{
				"doc" : "Display Name from mp client",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the battle army context for the player if they are currently in a battle",
				"name" : "CurrentGameArmyContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"doc" : "Unique mp client id",
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the campaign faction for the player if they are currently in campaign",
				"name" : "CurrentGameCampaignFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the faction record for the player, if they are currently in a lobby (battle/campaign)",
				"name" : "CurrentGameFactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			},
			
			{
				"doc" : "Sends a friend invite via mp client",
				"name" : "AddAsFriend",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Shows the players profile in mp client (like steam overlay)",
				"name" : "ShowProfile",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Sends a game invite to the player via mp client",
				"name" : "Invite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this player is currently a passive participant in battle (spectating but can receive units from active players to join in)",
				"name" : "IsPassiveParticipant",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this player is currently spectating in battle",
				"name" : "IsSpectating",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this player is the local player",
				"name" : "IsLocalPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this player is a friend of the local player",
				"name" : "IsFriend",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this player is currently online",
				"name" : "IsOnline",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Used for sorting in player lists. In frontend its just slot id, in battle its based on alliance/army, in campaign its based on team",
				"name" : "SortId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns team id for current game",
				"name" : "TeamId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoNewContentPatchNoteRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoNewContentPatchNoteRecord",
		"symbols" : 
		[
			
			{
				"name" : "LocalisedPatchNote",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoOwnershipProductRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a OWNERSHIP_PRODUCT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoOwnershipProductRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns list of all product records",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRecord"
				}
			},
			
			{
				"doc" : "Opens up a store page for the product (like in steam overlay)",
				"name" : "OpenStore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if this product could be purchased",
				"name" : "IsPurchasable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this product is currently owned and installed (so accessible basically)",
				"name" : "IsOwned",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this product is free as part of Total War Access",
				"name" : "IsTwa",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this product is free",
				"name" : "IsFlc",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the release order, used to determine which order dlcs came in for sorting purposes, etc",
				"name" : "ReleaseOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a localised description to describe the product in the UI",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the product id linked to a store front for this product",
				"name" : "SteamAppId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the unique key for this record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoOwnershipProductRequirement" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for an ownership product mask",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoOwnershipProductRequirement",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of CcoOwnershipProductRecord",
				"name" : "OwnershipProductPurchasableRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoOwnershipProductRecord",
				"name" : "OwnershipProductRecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoOwnershipProductRecord"
				}
			}
		]
	},
	"CcoPair" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoPair",
		"symbols" : 
		[
			
			{
				"doc" : "Second member of the pair",
				"name" : "Second",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"doc" : "First member of the pair",
				"name" : "First",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			}
		]
	},
	"CcoPieData" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoPieData",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the list of pie slices (CcoPieSlice)",
				"name" : "SliceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPieSlice"
				}
			}
		]
	},
	"CcoPieSlice" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoPieSlice",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the colour for the pie slice",
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the value for the pie slice",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns localised name for display on pie slice",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoPlagueComponentUiDataRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a plague component slot defined in Jade, used by the UI",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPlagueComponentUiDataRecord",
		"symbols" : 
		[
			
			{
				"name" : "Offset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "LinkedSlotsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueComponentUiDataRecord"
				}
			}
		]
	},
	"CcoPlagueEffectList" : 
	{
		"area" : "Record",
		"doc" : "A class that wraps a plague effect list together with its faction sets and target types",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoPlagueEffectList",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of faction sets that the effects apply to",
				"name" : "FactionSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoFactionSetRecord"
				}
			},
			
			{
				"doc" : "Returns a list of valid targets in string form",
				"name" : "TargetTypeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				}
			},
			
			{
				"doc" : "Returns the name of the effect list, including the faction sets and the taregt list (example: 'Plague effects on Nurgle armies and settlements) ",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the list of effect lists, each with a source where they come from (if no sources are included, there will be a single list with null as source)",
				"name" : "EffectListWithSourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueCompositionEffectList"
				}
			}
		]
	},
	"CcoPlagueEffectRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a PLAGUE_EFFECT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPlagueEffectRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all plague effect records in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueEffectRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "Returns a list of CcoPlagueEffectList, which provide a list of effects, together with targets and faction sets specifying where the effects will apply",
				"name" : "EffectsAndTypeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueEffectList"
				}
			},
			
			{
				"doc" : "Returns a list of effect bundles",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoPlagueMutationUiDataRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a mutation type defined in Jade, used by the UI",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPlagueMutationUiDataRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the sorting order used by the UI",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "String representation of expression used to calculate value of combined effect value shown in UI",
				"name" : "TotalValueExpression",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "String representation of expression used to calculate value shown in UI",
				"name" : "ValueExpression",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Localised tooltip to be used in the UI",
				"name" : "LocalisedTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Localised hint to be used in the UI",
				"name" : "LocalisedHint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignPlaguesCompositionSystem"
					}
				],
				"doc" : "Returns each of the mutation levels",
				"name" : "MutationLevelsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueIngredient"
				}
			}
		]
	},
	"CcoPlagueParameterRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a PLAGUE_PARAMETER_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPlagueParameterRecord",
		"symbols" : 
		[
			
			{
				"name" : "InfectionChanceReductionPostSpreadUnary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "RegionToRegionInfectionChanceUnary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "RegionToForceInfectionChanceUnary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ForceToRegionInfectionChanceUnary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ForceToForceInfectionChanceUnary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ForceToForceBattleInfectionChanceUnary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ImmunityDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "SpreadCountMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "InfectionDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueParameterRecord"
				}
			},
			
			{
				"name" : "MinimumInfectionChanceUnary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoPlagueRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a PLAGUE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPlagueRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all plague records in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueRecord"
				}
			},
			
			{
				"doc" : "Returns the image path of the plague",
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the lifetime of the plague",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the lifetime of the plague",
				"name" : "Lifetime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the key of the plague record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoPlagueSpecialCompositionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a PLAGUE_SPECIAL_COMPOSITION_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPlagueSpecialCompositionRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all compositions in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPlagueSpecialCompositionRecord"
				}
			},
			
			{
				"doc" : "Returns the component that will be awarded when using the components from the plague composition",
				"name" : "AwardedIngredientContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueIngredient"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the plague composition for the given faction",
				"name" : "FactionPlagueCompositionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPlagueComposition"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoPooledResourceThresholdOperationSetRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a pooled_resource_threshold_operation_set_record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPooledResourceThresholdOperationSetRecord",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the pooled resource from the faction passed in, which sets the bounds of the operations. If no faction gets passed in, default to player faction",
				"name" : "PooledResourceList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignPooledResource"
				}
			},
			
			{
				"doc" : "Returns a list of operation sets in this threshold",
				"name" : "CampaignOperationSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignOperationSetRecord"
				}
			},
			
			{
				"doc" : "Returns the upper bound, which is used for the exit operations",
				"name" : "UpperBound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the lower bound, which is used for the enter operations",
				"name" : "LowerBound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if this operation set is currently locked by an achievement",
				"name" : "IsLockedByAchievement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this operation set is granted by unlocking an achievement",
				"name" : "IsGrantedByAchievement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoAgentRecord"
					}
				],
				"doc" : "Returns true if any of the operation sets unlock the passed in agent",
				"name" : "UnlocksAgent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoMainUnitRecord"
					}
				],
				"doc" : "Returns true if any of the operation sets unlock the passed in unit",
				"name" : "UnlocksUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignOperationSetRecord"
					}
				],
				"doc" : "Chooses the passed in operation set",
				"name" : "ChooseOperationSet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a list with all records in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPooledResourceThresholdOperationSetRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the operation set record that has been selected for this threshold, if any",
				"name" : "ActiveOperationSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignOperationSetRecord"
				}
			}
		]
	},
	"CcoPooledResourceTransfer" : 
	{
		"area" : "Campaign",
		"doc" : "Component context manager for pooled resource transfer",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPooledResourceTransfer",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Applies the transfer to the provided forces",
				"name" : "Apply",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Set the value to transfer",
				"name" : "SetSelectedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Set the military force used as the source of the transfer",
				"name" : "SetSource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns true if the selected source has the selected amount of resource and can pay the cost to transfer it to the provided sink",
				"name" : "CanApply",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the cost to transfer the selected value from the selected source to the provided sink",
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the current value set to transfer",
				"name" : "SelectedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns true if the force is the currently selected source",
				"name" : "IsSelectedSource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns true if the provided force can transfer the pooled resource to another.",
				"name" : "CanBeSource",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignMilitaryForce"
					}
				],
				"doc" : "Returns the list of military forces that can receive meat from the selected source or from the provided source override.",
				"name" : "ValidSinks",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Returns the list of military forces that can transfer meat.",
				"name" : "ValidSources",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignMilitaryForce"
				}
			},
			
			{
				"doc" : "Clears source selection and sets selected value to 0. Normally used on panel close.",
				"name" : "Clear",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoPreBattleAIAvailableGenerals" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPreBattleAIAvailableGenerals",
		"symbols" : 
		[
			
			{
				"name" : "GetGeneralsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoPreBattleFactionVote" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoPreBattleFactionVote",
		"symbols" : 
		[
			
			{
				"doc" : "Returns whether a Play as AI faction has been selected",
				"name" : "HasSelectedPlayAsAiFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns Play as AI faction selected, can return nullptr",
				"name" : "PlayAsAIFactionSelectedContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns whether the vote's faction and play as passed in AI faction",
				"name" : "IsFactionAvailableAsPlayAsAI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Submits a vote for a faction, takes in String representing the vote, a bool for if want to toggle off if already active, and optional CcoCampaignFaction for play as ai vote",
				"name" : "CastVote",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns whether passed in String representing the vote is available for the this faction of this vote",
				"name" : "IsVoteAvailable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns localised stringrepresenting the vote cast, can return empty string",
				"name" : "SelectedVote",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns UNlocalised stringrepresenting the vote cast, can return empty string",
				"name" : "SelectedVoteKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns bool whetehr the faction is permitted to change its vote",
				"name" : "IsPermittedToChangeVote",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the primary defending faction, which if choose to support defender you would be supporting",
				"name" : "SupportDefenderFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns the primary attacking faction, which if choose to support attacker you would be supporting",
				"name" : "SupportAttackerFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if component this is called on is a child of the panel side in prebattle showing attackers (used for determining which faction would be supporting)",
				"name" : "IsComponentOnAttackingUISideOfPrebattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns CcoCampaignFaction context for the selected to play as ai faction, can return nullptr",
				"name" : "SelectedPlayAsAIFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if this vote is currently disabled (used to set button inactive). Takes the vote option id as string, and if any factions available to select for if play as ai option",
				"name" : "IsVoteDisabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns CcoCampaignFaction context this vote belongs to",
				"name" : "Faction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns whether a vote has been cast",
				"name" : "HasVoted",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoPreBattleVotingSystem" : 
	{
		"area" : "Campaign",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoPreBattleVotingSystem",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if can call CancelReady",
				"name" : "CanCancelReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Cancels ready status of local player which will reset their vote and cancel the current countdown timer for battle to commence",
				"name" : "CancelReady",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns formatted localised time until battle will commence",
				"name" : "ReadyCountdownTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if all players selected a vote and battle is counting down to start",
				"name" : "IsReadyTimerActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Return context list of CcoCampaignFaction representing the factions of armies that are available to be played as AI",
				"name" : "FactionsAvailableToPlayAsAI",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns context list of all CcoPreBattleFactionVote contexts in the voting system",
				"name" : "AllVotes",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPreBattleFactionVote"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the faction context for who is playing as AI for the specified faction (null if no one and will be controlled by AI)",
				"name" : "FactionPlayingAsAiFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns CcoPreBattleFactionVote context for the CcoCampaignFaction passed in, can return nullptr",
				"name" : "VoteForFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPreBattleFactionVote"
				}
			}
		]
	},
	"CcoPrisonSystem" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoPrisonSystem",
		"symbols" : 
		[
			
			{
				"name" : "IsPrisonFull",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxNumberOfPrisoners",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentNumberOfPrisoners",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoProjectileBombardmentRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoProjectileBombardmentRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumProjectiles",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RadiusSpread",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ProjectileContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoProjectileRecord" : 
	{
		"area" : "Record",
		"doc" : "Cco wrapper for querying a projectile record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoProjectileRecord",
		"symbols" : 
		[
			
			{
				"name" : "ShotTypeKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "The number of projectiles associated with this projectile record",
				"name" : "NumProjectiles",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether the projectile inflicts flaming damage",
				"name" : "IsFlaming",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns whether the projectile inflicts magical damage",
				"name" : "IsMagical",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoProjectileRecord"
				}
			},
			
			{
				"doc" : "Gets the CcoSpecialAbilityPhaseRecord for the effect of the projectile flying overhead",
				"name" : "OverheadPhaseContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Gets the CcoSpecialAbilityPhaseRecord for the effect of contact with the projectile",
				"name" : "ContactPhaseContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"name" : "CanDamageBuildings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the projectile bonus vs large units",
				"name" : "BonusVsLargeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the projectile bonus vs infantry",
				"name" : "BonusVsInfantryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the projectile base reload time",
				"name" : "BaseReloadTimeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the projectile explosive armour piercing damage context",
				"name" : "ExplosiveApDamageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the projectile explosive damage",
				"name" : "ExplosiveDamageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the projectile armour piercing damage",
				"name" : "ApDamageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Returns the calculated explosive armour piercing value as a percentage",
				"name" : "ExplosiveArmourPiercingPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the projectile damage",
				"name" : "DamageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Returns the calculated armour piercing value as a percentage",
				"name" : "ArmourPiercingPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Gets CcoUnitStat for the effective range of the projectile",
				"name" : "EffectiveRangeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"name" : "TotalProjectilesPerReload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a path for the associated icon for this projectile",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "ShotsPerVolley",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a string of the associated tooltip text for this projectile",
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string for the onscreen name of the projectile",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "BurstSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoProphecyOfSotekStageRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a PROPHECY_OF_SOTEK_STAGE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoProphecyOfSotekStageRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoProphecyOfSotekStageRecord"
				}
			},
			
			{
				"name" : "TooltipType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Stage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "EffectBundleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			}
		]
	},
	"CcoProphecyOfSotekStagesToMissionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a PROPHECY_OF_SOTEK_STAGES_TO_MISSION_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoProphecyOfSotekStagesToMissionRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoProphecyOfSotekStagesToMissionRecord"
				}
			},
			
			{
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "MissionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMissionRecord"
				}
			},
			
			{
				"name" : "StageContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProphecyOfSotekStageRecord"
				}
			}
		]
	},
	"CcoProvinceAutomanagementFocusRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a PROVINCE_AUTOMANAGEMENT_FOCUS_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoProvinceAutomanagementFocusRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all focus records in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoProvinceAutomanagementFocusRecord"
				}
			},
			
			{
				"doc" : "Return the localised description of the focus",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Return the localised name of the focus",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoProvinceInitiativeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoProvinceInitiativeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectBundleContextForCurrentProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "StatusForCurrentProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectBundleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRangeWithContext" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoRangeWithContext",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the percentage of the total difference between the ranges",
				"name" : "PercentageOfTotal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the min range value",
				"name" : "RangeMin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the max range value",
				"name" : "RangeMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the context associated with this range",
				"name" : "Context",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoRegionGroupRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a REGION_GROUP_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRegionGroupRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all CcoRegionGroupRecords",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRegionGroupRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoRegionGroups linked to this region group",
				"name" : "OrderSortedRegionRecordsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRegionRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Moves the camera to the average position of regions in the group and zooms it to the desired amount",
				"name" : "ZoomToGroupAtHeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the localised name of the region group",
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the region group",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoRegionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a REGION_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRegionRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all regions in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRegionRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoEffectBundle with the owner bundle effects",
				"name" : "OwnerEffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns a list of CcoRegionGroupRecords that this region is part of",
				"name" : "RegionGroupsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRegionGroupRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignSettlement with the settlement context of this region",
				"name" : "SettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns a string with the faction swapping id of the region",
				"name" : "FactionSwappingId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string with the battle name key of the region",
				"name" : "BattleNameKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string with the onscreen name key of the region",
				"name" : "OnscreenNameKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string with the key of the region",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoReignOfChaosRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a REIGN_OF_CHAOS_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoReignOfChaosRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoUnitAbility associated with this record",
				"name" : "ArmyAbility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns a string key for the god type associated with this record",
				"name" : "GodType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the tier of this effect",
				"name" : "Tier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the description of the outcome's effects",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the name of the outcome",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of reign of chaos records",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoReignOfChaosRecord"
				}
			}
		]
	},
	"CcoReinforcementArmy" : 
	{
		"area" : "Battle",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoReinforcementArmy",
		"symbols" : 
		[
			
			{
				"name" : "Delay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EntryPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoResourceCostRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoResourceCostRecord",
		"symbols" : 
		[
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PooledResourceCostsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RequiredAncillariesList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RequiredTradeResourcesList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ExpenditureType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IncomeType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TreasuryCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoResourceRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoResourceRecord",
		"symbols" : 
		[
			
			{
				"name" : "StrategicValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconFilepath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TradeValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PricePerUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitNamePlural",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitNameSingular",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasUnitName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualCategoryGroupRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a RITUAL_CATEGORY_GROUP_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualCategoryGroupRecord",
		"symbols" : 
		[
			
			{
				"name" : "CategoryList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualCategoryRecord"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualCategoryGroupRecord"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoRitualCategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a RITUAL_CATEGORY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualCategoryRecord",
		"symbols" : 
		[
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualCategoryRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignRitualManager"
					}
				],
				"name" : "RitualListForManager",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignRitual"
				}
			},
			
			{
				"name" : "GroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualCategoryGroupRecord"
				}
			},
			
			{
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoRitualChainRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a RITUAL_CHAIN_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualChainRecord",
		"symbols" : 
		[
			
			{
				"name" : "RitualsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualRecord"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualChainRecord"
				}
			},
			
			{
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "RitualSitesRequired",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "CategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualCategoryRecord"
				}
			}
		]
	},
	"CcoRitualPayloadAncillaryRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadAncillaryRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AncillaryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadChangeAgentCapacityRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadChangeAgentCapacityRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Capacity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadChangeUnitAllowanceCapacityRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a RITUAL_PAYLOAD_CHANGE_UNIT_CAPACITY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadChangeUnitAllowanceCapacityRecord",
		"symbols" : 
		[
			
			{
				"name" : "PayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualPayloadRecord"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadChangeUnitAllowanceCapacityRecord"
				}
			},
			
			{
				"name" : "Capacity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "UnitListRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitListRecord"
				}
			}
		]
	},
	"CcoRitualPayloadChangeUnitCapacityRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadChangeUnitCapacityRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Capacity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadDiplomaticAttitudeChangeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadDiplomaticAttitudeChangeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AttitudeDelta",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a ritual payload record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with factions that will be confederated by this payload",
				"name" : "ConfederatedFactionsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns a CcoRitualPayloadTriggerDilemmaRecord with the context of the dilemma that this payload will trigger, if any",
				"name" : "DilemmaContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualPayloadTriggerDilemmaRecord"
				}
			},
			
			{
				"doc" : "Returns a list with agent caps affected by this payload",
				"name" : "AgentCapList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadChangeAgentCapacityRecord"
				}
			},
			
			{
				"doc" : "Returns true if the payload only applies to human factions",
				"name" : "HumanOnly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the key of the payload record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with unit allowance caps affected by this payload",
				"name" : "UnitAllowanceCapList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadChangeUnitAllowanceCapacityRecord"
				}
			},
			
			{
				"doc" : "Returns a list with unit caps affected by this payload",
				"name" : "UnitCapUnitList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadChangeUnitCapacityRecord"
				}
			},
			
			{
				"doc" : "Returns a list of CcoRitualPayloadTeleportArmyRecord",
				"name" : "ArmyTeleportList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadTeleportArmyRecord"
				}
			},
			
			{
				"doc" : "Returns a list with all payload records in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadRecord"
				}
			},
			
			{
				"doc" : "Returns a list of effect bundles and their duration that this payload will provide",
				"name" : "EffectBundleAndDurationPairList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns a list of effect bundles that this payload will provide",
				"name" : "EffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns a list of storms that this payload will spawn",
				"name" : "StormSpawnsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadSpawnStormRecord"
				}
			},
			
			{
				"doc" : "Returns a list of ancillaries that this payload will provide",
				"name" : "AncillariesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadAncillaryRecord"
				}
			},
			
			{
				"doc" : "Returns a list of resource transactions that this payload will apply",
				"name" : "ResourceTransactionsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoResourceCostRecord"
				}
			},
			
			{
				"doc" : "Returns a list of mercenaries that the payload will spawn",
				"name" : "MercenarySpawnsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadSpawnMercenaryRecord"
				}
			},
			
			{
				"doc" : "Returns a list of armies that the payload will spawn",
				"name" : "ArmySpawnsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadSpawnArmyRecord"
				}
			},
			
			{
				"doc" : "Returns a list of agents that the payload will spawn",
				"name" : "AgentSpawnsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadSpawnAgentRecord"
				}
			},
			
			{
				"doc" : "Returns the campaign payload that will activate with this ritual payload, if valid",
				"name" : "CampaignPayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignPayloadRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoRitualPayloadDiplomaticAttitudeChangeRecord with the diplomatic attitude that this payload will change",
				"name" : "DiplomaticAttitudeChangeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualPayloadDiplomaticAttitudeChangeRecord"
				}
			}
		]
	},
	"CcoRitualPayloadSpawnAgentRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadSpawnAgentRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpawnToPool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentSubtypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AgentTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadSpawnArmyRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadSpawnArmyRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpawnAtRitualSite",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionOverrideContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpawnableForceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadSpawnMercenaryRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadSpawnMercenaryRecord",
		"symbols" : 
		[
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpawnableUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadSpawnStormRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadSpawnStormRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Strength",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxTurnsDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RegionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "StormTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualPayloadTeleportArmyRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a RITUAL_PAYLOAD_TELEPORT_ARMY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadTeleportArmyRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all teleport payloads in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualPayloadTeleportArmyRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoRegionRecord with the region record where the army will teleport to",
				"name" : "RegionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRegionRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoRitualPayloadRecord with the payload context",
				"name" : "PayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualPayloadRecord"
				}
			}
		]
	},
	"CcoRitualPayloadTriggerDilemmaRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualPayloadTriggerDilemmaRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DilemmaContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Payload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoRitualRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a RITUAL_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoRitualRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of effect bundles that get applied at the start of the ritual",
				"name" : "StartPayloadEffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			},
			
			{
				"doc" : "Returns the icon path of the ritual",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with all ritual records from the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoRitualRecord"
				}
			},
			
			{
				"doc" : "Returns the key of the ritual",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if payload application is delayed for this ritual",
				"name" : "DelayPayloadApplication",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the ritual can be interrupted",
				"name" : "Interruptable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the ritual is hostile",
				"name" : "Hostile",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the sort order of the ritual",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cooldown of the ritual category",
				"name" : "TargetCategoryCooldown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cooldown time until the ritual can be performed again",
				"name" : "CooldownTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cast time of the ritual",
				"name" : "CastTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cooldown time of the ritual after failing to perform",
				"name" : "FailureCooldownTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the cooldown time of the ritual among all campaign faction",
				"name" : "GlobalCooldownTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the amount of slaves needed to perform this ritual",
				"name" : "SlaveCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the base resource cost of the ritual",
				"name" : "ResourceTransactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignResourceTransaction"
				}
			},
			
			{
				"doc" : "Returns a CcoRitualCategoryRecord with the category the ritual is part of",
				"name" : "CategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualCategoryRecord"
				}
			},
			
			{
				"doc" : "The display name without the first part (only the actual name)",
				"name" : "SpawnedMilitaryForceType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a CcoRitualPayloadRecord with the payload that gets applied at the completion of the ritual",
				"name" : "CompletionPayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualPayloadRecord"
				}
			},
			
			{
				"doc" : "Returns the additional ui explanation text of the ritual",
				"name" : "AdditionalExplanationText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a CcoRitualPayloadRecord with the payload that gets applied at the start of the ritual",
				"name" : "StartPayloadContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRitualPayloadRecord"
				}
			},
			
			{
				"doc" : "Returns the localised name of the ritual",
				"name" : "DisplayName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a list of effects that are applied while the ritual is active",
				"name" : "ActiveEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the localised description of the ritual",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a string with the category the ritual is part of",
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of effect bundles that get applied at the completion of the ritual",
				"name" : "CompletionPayloadEffectBundleList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffectBundle"
				}
			}
		]
	},
	"CcoRuntimeObject" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoRuntimeObject",
		"symbols" : 
		[
			
			{
				"name" : "Internal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoSaveGameHeader" : 
	{
		"area" : "Campaign",
		"doc" : "Wrapper for a save game header",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoSaveGameHeader",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if save made with different build to current game, to warn of potential issues/changes",
				"name" : "IsDifferentBuildVersion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if save is in the cloud",
				"name" : "IsCloudSave",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Current year in the save game",
				"name" : "Year",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Current turn number in the save game",
				"name" : "TurnNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the filename",
				"name" : "Filename",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the formatted time the save was made",
				"name" : "TimeText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the formatted date the save was made",
				"name" : "DateText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the difficulty of the campaign",
				"name" : "DifficultyText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns name of faction playing as (use this instead of record as supports renaming of faction)",
				"name" : "FactionName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Current season in the save game",
				"name" : "SeasonText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignMapPlayableAreaRecord for campaign",
				"name" : "CampaignRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignMapPlayableAreaRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoFactionRecord for faction playing as",
				"name" : "FactionRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactionRecord"
				}
			}
		]
	},
	"CcoSavedCharacterInfo" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a SAVED_CHARACTER_INFO struct",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSavedCharacterInfo",
		"symbols" : 
		[
			
			{
				"doc" : "Returns true if the character can be recruited",
				"name" : "CanRecruit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns portrait image filepath",
				"name" : "PortraitImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a tooltip explaining why the character cannot be recruited, for campaign only",
				"name" : "TooltipReason",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this character is an agent",
				"name" : "IsAgent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns an int with the cost to recruit this character",
				"name" : "RecruitmentCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a list of traits that the saved character has",
				"name" : "CharacterTraitLevelList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCharacterTraitLevelRecord"
				}
			},
			
			{
				"doc" : "Returns the localised character type name",
				"name" : "CharacterTypeName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the saved character",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the unit details associated with this unit",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the main unit record for this saved character",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the agent subtype record context of the saved character",
				"name" : "AgentSubtypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"doc" : "Returns the agent record context of the saved character",
				"name" : "AgentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentRecord"
				}
			},
			
			{
				"doc" : "Returns the background skill record of the character",
				"name" : "BackgroundSkillRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCharacterSkillRecord"
				}
			}
		]
	},
	"CcoScriptObject" : 
	{
		"area" : "Common",
		"doc" : "Script adds these via script function effect.set_context_value.Then allows us to leverage context framework so for example could show fill bar for faction awesomeness without requiring any C++ code.Also these can be used in layouts for a global value registry system where can get/set arbitrary global values using ContextInitScriptObject in conjunction with other callbacks like ContextVisibilitySetter and ContextCommandLeftClick for example",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoScriptObject",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the unique key of this script object",
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the numeric value of the script object from the context system (instead of via script)",
				"name" : "SetNumericValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the string value of the script object from the context system (instead of via script)",
				"name" : "SetStringValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the id of the last component that set our value",
				"name" : "LastComponentThatSetOurValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "If script object for a table, returns root of table which is a recursive type which can point have child table nodes",
				"name" : "TableValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoScriptTableNode"
				}
			},
			
			{
				"doc" : "Returns the string value of this script value",
				"name" : "StringValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the numeric value of this script value",
				"name" : "NumericValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoScriptObjectList" : 
	{
		"area" : "Common",
		"doc" : "Used purely for Context viewer, has function to expose list of all script objects currently in cache so can track in context viewer",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoScriptObjectList",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the list of all script objects currently in cache so can track in the context viewer",
				"name" : "ScriptObjectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			}
		]
	},
	"CcoScriptTableNode" : 
	{
		"area" : "Common",
		"doc" : "A wrapper for of a Lua Table, recursive type",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoScriptTableNode",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns if there's a value for the key in the table value of the current node, can recurse through children.",
				"name" : "HasValueForKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the value for the matching key in the table value of the current node if present, doesn't traverse more nodes.",
				"name" : "ValueForKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the value for the matching key in the table value of the current node if present, will traverse children using DFS.",
				"name" : "FindValueForKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"doc" : "Returns the value of this node, can be a bool, String, numerical value, or another list of nodes",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"doc" : "Returns the key of this node, can be a bool, String, numerical value, or another list of nodes",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			}
		]
	},
	"CcoSeasonRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSeasonRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Onscreen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoSettlementClimateTypeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSettlementClimateTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UiDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UiName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UiBackgroundImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UiIconImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Type",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoShapeshiftForm" : 
	{
		"area" : "Common",
		"doc" : "Temporary information about a shapeshifting form constructed with a form ancillary record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoShapeshiftForm",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns whether this form should be in the list given a search string",
				"name" : "MatchesQuery",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoCultureRecords this form is part of",
				"name" : "CulturesPartOfList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCultureRecord"
				}
			},
			
			{
				"doc" : "Returns the nearest CcoCampaignCharacter to the selected player for this form (or null)",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the associated CcoMainUnitRecord",
				"name" : "MainUnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the associated CcoAgentSubtypeRecord",
				"name" : "AgentSubtypeRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeRecord"
				}
			},
			
			{
				"doc" : "Returns the portrait path for this form. Looks in the 'ui/portraits/frontend_leaders' folder",
				"name" : "PortraitPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Unlocks this form for the current faction",
				"name" : "DevUnlock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_ui" ]
			},
			
			{
				"doc" : "Equips this form for the players faction",
				"name" : "Equip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns whether the form is equipped for the current player",
				"name" : "IsEquipped",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the form is locked for the current player",
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether there is a character on the map for this form",
				"name" : "HasCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCultureRecord"
					}
				],
				"doc" : "Returns whether this form is part of the given CcoCultureRecord",
				"name" : "IsPartOfCulture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoSliderValueContext" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoSliderValueContext",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the percentage value of the slider",
				"name" : "SliderValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoSpawnableForceRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSpawnableForceRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitListsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoSpawnableForceUnitJunctionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSpawnableForceUnitJunctionRecord",
		"symbols" : 
		[
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpawnableForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinXp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxXp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoSpawnableForceUnitListJunctionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSpawnableForceUnitListJunctionRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinXp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxXp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MaxAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitListContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpawnableForce",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoSpecialAbilityGroupRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a SPECIAL_ABILITY_GROUP_RECORD record from special_ability_groups_tables",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSpecialAbilityGroupRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the the cataclysm CcoUnitAbility for the Storm of Magic ascendancy",
				"name" : "CataclysmAbility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns the the phase record for the current Storm of Magic ascendancy, which contains the effects and attributes lists",
				"name" : "AscendancyPhaseRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Returns the list of CcoUnitSpecialAbilityRecord in this ability group",
				"name" : "AbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSpecialAbilityRecord"
				}
			},
			
			{
				"doc" : "Returns true if this is a runic lore",
				"name" : "IsRunicLore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is one of the three skaven lores",
				"name" : "IsSkavenLore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this is a group that consists of abilities from other groups (special cases where some units have mix of lores)",
				"name" : "IsCompositeGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the sort order for ability groups",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the colour for this ability group",
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the state name for use on buttons",
				"name" : "ButtonName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised name to use for the ability group",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the icon path to use specifically for buttons on the UI",
				"name" : "ButtonIconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the icon path for UI",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the db key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the CcoSpecialAbilityGroupRecord context for our parent lore if we are a child (sub) lore, such as a specific vampires vampiric lore",
				"name" : "ParentLoreContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			},
			
			{
				"doc" : "Returns the list of all CcoSpecialAbilityGroupRecord in the special_ability_groups_table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			}
		]
	},
	"CcoSpecialAbilityIntensitySettingRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a SPECIAL_ABILITY_INTENSITY_SETTING_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSpecialAbilityIntensitySettingRecord",
		"symbols" : 
		[
			
			{
				"name" : "UpdatesOnlyWhenAbilityActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Inverse",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "MaxAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "DefaultAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "AbilityRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitSpecialAbilityRecord"
				}
			},
			
			{
				"name" : "IntensityType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityIntensitySettingRecord"
				}
			},
			
			{
				"name" : "MaxIntensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "HasConstantIntensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoSpecialAbilityPhaseRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a SPECIAL_ABILITY_PHASE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSpecialAbilityPhaseRecord",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Takes unintensified value and a float formatter then returns the value of label as string (e.g if we have intensity as 0.4f and max intensity is 1, then we pass 8 and %f. It will format float into value fields with 3.2f and 8)",
				"name" : "IntensifiedValueText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if regenerates mana",
				"name" : "HasManaRegenMod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the calculated damage per second amount",
				"name" : "DamagePerSecond",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the localised name to display on the UI",
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this phase deals damage",
				"name" : "HasDamageAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the record wrapped damage amount",
				"name" : "DamageAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this phase heals barrier",
				"name" : "HasBarrierHealAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns icon path to use in UI icons representing the phase",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the calculated overall damage amount",
				"name" : "Damage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns string for positive, negative or both",
				"name" : "EffectType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if this phase heals",
				"name" : "HasHealAmount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns how often applys HealPercent to target",
				"name" : "HpChangeFrequency",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the db key of the phase record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if this phase affects recharge",
				"name" : "HasAbilityRechargeChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoSpecialAbilityPhaseRecord for the effect imbued to the target",
				"name" : "ImbueContactContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Returns the modifier to morale",
				"name" : "MoraleChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this phase affects enemies",
				"name" : "AffectsEnemies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the additional ui effect list of this phase",
				"name" : "AdditionalUiEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbilitiesAdditionalUiEffectRecord"
				}
			},
			
			{
				"doc" : "Returns the duration in seconds that this phase lasts",
				"name" : "Duration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Percentage of targets max barrier HP will heal after all HpChangeFrequency ticks, (so if phase lasts 10 seconds and HpChangeFrequency is 1 and HealPercent is 0.01, then will heal 10%)",
				"name" : "TotalBarrierHealPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this phase affects allies",
				"name" : "AffectsAllies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns list of all CcoSpecialAbilityPhaseRecord in db table special_ability_phases_table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Returns true if this phase should NOT be displayed in the UI",
				"name" : "IsHiddenInUi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Percentage of targets max HP will heal after all HpChangeFrequency ticks, (so if phase lasts 10 seconds and HpChangeFrequency is 1 and HealPercent is 0.01, then will heal 10%)",
				"name" : "TotalHealPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this imbues a units attack with flaming attack bonuses",
				"name" : "ImbueIgnition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoUnitAttributeRecord provided by phase",
				"name" : "UnitAttributeList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAttributeRecord"
				}
			},
			
			{
				"doc" : "Percentage of targets max HP will heal for each HpChangeFrequency (0-1), (so if phase lasts 10 seconds and HpChangeFrequency is 2, then will heal this amount 5 times)",
				"name" : "HealPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this removes magical attacks on the target",
				"name" : "RemoveMagical",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Float"
					}
				],
				"doc" : "Returns a list of CcoEffect so can see effects of phase",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the modifier applied to recharge times of abilities",
				"name" : "AbilityRechargeChange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a list of CcoSpecialAbilityPhaseStatEffectRecord so know what stats affected by phase",
				"name" : "AbilityPhaseEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseStatEffectRecord"
				}
			},
			
			{
				"doc" : "Returns true if this imbues a units attack with magic attack bonuses",
				"name" : "ImbueMagical",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the modifier applies to inspiration aura of a unit",
				"name" : "InspirationAuraRangeMod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns true if this phase replenish or destroy ammunition. positive value replenish ammunition, negative value destroys ammunition",
				"name" : "HasAmmunitionReplenishment",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoStringValues for the phase effect flags (special case things like freeze fatigue)",
				"name" : "PhaseEffectFlagList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns true if this resurrects a unit",
				"name" : "Resurrect",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the ammunition replenishment this phase gives. positive value replenish ammunition, negative value destroys ammunition",
				"name" : "AmmunitionReplenishment",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the multiplier applies to fatigue (for freezing fatigue or tiring a unit out)",
				"name" : "FatigueChangeRatio",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoUnitAttributeRecord"
					}
				],
				"doc" : "Returns true if this phase removes provided unit attribute, e.g. removes causes fear attribute on Whip of Agony",
				"name" : "RemovesAttribute",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the ability intensity value",
				"name" : "Intensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Takes unintensified value and an int formatter then returns the range value of label as string (e.g if we have intensity as 0.4f and max is 1, then we pass 10 and %d. It will format int into value fields with (2 - 4) and (5 - 10))",
				"name" : "IntensifiedRangeIntValueText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the range the effect can spread like a contagion if this is set to a non-zero value",
				"name" : "SpreadRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this phase provides unit attributes",
				"name" : "HasUnitAttributes",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the modifier to the maxa max depletion",
				"name" : "ManaMaxDepletionMod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Takes unintensified value and a float formatter then returns the range value of label as string (e.g if we have intensity as 0.4f and max is 1, then we pass 8 and %f. It will format float into value fields with (1.6 - 3.2) and (4 - 8))",
				"name" : "IntensifiedRangeValueText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this phase has effects",
				"name" : "HasEffects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the modifier to mana regeneration",
				"name" : "ManaRegenMod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Takes unintensified value and an int formatter then returns the value of label as string (e.g if we have intensity as 0.4f and max is 1, then we pass 10 and %d. It will format int into value fields with 4 and 10)",
				"name" : "IntensifiedIntValueText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if this depletes mana",
				"name" : "HasManaMaxDepletionMod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the max number of entities that can be damaged by this phase",
				"name" : "MaxDamagedEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoSpecialAbilityPhaseStatEffectRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSpecialAbilityPhaseStatEffectRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "How",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Stat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Phase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoSpineAnimationState" : 
	{
		"area" : "Common",
		"doc" : "Wraps a spine animation state from a spine renderer",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoSpineAnimationState",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSpineSkeleton"
					}
				],
				"name" : "Apply",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "UpdateAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "ClearAnimations",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "Track",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineTrackEntry"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetEmptyAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineTrackEntry"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "AddEmptyAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineTrackEntry"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "SetAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineTrackEntry"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "AddAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineTrackEntry"
				}
			}
		]
	},
	"CcoSpineBone" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a bone in spine that allows it to be modified through context",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoSpineBone",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "SetPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetRotation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Rotation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "WorldPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			}
		]
	},
	"CcoSpineController" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a spine rendering controller on a component",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoSpineController",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sets the spine dock point",
				"name" : "SetDockPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the animation state context of the spine controller",
				"name" : "AnimationStateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineAnimationState"
				}
			},
			
			{
				"doc" : "Returns the skeleton context of the spine controller",
				"name" : "SkeletonContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineSkeleton"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Sets the spine animation on the component. Can pass it if it should loop (false by default) and also the track number (0 by default)",
				"name" : "SetAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoSpineSkeleton" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a skeleton in spine that allows it to be modified through context",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoSpineSkeleton",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector2"
					}
				],
				"name" : "SetScale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "SetSkin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetToSetupPose",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Scale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector2"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "Bone",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineBone"
				}
			},
			
			{
				"name" : "RootBone",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineBone"
				}
			}
		]
	},
	"CcoSpineTrackEntry" : 
	{
		"area" : "Common",
		"doc" : "Wraps an animation track entry in spine",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoSpineTrackEntry",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetMixDuration",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetAnimationTimeScale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetAnimationTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentAnimationName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoString" : 
	{
		"area" : "Misc",
		"doc" : "Wrapper for string type, for dealing with text (localised and unlocalised, we abstract the difference between wide/narrow for simplicity of context system users)",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoString",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the length of this string",
				"name" : "Length",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns a copy of this string where all instances of the first string supplied are replaced with the second string supplied",
				"name" : "Replace",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns the first index of the specified string, searching from the back. Returns -1 if none found. Can specify a starting position to search from as second parameter, this defaults to 0 if none specified",
				"name" : "RFind",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns the first index of the specified string, searching from the front. Returns -1 if none found. Can specify a starting position to search from as second parameter, this defaults to 0 if none specified",
				"name" : "Find",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if this string contains the specified string",
				"name" : "Contains",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this string is empty/blank",
				"name" : "IsEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the string value represented by this string",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if this string ends with the specified string",
				"name" : "EndsWith",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if this string starts with the specified string",
				"name" : "StartsWith",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns hash of the string",
				"name" : "Hash",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a copy of this string where any text tags are parsed and replaced in with the actual text",
				"name" : "ParseTextReplacements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the colour tag from the specified text",
				"name" : "ExtractColourFromText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the image path inside the image tag in the specified text",
				"name" : "ExtractImageIconFromText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					}
				],
				"doc" : "Returns a copy of this string where all letters are lowercase, this uses default string lowercase and will not take localisation into account",
				"name" : "ToLowerUnlocalised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a copy of this string with the file extension removed, assuming this string is a filepath",
				"name" : "RemoveFilepathExtension",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a copy of this string where all letters are lowercase, this uses current locale so the string will use special characters and might not be same as English lowercase",
				"name" : "ToLowerLocalised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a copy of this string with the parent directory removed, assuming this string is a filepath",
				"name" : "RemoveFilepathDirectory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					}
				],
				"doc" : "Returns a copy of this string where all letters are uppercase, this uses default string uppercase and will not take localisation into account",
				"name" : "ToUpperUnlocalised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a copy of this string with leading whitespace removed",
				"name" : "RemoveLeadingWhitespace",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a copy of this string where all letters are uppercase, this uses current locale so the string will use special characters and might not be same as English uppercase",
				"name" : "ToUpperLocalised",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a copy of this string with all text tags removed",
				"name" : "RemoveTextTags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns a sub-section of this string as specified by the starting index and optional length (if no length will return from start index to end of string)",
				"name" : "Substr",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoStringValue" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoStringValue",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the numeric part of the value as a float",
				"name" : "FloatValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the numeric part of the value as an int",
				"name" : "IntValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the string part of the value",
				"name" : "StringValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoSubcultureRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a subculture record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSubcultureRecord",
		"symbols" : 
		[
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSubcultureRecord"
				}
			},
			
			{
				"doc" : "Returns list of CcoArmySpecialAbilityRecord where each faction in custom battle with this culture has this army ability (so race army abilities)",
				"name" : "ArmyAbilityList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoArmySpecialAbilityRecord"
				}
			},
			
			{
				"name" : "BattlePlaystyleDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ConfederationSummaryName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ConfederationScreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Index",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Culture",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCultureRecord"
				}
			}
		]
	},
	"CcoSummedValueContext" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoSummedValueContext",
		"symbols" : 
		[
			
			{
				"name" : "SummedList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "OriginalContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"name" : "SummedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoSymbolTest" : 
	{
		"area" : "Common",
		"doc" : "This is an example",
		"is_persistent" : false,
		"is_temporary" : true,
		"name" : "CcoSymbolTest",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"name" : "VariadicArguments",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSymbolTest"
					}
				],
				"name" : "UsefulExtensionMethod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoSymbolTest"
					}
				],
				"name" : "IsOptionalEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoSymbolTest"
					}
				],
				"name" : "GetContextIdOptional",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "ThisContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSymbolTest"
				}
			},
			
			{
				"name" : "GetString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "string", "depreciated" ]
			},
			
			{
				"name" : "GetFloat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "float", "depreciated" ]
			},
			
			{
				"name" : "GetInt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "int", "depreciated" ]
			},
			
			{
				"name" : "old",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Ten",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Context",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "id_args",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Useful function",
				"name" : "id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "debug", "depreciated" ]
			},
			
			{
				"name" : "SameName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSymbolTest"
					}
				],
				"name" : "UsefulExtensionMethodWithConst",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoSymbolTestSecond" : 
	{
		"area" : "Common",
		"doc" : "This is a second example",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoSymbolTestSecond",
		"symbols" : 
		[
			
			{
				"name" : "SameName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSymbolTest"
					}
				],
				"name" : "id2",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoSymbolTest"
					}
				],
				"name" : "id",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Context",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoTechnologyRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for a technology record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTechnologyRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list with all technologies in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyRecord"
				}
			},
			
			{
				"doc" : "Returns true if this technology should be hidden in the technology screen",
				"name" : "IsHidden",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the long description of the technology",
				"name" : "LongDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the short description of the technology",
				"name" : "ShortDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the technology",
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoTechnologyUiGroupRecord" : 
	{
		"area" : "Record",
		"doc" : "Record wrapper for technology ui group record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTechnologyUiGroupRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the localised name of this group, if any",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the colour of the group",
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the key of this record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of CcoPair, where each pair has a CcoTechnologyUiGroupRecord and a VECTOR_4 with link positions",
				"name" : "ChildAndLinkPositionsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the context of the right-most technology for this group",
				"name" : "RightMostTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the context of the left-most technology for this group",
				"name" : "LeftMostTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the context of the bottom-most technology for this group",
				"name" : "BottomMostTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Returns the context of the top-most technology for this group",
				"name" : "TopMostTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"doc" : "Returns a list with all technology ui groups in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyUiGroupRecord"
				}
			},
			
			{
				"doc" : "Returns the background image for this group",
				"name" : "BackgroundImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised description of this group, if any",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoTechnologyUiTabRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a TECHNOLOGY_UI_TAB_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTechnologyUiTabRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTechnologyUiTabRecord"
				}
			},
			
			{
				"name" : "TierOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "TooltipString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoTeleportationNetworkNodeRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a TELEPORTATION_NETWORK_NODE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTeleportationNetworkNodeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the context of the teleportation template that the node is part of, if any",
				"name" : "TeleportationTemplateContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoTeleportationNodeTemplateRecord"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list with the effects the node provides, will be an empty list if the node is closed",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns a list with all records in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTeleportationNetworkNodeRecord"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignFaction of the faction that own the region where the node is positioned",
				"name" : "OwningFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"doc" : "Returns a CcoCampaignProvince of the province in which the teleport node is positioned",
				"name" : "ProvinceContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"doc" : "Returns the display position of the node",
				"name" : "Position",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns the time it takes to travel to this node",
				"name" : "TravelTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Handles a double click event",
				"name" : "HandleDoubleClick",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoTeleportationNodeTemplateRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a TELEPORTATION_NODE_TEMPLATE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTeleportationNodeTemplateRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all templates in the table",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTeleportationNodeTemplateRecord"
				}
			},
			
			{
				"doc" : "Returns true if the teleportation nodes using this template display timer",
				"name" : "ShouldDisplayTimer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the teleportation nodes in this template can be closed by the player",
				"name" : "Closable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of effects that the teleportation nodes from this template provide",
				"name" : "EffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoEffect"
				}
			},
			
			{
				"doc" : "Returns the localised description of the template",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the template",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the layout name of the template",
				"name" : "Layout",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the image path of the template",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the key of the record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoTempleOfTheOldOnes" : 
	{
		"area" : "Campaign",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTempleOfTheOldOnes",
		"symbols" : 
		[
			
			{
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentEffectBundle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumberOfBuildings",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoTimeOfLegendsCampaignRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a TIME_OF_LEGENDS_CAMPAIGN_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTimeOfLegendsCampaignRecord",
		"symbols" : 
		[
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoTimeOfLegendsCampaignRecord"
				}
			},
			
			{
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ImagePath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "LocalisedTitle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "CampaignMap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoTreasureHuntExtraInformationRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTreasureHuntExtraInformationRecord",
		"symbols" : 
		[
			
			{
				"name" : "OverlayImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ColourBlindModeOverlay",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Option4Image",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Option3Image",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Option2Image",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Option1Image",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoTreeLink" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTreeLink",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the child slot context linking to",
				"name" : "ChildContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the parent slot context linking from",
				"name" : "ParentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoTreeLinkWithContexts" : 
	{
		"area" : "Common",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoTreeLinkWithContexts",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the child context associated with the slot the link is going to",
				"name" : "ChildContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the child component context the link is going to",
				"name" : "ChildComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the parent context associated with the slot from",
				"name" : "ParentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the parent component context the link is from",
				"name" : "ParentComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			}
		]
	},
	"CcoURI" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a URI, allows access to fields and arguments provided",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoURI",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Return the value of the argument provided if it exists in URI",
				"name" : "Argument",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the URI's path, or empty if none",
				"name" : "Path",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the URI's host, or empty if no authority",
				"name" : "Host",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the URI's scheme",
				"name" : "Scheme",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Return true if argument exists in query, otherwise false",
				"name" : "HasArgument",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoUiColourRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUiColourRecord",
		"symbols" : 
		[
			
			{
				"name" : "Green",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Red",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetCustomColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CanPlayerSet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ShowInUied",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayerDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Type",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Blue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUiMainThemeOptionRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UI_MAIN_THEME_OPTION_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUiMainThemeOptionRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Return list of CcoUiMainThemeOptionRecords in the database",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUiMainThemeOptionRecord"
				}
			},
			
			{
				"doc" : "Returns the colour used by fullscreen background images for the main theme",
				"name" : "FullscreenBackgroundColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the colour for the main theme",
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns the key of the main theme record",
				"name" : "MainTheme",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the tooltip text for the main theme",
				"name" : "TooltipText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the display name for the main theme",
				"name" : "MainThemeName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoUiPurchasableEffectsToHexIdRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUiPurchasableEffectsToHexIdRecord",
		"symbols" : 
		[
			
			{
				"name" : "UnitPurchasableEffectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Tier",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Category",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HexId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUiUnitGroupParentRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUiUnitGroupParentRecord",
		"symbols" : 
		[
			
			{
				"name" : "GroupList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MpCap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Order",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUiUnitGroupingRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUiUnitGroupingRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ParentGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Onscreen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUiUnitStatRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UI_UNIT_STAT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUiUnitStatRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns a list of all CcoUiUnitStatRecords",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUiUnitStatRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns a string with the modifier the ai would receive from the passed in float.",
				"name" : "PreviewAiStatModifierString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns whether the value should be clamped when above the maximum",
				"name" : "ClampDisplayedMaximum",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether the value should be clamped when below the minimum",
				"name" : "ClampDisplayedMinimum",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the integer used to sort stats (Lower is higher priority)",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the min value permitted for this stat",
				"name" : "MinValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the max value permitted for this stat",
				"name" : "MaxValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the icon path associated with the stat",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised tooltip text for the stat",
				"name" : "TooltipText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of the stat (Sometimes with a leading image)",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the stat",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoUiUnitStatusRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUiUnitStatusRecord",
		"symbols" : 
		[
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Priority",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUiWarning" : 
	{
		"area" : "Common",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoUiWarning",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the severity (high, medium, low) of this warning",
				"name" : "Severity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a description of this warning",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a key associated with this warning, unique within this type of warning (type + key is globally unique)",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the type of warning this is (category)",
				"name" : "WarningType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns whether this ui warning is displayed in location",
				"name" : "IsDisplayedInLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Toggles whether this ui location should be displayed in location",
				"name" : "ToggleIsDisplayedInLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the component context for this warning",
				"name" : "ComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			}
		]
	},
	"CcoUnitAbilitiesAdditionalUiEffectRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNIT_ABILITIES_ADDITIONAL_UI_EFFECT_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitAbilitiesAdditionalUiEffectRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbilitiesAdditionalUiEffectRecord"
				}
			},
			
			{
				"name" : "EffectState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "LocalisedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoUnitAbility" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a BATTLE_SETUP_SPECIAL_ABILITY",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitAbility",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the duration of time that the unit ability is active",
				"name" : "ActiveTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether additional ui effects are present for this unit ability",
				"name" : "HasAdditionalUiEffects",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the name of the unit ability",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns whether the unit ability updates every frame",
				"name" : "UpdatesEveryFrame",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the file path to the unit ability's icon",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns how far this ability can spread (for hex abilities like contagion)",
				"name" : "SpreadRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the additional ui effect list of this unit ability",
				"name" : "AdditionalUiEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbilitiesAdditionalUiEffectRecord"
				}
			},
			
			{
				"doc" : "Returns the amount of mana used by this unit ability",
				"name" : "ManaUsed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether allied units are affected by this ability",
				"name" : "AffectsAllies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the unit ability's record key",
				"name" : "RecordKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a list of all CcoSpecialAbilityPhaseRecord from all channels",
				"name" : "AllChannelsPhaseList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Returns the number of times this ability can be used. -1 indicates unlimited uses",
				"name" : "NumUses",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether enemy units are affected by this ability",
				"name" : "AffectsEnemy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoPair<CcoStringValue, CcoContextList<CcoSpecialAbilityPhaseRecord>>; each channels name with the phases within that channel",
				"name" : "PhaseChannelList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoPair"
				}
			},
			
			{
				"doc" : "Returns the maximum range of a target an ability can be used on",
				"name" : "TargetRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the unit special ability record",
				"name" : "UnitSpecialAbilityRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitSpecialAbilityRecord"
				}
			},
			
			{
				"doc" : "Returns whether this unit ability is targetted",
				"name" : "IsTargetedAbility",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the effect range of the ability",
				"name" : "EffectRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the minimum range to use the ability",
				"name" : "MinimumRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether the unit ability affects the unit that triggered it",
				"name" : "AffectsSelf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the unit ability's spawned unit as a CcoMainUnitRecord if it exists",
				"name" : "SpawnedMainUnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the unit ability's spawned unit as a CcoUnitLandRecord if it exists",
				"name" : "SpawnedUnitLandRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitLandRecord"
				}
			},
			
			{
				"doc" : "Returns the recharge context details for this unit ability",
				"name" : "RechargeContextName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns whether the unit ability is passive",
				"name" : "IsPassive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the special ability behaviour group key if possible (As a string)",
				"name" : "SpecialAbilityBehaviourGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the unit ability's projectile record context",
				"name" : "ProjectileRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProjectileRecord"
				}
			},
			
			{
				"doc" : "Returns whether additional ui effects are present for this unit ability",
				"name" : "AffectsOnlyFriendly",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the timing details text for this unit ability",
				"name" : "TimingDetailsText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the vortex record context for this ability",
				"name" : "VortexRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleVortexRecord"
				}
			},
			
			{
				"doc" : "Returns whether additional ui effects are present for this unit ability",
				"name" : "AffectsOnlyEnemy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the unit ability's enabled if description",
				"name" : "EnabledIfDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the bombardment record context for this ability",
				"name" : "BombardmentRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProjectileBombardmentRecord"
				}
			},
			
			{
				"doc" : "Returns the chance that this unit ability will miscast",
				"name" : "MiscastChance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the cast range of the unit ability",
				"name" : "CastRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the unit ability's valid target description",
				"name" : "ValidTargetDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the uniqueness record context for this ability",
				"name" : "UniquenessRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAncillaryUniquenessGroupingRecord"
				}
			},
			
			{
				"doc" : "Returns maximum number of enemies might be affected by this ability",
				"name" : "MaxAffectedEnemyCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the ability group context for this ability",
				"name" : "AbilityGroupContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityGroupRecord"
				}
			},
			
			{
				"doc" : "Returns maximum number of allies might be affected by this ability",
				"name" : "MaxAffectedAllyCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the unit ability's valid usage description",
				"name" : "ValidUsageDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns whether the timing details should be shown for this unit ability",
				"name" : "ShouldShowTimingDetails",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the duration of time between triggering the unit ability and it actually being performed",
				"name" : "WindUpTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the unit ability's type as a CcoUnitAbilityTypeRecord cco",
				"name" : "TypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbilityTypeRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoMainUnitRecord"
					}
				],
				"doc" : "Opens the spell browser entry for this unit ability. Can supply an optional unit to open its page",
				"name" : "OpenSpellBrowser",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the unit ability's target type",
				"name" : "TargetType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns whether this unit ability is hidden in the UI",
				"name" : "IsHiddenInUI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the duration of shared time the unit ability takes to recharge when any other ability with shared cooldown is used",
				"name" : "SharedRechargeTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether the unit ability has enabled if flags",
				"name" : "HasEnabledIfFlags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the ability has mirror behaviour associated with it",
				"name" : "HasMirrorBehaviour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the source type name of this unit ability",
				"name" : "SourceTypeName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the duration of time the unit ability takes to recharge",
				"name" : "RechargeTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether the unit ability has invalid target flags",
				"name" : "HasInvalidTargetFlags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if the ability has a shared cooldown",
				"name" : "HasSharedRechargeTimer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the unit ability's tooltip",
				"name" : "TooltipText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns whether the unit ability has invalid usage flags",
				"name" : "HasInvalidUsageFlags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoUnitAbilityDetails" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for unit ability details, any capability shown on unit info basically (traits, abilities, shot types, etc)",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoUnitAbilityDetails",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the sound event related to this projectile shot type ",
				"name" : "ShotTypesSoundCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "sound" ]
			},
			
			{
				"doc" : "Returns the sound event related to this ability behaviour",
				"name" : "BehavioursSoundCategory",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "sound" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the localised tooltip of the unit ability",
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns active/inactive depending on if the unit ability is locked/unlocked",
				"name" : "State",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the localised name of this unit ability",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of this unit ability details",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the icon path of the ability icon",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the category state name this unit ability belongs to",
				"name" : "CategoryStateName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the CcoProjectileRecord if the unit ability has a missile weapon record",
				"name" : "ProjectileRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoProjectileRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoAbilityCollection associated with the unit ability details",
				"name" : "AbilityCollectionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAbilityCollectionRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitAbility associated with the unit ability details",
				"name" : "AbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"doc" : "Returns a list of the ability categories",
				"name" : "CategoryStateList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				}
			},
			
			{
				"doc" : "Returns true if this unit ability is locked",
				"name" : "IsLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if this unit ability is a passive ability",
				"name" : "IsPassive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoUnitAbilityRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitAbilityRecord",
		"symbols" : 
		[
			
			{
				"name" : "IconPathSmall",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsHiddenInUi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsUnitUpgrade",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "VideoName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TooltipText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RequiresEffectEnabling",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitAbilityTypeRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNIT_ABILITY_TYPE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitAbilityTypeRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the icon path for this ability type",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the localised description of this ability type (Used in tooltips)",
				"name" : "Description",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised name of this ability type",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the key of the ability type record",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns all CcoUnitAbilityTypeRecords",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbilityTypeRecord"
				}
			},
			
			{
				"doc" : "Returns whether a cursor trail should be shown",
				"name" : "ShowCursorTrail",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			}
		]
	},
	"CcoUnitAttributeRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitAttributeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BulletText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RemovesEffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ImuedEffectText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitBulletPoint" : 
	{
		"area" : "Common",
		"doc" : "Wrapper for a UI_UNIT_BULLET_POINT object",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitBulletPoint",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the sort order of the bullet point",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns a string with the icon path of the bullet point",
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a string with the state of the bullet point",
				"name" : "State",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns a localised string with the tooltip of the bullet point",
				"name" : "TooltipText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a localised string with the name of the bullet point with the bullet icon in front",
				"name" : "LocalisedTextWithIcon",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns a localised string with the name of the bullet point",
				"name" : "LocalisedText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoUnitDetails" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for sharing common information for units of different types (battle, campaign, recruitable, etc) so can be shown on unit information panel as one type",
		"is_persistent" : false,
		"is_temporary" : false,
		"name" : "CcoUnitDetails",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the list of abilities attached to this unit",
				"name" : "AbilityIconList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns whether the unit hp is known to the player",
				"name" : "IsKnownHp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the list of abilities attached to this unit",
				"name" : "AbilityDetailsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitAbilityDetails"
				}
			},
			
			{
				"doc" : "Returns the required experience to rank up",
				"name" : "ExperienceRequiredForNextLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether the unit xp known to the player",
				"name" : "IsKnownXp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a CcoUnitDetails with the same unit details but without any previews",
				"name" : "PreBonusUnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the current experience of this unit",
				"name" : "ExperienceScore",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether the unit is a large entity",
				"name" : "IsLargeEntity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignCharacter of this unit",
				"name" : "CharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns a percentage of how close this unit is to level up",
				"name" : "ExperienceProgress",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns whether the unit is a bretonnian peasant.",
				"name" : "IsBretonnianPeasant",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoUnitRecord of this unit",
				"name" : "UnitRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"doc" : "Returns the CcoAgentSubtypeAgentPair of this unit",
				"name" : "AgentSubtypeAgentPairContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoAgentSubtypeAgentPair"
				}
			},
			
			{
				"doc" : "Returns the current experience level of the unit",
				"name" : "ExperienceLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if this unit is a character",
				"name" : "IsCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if a unit can be compared with another pinned unit",
				"name" : "HasComparison",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of initial men in this unit",
				"name" : "NumEntitiesInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleSetupUnit",
				"name" : "SetupUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSetupUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if the spell browser is open",
				"name" : "IsSpellBrowser",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of men alive in this unit",
				"name" : "NumEntities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the comparison context of this unit compared to the currently pinned unit",
				"name" : "ComparisonContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns true if we're in battle",
				"name" : "IsBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the hit point percentage left",
				"name" : "HitPointsPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignUnit of this unit, if we're in campaign",
				"name" : "CampaignUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignUnit"
				},
				"tags" : [ "campaign" ]
			},
			
			{
				"doc" : "Returns true if we're in campaign",
				"name" : "IsCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the number of initial hit points of this unit",
				"name" : "HitPointsInitial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the CcoBattleUnit for this unit, if we're in battle",
				"name" : "BattleUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleUnit"
				},
				"tags" : [ "battle" ]
			},
			
			{
				"doc" : "Returns the list of effects purchased for this unit",
				"name" : "PurchasedEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitPurchasableEffectRecord"
				}
			},
			
			{
				"doc" : "Returns the number of hit points left in this unit",
				"name" : "HitPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether cost should be shown",
				"name" : "ShowFoodCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns this unit's starting value of the given stat (key)",
				"name" : "BaseStatValueFromKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns whether cost should be shown",
				"name" : "ShowCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the rank of the commander of this unit, if in campaign",
				"name" : "CharacterRank",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "campaign" ]
			},
			
			{
				"doc" : "Returns the current hp percent of the barrier attached to this unit",
				"name" : "BarrierHpPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the base CcoUnitStat with the given key if it exists (and is visible) for this unit",
				"name" : "BaseStatContextFromKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Returns whether the unit has experience",
				"name" : "HasExperience",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the colour of the alliance this unit belongs to",
				"name" : "HealthBarColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				},
				"tags" : [ "battle" ]
			},
			
			{
				"doc" : "Returns the current hp of the barrier attached to this unit",
				"name" : "BarrierHp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the mass of the unit",
				"name" : "Mass",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the CcoUnitStat with the given key if it exists (and is visible) for this unit",
				"name" : "StatContextFromKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Returns the number of kills caused by this unit in a battle",
				"name" : "FoodCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the colour of the alliance this unit belongs to",
				"name" : "AllianceColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				},
				"tags" : [ "battle" ]
			},
			
			{
				"doc" : "Returns the max hp of the barrier attached to this unit",
				"name" : "BarrierMaxHp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the list of stats, such as weapon damage and defences, for this unit",
				"name" : "StatList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"doc" : "Returns the state of the unit harmony(yin/yang) or empty if the unit doesn't have a harmony effect",
				"name" : "HarmonyState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the number of kills caused by this unit in a battle",
				"name" : "KillCount",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the unit is being recruited",
				"name" : "IsBeingRecruited",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the health bar tooltip",
				"name" : "HealthTooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the bullet point list",
				"name" : "BulletPointList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitBulletPoint"
				}
			},
			
			{
				"doc" : "Returns the upkeep cost of this unit",
				"name" : "UpkeepCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if the unit uses randomised spells on cast",
				"name" : "HasRandomisedSpells",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the recruit cost of this unit",
				"name" : "RecruitCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns the text for bretonnia icon",
				"name" : "BretonniaIconTooltipText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the list of experience effects for this unit",
				"name" : "ExperienceEffectList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"doc" : "Returns is the unit is part of a transport army",
				"name" : "IsPartOfTransportArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the localised name of this unit",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the threshold of the next level",
				"name" : "ExperienceThreshold",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			}
		]
	},
	"CcoUnitLandRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNIT_LAND_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitLandRecord",
		"symbols" : 
		[
			
			{
				"name" : "SpotDistTree",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "MountRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMountRecord"
				}
			},
			
			{
				"name" : "EngineRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattlefieldEngineRecord"
				}
			},
			
			{
				"name" : "ExtraEnginesList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoLandUnitsToExtraEngineRecord"
				}
			},
			
			{
				"name" : "ManEntityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleEntityRecord"
				}
			},
			
			{
				"name" : "VisibilitySpottingRangeMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "ManAnimationsTable",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "VisibilitySpottingRangeMin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "CampaignActionPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitLandRecord"
				}
			},
			
			{
				"name" : "IsMale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "SyncLocomotion",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Reload",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "IsCamels",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "MountedDraughts",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "Morale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "CanBrace",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "NumEngines",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "MeleeDefence",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "CanSkirmish",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "ArticulatedRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoLandUnitArticulatedVehicleRecord"
				}
			},
			
			{
				"name" : "MeleeAttack",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "DamageModAll",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "TrainingLevel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ChargeBonus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "BonusHitPoints",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "DamageModMissile",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Accuracy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "RankDepth",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "DamageModPhysical",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "PrimaryMissileWeaponContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMissileWeaponRecord"
				}
			},
			
			{
				"name" : "FactionsUnitVariants",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "DamageModMagic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "DamageModFlame",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "PrimaryMeleeWeaponContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMeleeWeaponRecord"
				}
			},
			
			{
				"name" : "BattlePersonalities",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnScreenNameKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "PrimaryAmmo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "SecondaryAmmo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "SelectionVOTertiary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnScreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "ConcealedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "HidingScalar",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "SelectionVOSecondary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SpotDistScrub",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "NumMounts",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "SelectionVOPrimary",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitListRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitListRecord",
		"symbols" : 
		[
			
			{
				"name" : "UnitsList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitPortholeCameraSettingRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNIT_PORTHOLE_CAMERA_SETTING_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitPortholeCameraSettingRecord",
		"symbols" : 
		[
			
			{
				"doc" : "Returns list of all records of this type",
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitPortholeCameraSettingRecord"
				}
			},
			
			{
				"doc" : "Returns x,y,z,0 of camera target",
				"name" : "Target",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns camera theta in degrees",
				"name" : "Theta",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns camera phi in degrees",
				"name" : "Phi",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns camera fov in degrees",
				"name" : "Fov",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns camera distance",
				"name" : "Distance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the environment filepath to use",
				"name" : "EnvironmentFile",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the db records unique key",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoUnitPurchasableEffectRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitPurchasableEffectRecord",
		"symbols" : 
		[
			
			{
				"name" : "CategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectBundleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResourceIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResourceName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResourceCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CostContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitPurchasableEffectsCategoryRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitPurchasableEffectsCategoryRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnscreenName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitSetRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNIT_SET_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitSetRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSetRecord"
				}
			},
			
			{
				"name" : "MaxUnitExpLevelInclusive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "MinUnitExpLevelInclusive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "UseUnitExpLevelRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "SpecialEditionMask",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitsInSetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"name" : "DevCcoStringObjectId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoString"
				}
			}
		]
	},
	"CcoUnitSetToMpUnitCapRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNIT_SET_TO_MP_UNIT_CAP_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitSetToMpUnitCapRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitSetToMpUnitCapRecord"
				}
			},
			
			{
				"name" : "Cap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "LocalisedName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoUnitSpecialAbilityRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitSpecialAbilityRecord",
		"symbols" : 
		[
			
			{
				"name" : "MiscastGlobalBonus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumEffectedEnemyUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsMurderousProwess",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumEffectedFriendlyUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ParentAbilityKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OnlyAffectTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AdditionalMissileCp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AlwaysAffectSelf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AdditionalMeleeCp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "AffectSelf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MiscastChance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MinRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IsPassive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ManaCost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "EffectRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "WindUpTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetInterceptRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RechargeTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetGroundUnderEnemies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActiveTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetGroundUnderAllies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "NumUses",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetGround",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BaseRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BasicOptionAbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "OverpowerOptionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetEnemies",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetFriends",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ActivatedProjectileContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitAbilityContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "InitialRecharge",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TargetSelf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UpdateTargetsEveryFrame",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitStat" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for a unit stat shown in stat list from CcoUnitDetails::StatList",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoUnitStat",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the min value of the unit stat",
				"name" : "MinValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the max value of the unit stat",
				"name" : "MaxValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the difference between this and compared stat's value in percentage",
				"name" : "ComparisonValuePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the comparison value of this ability and pinned ability stat",
				"name" : "ComparisonValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns if stat is higher/lower/same than compared stat as a string",
				"name" : "ComparisonState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the name of the unit stat",
				"name" : "Name",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the localised tooltip for the unit stat",
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the db key for the stat",
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns true if stat should be represented as a percentage",
				"name" : "IsPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the icon path",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the CcoUnitDetails context of the unit detail that this stat belongs to",
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitDetails"
				}
			},
			
			{
				"doc" : "Returns the sort order of the unit stat",
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Gets highest percentage for stat from either modified stat or base stat. Used for back fill bar so can see buffs/debuffs.",
				"name" : "ValuePercentHighest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the CcoUnitStat of the unit stat without any previews",
				"name" : "PreBonusStatContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Gets lowest percentage for stat from either modified stat or base stat. Used for front fill bar so can see buffs/debuffs behind",
				"name" : "ValuePercentLowest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the CcoUnitStat of the compared unit stat",
				"name" : "ComparisonStatContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitStat"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns percent value of stat with no mods/buffs/debuffs",
				"name" : "ValuePercentBase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns a list of stat modifier icons",
				"name" : "ModifierIconList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitStatModIcon"
				}
			},
			
			{
				"doc" : "Returns the current percentage of the stat",
				"name" : "ValuePercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns a list of stat modifier icons for compared stat",
				"name" : "ComparisonModifierIconList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitStatModIcon"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns value of stat with no mods/buffs/debuffs",
				"name" : "ValueBase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns the displayed value of the unit stat, clamping it if necessary",
				"name" : "DisplayedValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"doc" : "Returns returns the current value of the unit stat",
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			}
		]
	},
	"CcoUnitStatModIcon" : 
	{
		"area" : "Common",
		"doc" : "Component context wrapper for a unit stat modifier icon",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoUnitStatModIcon",
		"symbols" : 
		[
			
			{
				"doc" : "Returns the CcoSpecialAbilityPhaseRecord for this stat modifier icon",
				"name" : "PhaseContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityPhaseRecord"
				}
			},
			
			{
				"doc" : "Returns localised tooltip",
				"name" : "Tooltip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the icon path",
				"name" : "Icon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			}
		]
	},
	"CcoUnitsCustomBattleMountRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitsCustomBattleMountRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MountName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "MountedUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "BaseUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitsCustomBattlePermissionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitsCustomBattlePermissionRecord",
		"symbols" : 
		[
			
			{
				"name" : "IsGeneralUnit",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasCustomBattleUpgrades",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Cost",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ArmoryItemList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "IconPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SetPieceCharacterContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GeneralPortrait",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SiegeUnitDefender",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SiegeUnitAttacker",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitDetailsContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "UnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoUnitsCustomBattleTypeCategoryRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNITS_CUSTOM_BATTLE_TYPE_CATEGORY_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitsCustomBattleTypeCategoryRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattleTypeCategoryRecord"
				}
			},
			
			{
				"name" : "IsHorizontalGroup",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "CategoryKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "CategoryName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "CategoryDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			}
		]
	},
	"CcoUnitsCustomBattleTypeRecord" : 
	{
		"area" : "Record",
		"doc" : "Wrapper for a UNITS_CUSTOM_BATTLE_TYPE_RECORD",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoUnitsCustomBattleTypeRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattleTypeRecord"
				}
			},
			
			{
				"name" : "SortOrder",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "Colour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"name" : "LocalisedDescription",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "CategoryTypeName",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "TypeIcon",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "TypeCategoryContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattleTypeCategoryRecord"
				}
			},
			
			{
				"name" : "RootTypeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitsCustomBattleTypeRecord"
				}
			},
			
			{
				"name" : "BaseUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"name" : "AlternateUnitContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			}
		]
	},
	"CcoVector2" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoVector2",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector2"
					}
				],
				"name" : "Distance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "Modulus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "y",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "x",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector2"
				}
			}
		]
	},
	"CcoVector3" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoVector3",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector3"
					}
				],
				"name" : "Distance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "Modulus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "z",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "y",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "x",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector3"
				}
			}
		]
	},
	"CcoVector4" : 
	{
		"area" : "Misc",
		"is_persistent" : true,
		"is_temporary" : true,
		"name" : "CcoVector4",
		"symbols" : 
		[
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"name" : "Distance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "Modulus",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "w",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "z",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "y",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "x",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			}
		]
	},
	"CcoVictoryConditionRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoVictoryConditionRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"CcoVideoRecord" : 
	{
		"area" : "Record",
		"is_persistent" : true,
		"is_temporary" : false,
		"name" : "CcoVideoRecord",
		"symbols" : 
		[
			
			{
				"name" : "RecordList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayVideo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Key",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			}
		]
	},
	"global" : 
	{
		"symbols" : 
		[
			
			{
				"name" : "CurrentSelectedComponents",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns percentage of first value number against second value which is total (with guard against divide by zero",
				"name" : "Percentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "SelectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "Shows a prompt with two buttons.",
				"name" : "ShowCustomPrompt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Enables inspection of text sources and missing strings, used for retail where cant change tweakers via console or debug menus but still want to inspect text for localisation QA!",
				"name" : "InspectTextSources",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, and returns stored bool value in shared state with that key (bool SharedStateReadBool(String key)). Value will be false if doesnt exist in registry.",
				"name" : "SharedStateReadBool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the combination of ContextTypeId + ContextObjectId, which is used by script get_context_value to retrieve values so useful to be able to query.",
				"name" : "ContextCacheId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns a list that has combined similar contexts.",
				"name" : "SummedValueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns the CcoMultiplayerRoot context, useful for getting information on current mp setup",
				"name" : "MultiplayerRootContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoMultiplayerRoot"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Shows a battle objective (handy for testing out show_objective script func and historical_objective_panel layout). Takes a message to display and a duration in ms for how long to show for",
				"name" : "ShowBattleObjective",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoMainUnitRecord"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Tries to find characters with the given main unit record, returns a list of any found. Can optionally just get the first one found",
				"name" : "FindCharactersOfUnit",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Resets the text reveal, starts from beginning again",
				"name" : "ResetReveal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignBattle singleton if we are in a pending battle",
				"name" : "CampaignBattleContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBattle"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Returns the settlement context at the specified position",
				"name" : "SettlementAtPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"name" : "HasPlayedMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the current VRAM memory used (requested for GSAT autotest script for storing information for benchmarks)",
				"name" : "VramUsage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"name" : "IsSearchActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Opens context viewer and inspects the specified context",
				"name" : "InspectInContextViewer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"name" : "_test_unistring_ref",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"name" : "RitualCastTimeLeft",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Given some text, returns a filtered version of text replacing any profanity with *",
				"name" : "FilterProfanity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Shows a prompt with two buttons.",
				"name" : "ShowPrompt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the colour of the main theme skin",
				"name" : "MainThemeColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Given a number in seconds, formats into minutes and seconds",
				"name" : "FormatTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "SetMaxSliderValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "ExpectedSymbol",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Convert a string to a floating point number",
				"name" : "ToNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets the specified boolean environment setting",
				"name" : "SetPrefAsBool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_bool_bool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the current UI skin",
				"name" : "CurrentSkin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns the absolute of the value passed in",
				"name" : "Abs",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"name" : "CurrentSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoContextSelection"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Convert string to an uppercase string",
				"name" : "ToUpperCase",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_test_string_ref",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the unique name of the supplied context object within a type (such as the unique id of a particular CcoBattleUnit or a record key). Useful for script",
				"name" : "ContextObjectId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "GetValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoBuildingChainRecord"
					}
				],
				"doc" : "Returns the slot that contains a building from the given chain",
				"name" : "RegionSlotFromBuildingChain",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignBuildingSlot"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Computes cosine of number",
				"name" : "Cos",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"doc" : "Returns the game core context",
				"name" : "GameCoreContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoGameCore"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns a Cco holding the state of the current pooled resource transfer",
				"name" : "PooledResourceTransferContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPooledResourceTransfer"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Similar to UiMsg in that it broadcasts the specified string as a UI_UPDATE_MSG to allow anything to react to it, but sends the message through the command system so can use to say perform a command and send a message for things to react once that command has been processed since order guaranteed!",
				"name" : "UiMsgCampaignCommand",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Skips the reveal of text, shows all the text",
				"name" : "SkipReveal",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the ability intensity setting context (from either the CcoBattleAbility or CcoBattleUnitEffect stored in the parent",
				"name" : "IntensitySettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpecialAbilityIntensitySettingRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					}
				],
				"name" : "IsChildOfAnySearchResult",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoTechnologyRecord"
					}
				],
				"doc" : "Opens the tech tree. Opens to specified tech if optionally provided",
				"name" : "ShowTechTree",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Clamps a float between two values",
				"name" : "Clamp",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Convert set of numbers to a vector (up to 4)",
				"name" : "ToVector",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Creates a CcoPieData from function",
				"name" : "MakePie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPieData"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, and returns stored float value in shared state with that key (int SharedStateReadFloat(String key)). Value will be -1 if doesnt exist in registry.",
				"name" : "SharedStateReadFloat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"doc" : "Quits to frontend main menu from battle or campaign",
				"name" : "QuitToMainMenu",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if using chinese",
				"name" : "IsLocChinese",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Takes a year then season string, and puts in right order based on language (asian languages have other way around)",
				"name" : "YearSeasonFormat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "IsRefreshing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "_testing_symbol_exposure_F_bool_bool_bool_bool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "SetMinSliderValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_float32_float32_float32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns true if all objects of the list satisfy the given expression.",
				"name" : "All",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of all script locks that are currently active, in case want to check a few and save typing in IsScriptLockActive for them all",
				"name" : "ScriptLockList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Loads the specified save file",
				"name" : "LoadSave",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Creates a CcoContextSelection from a CONTEXT_LIST",
				"name" : "CreateSelectionList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoContextSelection"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"name" : "RestartEmitter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns either the contained character(agent) if exists, or the selected character if any",
				"name" : "SelectedOrContainedCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"doc" : "Returns the localisation language the game is using",
				"name" : "LocLanguage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns the CcoJadeDatabase",
				"name" : "JadeDatabaseContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoJadeDatabase"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"name" : "_test_unistring_fwd",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if demo ifdef enabled for bespoke demos",
				"name" : "IsDemoUIEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetVfxScale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the distinct elements of the list.",
				"name" : "Distinct",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "IsWaaaghActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Colour"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Colour"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns the interpolation of two colours using specified colours and percent",
				"name" : "InterpolateColours",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Returns true if currently in the loading screen",
				"name" : "IsLoadingScreenActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Will open a specified panel with the given context list passed to the component. Can also optionally pass a bool before each context to specify if they should propagate or not",
				"name" : "OpenPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Ssame as RunCLI but if mp campaign runs the command on all players games at the same time",
				"name" : "RunCLIMultiplayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					}
				],
				"name" : "IsInSearchResults",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "ClearSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Floors a float and returns it as an int",
				"name" : "Floor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "math" ]
			},
			
			{
				"name" : "ClearStoredTechRecords",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the localised date format",
				"name" : "LocalisedDateFormat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Closes all open panels",
				"name" : "CloseAllPanels",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the type name of the supplied context object (the class name, such as CcoBattleUnit). Useful for script",
				"name" : "ContextTypeId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"doc" : "Returns the component that created this ContextLayoutTooltip",
				"name" : "TooltipParent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "SetSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Value",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns the value of an effect multiplied by the current intensity (calculated from CcoBattleAbility stored in parent)",
				"name" : "AbilityApplyIntensity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns list of files in specified directory",
				"name" : "DirectoryFileList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Sets episodic script override flag to be enabled / disabled specified by key",
				"name" : "SetScriptLock",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns true if at least one object of the list satisfies the given expression.",
				"name" : "Any",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Takes a String id, and writes supplied float value to shared state with that key (void SharedStateWriteFloat(String key, float value))",
				"name" : "SharedStateWriteFloat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Spawns specified agent type at selected character/settlement for dev purposes. Can specify an agent subtype, if none specified will select at random",
				"name" : "DevSpawnCharacterAtSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if supplied string key exists. Will search all tables (key is in format tablename_fieldname_recordkey)",
				"name" : "StringExists",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns a list of CcoShapeshiftForms in this campaign",
				"name" : "ShapeshiftFormsThisCampaignList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoShapeshiftForm"
				}
			},
			
			{
				"name" : "Kill",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Gets the frontend root context in frontend (handy starting point for all things frontend related)",
				"name" : "FrontendRoot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFrontendRoot"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Convert set of numbers to a vector4 (up to 4)",
				"name" : "ToVector4",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"doc" : "Returns true if any teleport HUD panel is open",
				"name" : "IsAnyTeleportHUDPanelOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the colour of the given key from the ui_colours table",
				"name" : "GetColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns a string with each of the elements combined into a string with the given separator between each element.",
				"name" : "JoinString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets the cursor scaling setting. 0-default, 1-2k, 2-4k",
				"name" : "ChangeCursorSize",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetVfxPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if current game mode is part of the prologue/tutorial (in battle or campaign)",
				"name" : "IsTutorial",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "_testing_symbol_exposure_F_bool_bool_bool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"name" : "ClearSearchResults",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Runs console command supplied, but not in final release to avoid calling commands not meant to",
				"name" : "RunCLI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"doc" : "Return the selected character if any",
				"name" : "SelectedCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignCharacter"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns true if the type of the given context is the one specified in the argument list.",
				"name" : "IsOfType",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if specified file exists",
				"name" : "FileExists",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "file" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Returns the CcoRegionRecord at the given position",
				"name" : "RegionRecordContextAtPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoRegionRecord"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Takes a String id, and writes supplied bool value to shared state with that key (void SharedStateWriteBool(String key, bool value))",
				"name" : "SharedStateWriteBool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "SetEnabled",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if current game mode is multiplayer (in battle or campaign)",
				"name" : "IsMultiplayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context of specified type from the specified parent, and will assert on failure",
				"name" : "StoredContextFromParentRequired",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns a list with all the elements of the given list that satisfy the condition.",
				"name" : "Filter",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns true if holding space shortcut to force display all UI",
				"name" : "BattleIsDisplayingAllUI",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if any HUD panel is open",
				"name" : "IsAnyHUDPanelOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the context with the largest evaluated value (for example if MaxContext(CeoList, RarityLevel) would return ceo context with largest rarity level)",
				"name" : "MaxContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns true if can currently show events",
				"name" : "CanShowEvents",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns a string for supplied key. Will search all tables (key is in format tablename_fieldname_recordkey)",
				"name" : "StringGet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "ClearSelectionForParent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Ceilings a float and returns it as an int",
				"name" : "Ceiling",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_UniString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Convert set of numbers to a vector3 (up to 3)",
				"name" : "ToVector3",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector3"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Adds a new record in the supplied records table, Useful for dev uis",
				"name" : "AddRecordInDB",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Unlocks the cursor",
				"name" : "UnlockCursor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Return the selected province if any",
				"name" : "SelectedProvince",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignProvince"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Will close a specified panel",
				"name" : "ClosePanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if specified script ui override is currently set to locked by script",
				"name" : "IsScriptLockActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "_testing_symbol_exposure_F_bool_bool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns a formatted number using ICU library.",
				"name" : "FormatNumberCustom",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_test_string_fwd",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the current colour profile setting",
				"name" : "ColourProfile",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"name" : "_test_unistring",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the list of symbols associated with the given cco.",
				"name" : "CompileExpression",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"doc" : "Return the root campaign model context in campaign",
				"name" : "CampaignModelRoot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignModelRoot"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if supplied context is the top context on the stack (for things like when iterating through a list to check the current iterator basically)",
				"name" : "IsCurrentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context specified by type id, from this component by default or by a target if specify target/parent ids, and will assert on failure",
				"name" : "StoredContextRequired",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "SetValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if currently in tacmap view",
				"name" : "IsTacticalMap",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns the CcoCampaignUnitUpgradesManager.",
				"name" : "UnitUpgradeManagerContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignUnitUpgradeManager"
				}
			},
			
			{
				"doc" : "Returns true if current game mode is a benchmark (in battle or campaign)",
				"name" : "IsBenchmark",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "IsCellUnlocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "SearchForComponentWithPredicate",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetVfxOrientation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns true if specified panel is open, or if any are open if none specified",
				"name" : "IsPanelOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Convert set of numbers to a vector2 (up to 2)",
				"name" : "ToVector2",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector2"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a float with the battle ai stats modifier converted from the passed in difficulty",
				"name" : "BattleAiStatsModifierFromDifficulty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_UniString_UniString_UniString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"name" : "Close",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Locks cursor to specified type",
				"name" : "LockCursor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the context with the smallest evaluated value (for example if MinContext(CeoList, RarityLevel) would return ceo context with smallest rarity level)",
				"name" : "MinContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "RefreshValues",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns a formatted number using ICU library.",
				"name" : "FormatNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Rounds a float to nearest int",
				"name" : "RoundFloat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Takes a database record wrapper context type id as the first parameter, then any number of keys to retrieve (CONTEXT_LIST DatabaseRecordsForKeys(String object_type, String db_key...))",
				"name" : "DatabaseRecordsForKeys",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				},
				"tags" : [ "database" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "SetSelectedState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SelectionParentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "ScrollByValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns keys involved for primary shortcut as separate string values so can show keys (modifier and shortcut) as separate entries (so look like keyboard keys)",
				"name" : "ShortcutKeyList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				}
			},
			
			{
				"doc" : "Returns the current zoom scale for the minimap",
				"name" : "CampaignMinimapZoomScale",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Vector2"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Float"
					}
				],
				"doc" : "Returns true if the given world position is on screen. If required, can extend screen size by a given amount, take into account camera fading and offset the distance that objects are faded out.",
				"name" : "IsWorldPositionOnScreen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Toggles the specified boolean environment setting",
				"name" : "TogglePrefBool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns list of matching search result context objects, given the type and a search term which is used to check against object id and Name functions of object ids of this type. Used for dev tools search functionality to look for particular matching contexts with search text inputs for example",
				"name" : "SearchContext",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns the object id of the given cco.",
				"name" : "GetContextObjectId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "_testing_symbol_exposure_F_float32_float32_float32_float32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "IndexOfEntry",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Returns true if any unit is currently selected",
				"name" : "IsUnitSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns a localised string for supplied key. In campaign will check campaign_localisation_strings first. After that will use random_localisation_strings table",
				"name" : "Loc",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context of specified type from the specified parent",
				"name" : "StoredContextFromParent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				},
				"tags" : [ "context" ]
			},
			
			{
				"doc" : "Used by nightly autotest to update some UI data files every night to avoid having to do this manually. E.G. Context metadata, documentation, logs like warnings",
				"name" : "GenerateNightlyUiData",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"name" : "ValueMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					},
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Edits the supplied record fields in Dave, Useful for dev uis",
				"name" : "EditFieldsInDB",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetVfxVelocity",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Looses the fractional part of the number",
				"name" : "Trunc",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "math" ]
			},
			
			{
				"doc" : "Closes the Unit info panel type.",
				"name" : "CloseUnitInfoPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_testing_symbol_exposure_F_String_String",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a database record wrapper context type id and a db key, and returns the wrapper for that record",
				"name" : "DatabaseRecordContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				},
				"tags" : [ "database" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true is the specified HUD panel is open",
				"name" : "IsHUDPanelOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Return the selected settlement if any",
				"name" : "SelectedSettlement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"doc" : "Returns whether the current battle phase is post battle",
				"name" : "InPostBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "SelectedComponent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"name" : "CurrentSearchResults",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"name" : "FreeCcoSymbolTest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Sends a UITrigger event with the specified key to script for script to handle (useful for contexts interacting with script). In campaign will go via command queue.",
				"name" : "TriggerScriptEvent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Select",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Returns the screen space position for specified world position",
				"name" : "WorldSpaceToScreenSpace",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "ScrollToValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the largest evaluated value (for example if MaxValue(CeoList, RarityLevel) would return largest rarity level)",
				"name" : "MaxValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"name" : "test_get_lists",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "CanGiftUnitsToPlayer",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if camera currently doing a height transition between tacmap and normal mode (camera locked to the height transition)",
				"name" : "IsCameraHeightTransitioning",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoCampaignFaction"
					}
				],
				"doc" : "Opens the war-coordination panel with faction pre-selected if given one.",
				"name" : "OpenWarCoordinationPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "GetList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignMission"
					}
				],
				"name" : "ShouldShowMission",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Converts world space position to 2d radar position percentage",
				"name" : "BattleRadarPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Outputs a .csv file with the contents of the image cache so can see memory usage, references, to identify potential memory savings",
				"name" : "CreateImageCacheReport",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Used to avoid asserts when calling an expression that is expected to fail on certain calls",
				"name" : "Try",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				},
				"tags" : [ "flow " ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Converts a world position to a radar position (0-1 percent used for ContextRadarIcon)",
				"name" : "CampaignRadarPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns current key as string for the specified shortcut",
				"name" : "ShortcutKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Retrieve the specified environment setting as a unistring",
				"name" : "PrefAsUniString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Closes the specified info panel type.",
				"name" : "CloseInfoPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Shows the specified message as an assert dialog, can optionally specify a second parameter as the condition to assert against",
				"name" : "AssertMessage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Format the given string based on the argument list",
				"name" : "Format",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Compiles the given expression and returns it as a CcoContextExpression. If it fails to compile, it will return a list of CcoContextExpressionCompilationError instead.",
				"name" : "RetrieveSymbolsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetVfxColourAlpha",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Views the supplied context in Dave if dave is open (opens table and selects the record). Useful for dev uis",
				"name" : "ViewInDb",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"name" : "IsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_String_String_String",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Toggles the specified HUD panel",
				"name" : "ToggleHUDPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "_testing_symbol_exposure_F_float32_float32_float32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"name" : "HandleEquip",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Returns context given the type and object ids. Can also specify false as 3rd parameter to suppress errors if fail to find (otherwise defaults to error).  Handy for debugging in context expression tester and creating own debug layouts, but NOT ADVISED use in layouts as ids can change and break layouts!",
				"name" : "FindContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					}
				],
				"name" : "ScrollToComponent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_bool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "Test", "UnitTesting", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the smallest evaluated value (for example if MinValue(CeoList, RarityLevel) would return smallest rarity level)",
				"name" : "MinValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Converts a logical position to a display position for campaign",
				"name" : "LogicalToDisplayPos",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Returns whether there is a pending battle going on",
				"name" : "InPendingBattle",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "ScrollToComponent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the stored context specified by type id, from this component by default or by a target if specify target/parent ids",
				"name" : "StoredContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "If the conditional expression is true it will get value of the second expression otherwise the value of the third.",
				"name" : "GetIfElse",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				},
				"tags" : [ "flow" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"name" : "GiftUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FreeSecond",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the current enemy faction to player in prebattle screen",
				"name" : "PendingBattleEnemyFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Takes a source string as the first parameter, then replaces all instances of the second string param with the third string parameter",
				"name" : "StringReplace",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"doc" : "Return the event feed context",
				"name" : "EventFeedContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignEventFeed"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Modulus operation. Takes the number and the value to mod by",
				"name" : "Mod",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Returns a list with the given context repeated N amount of times.",
				"name" : "Generate",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if a component with the given GUID exists.",
				"name" : "DoesGUIDExist",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Used to determine when to show icons indicating there is a pending war coordination request for this target (target being the supplied force or settlement). Currently returns true if the target is a request from the faction talking to in diplomacy)",
				"name" : "ShouldShowWarCoordinationPendingRequest",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Closes any open ContextLayoutTooltips anywhere in the UI",
				"name" : "CloseAllContextLayoutTooltips",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Zoom to the specified location",
				"name" : "ZoomToPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SelectedComponents",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "This is a way to lookup a CcoScriptObject context via id for use in expression. Consider using ContextInitScriptObject if want automatic updates and trivial function",
				"name" : "ScriptObjectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoScriptObject"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a database record wrapper context type id and returns the default record for this type.",
				"name" : "DefaultDatabaseRecord",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				},
				"tags" : [ "database" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "Double",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"doc" : "Stop playing loading screen music",
				"name" : "StopLoadingScreenMusic",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "sound" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "CcoBuildingLevelRecord"
					}
				],
				"doc" : "Opens the building browser and passes the context of the building level if any has been provided",
				"name" : "ShowBuildingBrowser",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "CurrentInspectedContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Opens the unit info panel.",
				"name" : "OpenUnitInfoPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Triggers the specified UI_UPDATE_MSG event",
				"name" : "UiMsg",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "ResetUnitCardStates",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "RemovePin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the length of the given string",
				"name" : "StringLength",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "SetMinRangeValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Gets the target position of the campaign camera",
				"name" : "CameraTargetPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"doc" : "Outputs a .csv file with the UI warnings for all game layouts (by running the queries on the layout cache)",
				"name" : "CreateUiWarningReport",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Reorders the elements in such a way that all elements for which the predicate returns true precede the elements for which predicate p returns false.",
				"name" : "Partition",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"doc" : "Returns true if simultaneous turns mode",
				"name" : "IsSimultaneousTurns",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "EltharionChallengeRecipeNumber",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Converts degrees to radians",
				"name" : "DegreesToRadians",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"doc" : "Gets the battle selection context (info on what is selected, commands to select, etc)",
				"name" : "BattleSelectionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleSelection"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Retrieve the specified environment setting as a float",
				"name" : "PrefAsFloat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Colour"
					}
				],
				"name" : "SetVfxColourTint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Will return the value of the expression only if the condition is true.",
				"name" : "GetIf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				},
				"tags" : [ "flow" ]
			},
			
			{
				"name" : "GetPaddingDimensions",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector2"
				}
			},
			
			{
				"doc" : "Stop playing loading screen voiceover",
				"name" : "StopLoadingScreenVoiceover",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "sound" ]
			},
			
			{
				"doc" : "Return the root campaign context in campaign",
				"name" : "CampaignRoot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignRoot"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a database record wrapper context type id and returns a list of all the wrappers of this type.",
				"name" : "DatabaseRecords",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				},
				"tags" : [ "database" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Return an int value of the campaign variable passed in, if such variable exists",
				"name" : "CampaignVariableIntValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if the first string contains the second string",
				"name" : "StringContains",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"name" : "test_get_6",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Returns vector3 middle point between two vector3 points (takes vector4s but ignores the w",
				"name" : "MidPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				},
				"tags" : [ "math" ]
			},
			
			{
				"name" : "test_get_5",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Stores a context list with an id so you can easily retrieve it",
				"name" : "StoreList",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoContextList"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Returns distance of specified position from camera",
				"name" : "DistanceToCamera",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "_testing_symbol_exposure_F_float32_float32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "TestReturnAnyTypes",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"name" : "AnySelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if should show shadowy dealings info, specific to some skaven factions in WH3",
				"name" : "ShouldShowShadowyDealingsInfo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Opens the encyclopedia.",
				"name" : "ShowEncyclopedia",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns the list of selected items from the ContextSelectionManager provided.",
				"name" : "RetrieveSelectedItemList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "ClearPin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					}
				],
				"doc" : "Returns a list of units contained in the given unit set. This is an expensive query for dev use, do not use it in panel contexts",
				"name" : "CalculateUnitsInUnitSet",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoMainUnitRecord"
				}
			},
			
			{
				"name" : "NumberOfCookedRecipes",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Returns a substring between the given start position and optional length",
				"name" : "StringSubString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Converts radians to degrees",
				"name" : "RadiansToDegrees",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignPooledResource"
					}
				],
				"doc" : "Specific function for kislev_winter panel, put in code as way too complicated/confusing to do as an expression. Takes pooled resource, and gets percentage compared the the campaign_group numeric ranges up to wh3_main_ksl_followers_tresholds_5",
				"name" : "KislevFollowersPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignCharacter"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Selects the passed in character and opens character details panel. Optional bool specifies whether to select the skill tab",
				"name" : "SelectAndShowDetailsForCharacter",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Returns the numerical sum of the transformed elements.",
				"name" : "Sum",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"name" : "CurrentSelectedContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Retrieve the specified environment setting as an int",
				"name" : "PrefAsInt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"doc" : "Gets the position of the campaign camera",
				"name" : "CameraPosition",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"name" : "SaveRadarImage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SelectedContexts",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_String_String",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"name" : "test_get_4",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Specific to WH3, opens unit browser, and if a CcoCultureRecord is specified selects that culture to view units for",
				"name" : "OpenUnitBrowser",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns a context list of all the contexts of the functions passed as arguments",
				"name" : "Join",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns if the Component's centre is within the distance given in the args",
				"name" : "IsComponentCloseToCursor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Gets the battle cursor context (mouseover info)",
				"name" : "BattleCursorContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleCursorContext"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_float32_float32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "_testing_symbol_exposure_F_int32_int32_int32_int32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns a list of all components under mouse regardless of interactive state, but ordered so bottom to top, and with interactive mouseovers at the very top (used for debug display in context viewer to help debug components for example",
				"name" : "ComponentsUnderMouseList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoComponent"
				},
				"tags" : [ "component", "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a random number between [min,max]",
				"name" : "RandomInRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "random" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetVfxSpawnRateScaleFactor",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Retrieve the specified tweaker as an int",
				"name" : "TweakerAsInt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "tweakers" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					}
				],
				"name" : "DevGetEntryTierPos",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, and returns the stored Bool value in the registry for that key (Bool RegistryReadInt(String key))",
				"name" : "ScriptedValueRegistryReadBool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"doc" : "Stops a specified sound in loading screen",
				"name" : "StopLoadingScreenSound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "sound" ]
			},
			
			{
				"name" : "ForceContainsUpgradableUnits",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns a CcoFactorBreakdown created with context_lists passed as arguments.",
				"name" : "FactorBreakdown",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoFactorBreakdown"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a true random number (different each game session) in the given range",
				"name" : "TrueRandomInRange",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					}
				],
				"name" : "SelectButton",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Opens the shadowy dealings with the current selection as a target",
				"name" : "OpenShadowyDealingPanelForCurrentTarget",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the text currently in the clipboard",
				"name" : "PasteStringFromClipboard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"doc" : "Returns true if campaign overlay showing (when hold space)",
				"name" : "IsCampaignOverlayShowing",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "TestReturnAny",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				}
			},
			
			{
				"doc" : "Return the players faction context",
				"name" : "PlayersFaction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Used to wrap an expression and will return a string containing the number of milliseconds that execution took (the real return value is lost)",
				"name" : "Measure",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "SetMaxRangeValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCookingRecipeRecord"
					}
				],
				"name" : "HasRecipeBeenCooked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if currently playing a multiplayer time of legends campaign",
				"name" : "IsTimeOfLegendsCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns whether it is any human players turn (local player or another human in mpc)",
				"name" : "IsHumanPlayersTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Returns true if a fullscreen panel is open",
				"name" : "IsFullscreenPanelOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Skip the first x elements of the list.",
				"name" : "Skip",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "SetVfxSpawnSpeed",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_float32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Retrieve the specified environment setting as a bool",
				"name" : "PrefAsBool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Saves game with specified name (used by script for example)",
				"name" : "SaveCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Evaluates condition (1st param), calls first expression (2nd param) if true, second expression (3rd param) if false",
				"name" : "DoIfElse",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "flow" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "ExprToJSON",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "test_get_3",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if the first string ends with the second string",
				"name" : "StringEndsWith",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns the first n elements of the list.",
				"name" : "Take",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"name" : "AnimationState",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineAnimationState"
				}
			},
			
			{
				"doc" : "Returns context of the root component",
				"name" : "RootComponent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				},
				"tags" : [ "component" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Expression"
					}
				],
				"doc" : "Used to wrap an expression and will break in debugger before evaluation",
				"name" : "Breakpoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				},
				"tags" : [ "debug" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Computes sine of number",
				"name" : "Sin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"name" : "Pin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "TryEnsureUpgradableUnitsSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignUnit"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Specific to WH3, added to ensure multiple places that use keep in sync. Returns true if in custom battle and 1080p or above res, determines when to show abilities at same time as stats on unit info panel",
				"name" : "IsShowingExpandedUnitInfo",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"doc" : "Get the animation time dilation scale (1.0 = 100%) for all component animation",
				"name" : "GetComponentAnimationTimeDilation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Retrieve the specified tweaker as an float",
				"name" : "TweakerAsFloat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "tweakers" ]
			},
			
			{
				"doc" : "Returns a list of forms avaialable for custom battle as CcoMainUnitRecords",
				"name" : "CustomBattleShapeshiftFormsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoShapeshiftForm"
				}
			},
			
			{
				"name" : "test_get_2",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns true if war coordination panel open",
				"name" : "IsWarCoordinationOpen",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Computes the arc tangent of y / x using the signs of arguments to determine the correct quadrant",
				"name" : "ArcTan2",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"name" : "InitialiseCamera",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Runs the given expressions only if the condition is true",
				"name" : "DoIf",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "flow" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"name" : "TestArgPack_Int",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignSettlement"
					}
				],
				"doc" : "Opens the caravan recruitment panel",
				"name" : "OpenCaravanRecruitmentPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SelectionManagingComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns the CcoComponent context of the specified panel if it's open",
				"name" : "PanelContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if the first string starts with the second string",
				"name" : "StringStartsWith",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"doc" : "Gets the players army context in battle",
				"name" : "PlayerArmy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleArmy"
				}
			},
			
			{
				"name" : "StopVfx",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Takes 2 numbers and returns max value (called this instead of Max to not conflict with existing member functions which is an issue in runtime objects currently)",
				"name" : "MaxNumericValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"doc" : "Returns whether it is the local players turn",
				"name" : "IsLocalPlayersTurn",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "DevAdjustTierPos",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Plays a specified sound in loading screen",
				"name" : "PlayLoadingScreenSound",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "sound" ]
			},
			
			{
				"name" : "StopMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "test_get_1",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"name" : "Skeleton",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoSpineSkeleton"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Computes arc tangent of number",
				"name" : "ArcTan",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"doc" : "Returns current disabled component mouse over",
				"name" : "CurrentDisabledMouseOverComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				},
				"tags" : [ "component" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "_testing_symbol_exposure_F_int32_int32_int32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, and returns stored String value in registry with that key (String RegistryReadInt(String key)). Value will be String::empty_string() if doesnt exist in registry.",
				"name" : "RegistryReadString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"name" : "UpgradingUnitsContextList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoCampaignUnit"
				}
			},
			
			{
				"name" : "ClearSelection",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Quits the current campaign",
				"name" : "QuitCampaign",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Gets the enemy alliance context in battle",
				"name" : "EnemyAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"name" : "PlayMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns the id of the platform currently playing on (e.g. steam, epic, microsoft)",
				"name" : "StorePlatformId",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"name" : "GetValueAllocatedUpper",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"name" : "InputSetText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"name" : "TestArgPack_String",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns a string that has had text replacements parsed (any text replacement tags will be replaced with actual text)",
				"name" : "ParseTextReplacements",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"doc" : "Closes the unit recruitment panel if it's currently open",
				"name" : "CloseUnitRecruitmentPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns a localised colon: fullwidth in Chinese or halfwidth + space in other languages.",
				"name" : "LocalisedColonWithSpace",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "SetComponentDockPoint",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns current component mouseover",
				"name" : "CurrentMouseOverComponentContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				},
				"tags" : [ "component" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Simple way to join multiple commands in a single expression",
				"name" : "Do",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "flow" ]
			},
			
			{
				"doc" : "Specific to WH3, Closes the spell/unit browser",
				"name" : "CloseSpellBrowser",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns whether the specified skin is currently being used",
				"name" : "IsSkinActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Copies the supplied text to the clipboard for pasting",
				"name" : "CopyStringToClipboard",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_int32_int32_int32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Evaluates specified expression",
				"name" : "EvaluateExpression",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "ArgumentPack"
				},
				"tags" : [ "context" ]
			},
			
			{
				"doc" : "Returns the campaign key",
				"name" : "CampaignKey",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Returns true if the string is empty",
				"name" : "IsStringEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "_testing_symbol_exposure_F_int32_int32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Test documentation",
				"name" : "_test_meta_free_F_tags",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "Test", "UnitTesting", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, and writes supplied String value to registry with that key (void RegistryWriteInt(String key, String value))",
				"name" : "RegistryWriteString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Takes 2 numbers and returns min value (called this instead of Min to not conflict with existing member functions which is an issue in runtime objects currently)",
				"name" : "MinNumericValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Creates CcoUnitAbility for ability with specified key",
				"name" : "UnitAbilityContextFromString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoUnitAbility"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Performs expression on each context in list (for giving commands to multiple contexts)",
				"name" : "ForEach",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "rule_test",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Retrieve the specified tweaker as an bool",
				"name" : "TweakerAsBool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "tweakers" ]
			},
			
			{
				"name" : "PlayVfx",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					}
				],
				"name" : "DevGetEntryOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Vector4"
				}
			},
			
			{
				"name" : "CurrentColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Replaces colour tags with dark colour versions if the current skin is not wh3.",
				"name" : "ColourTextForCurrentSkin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "TooltipParent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Set the animation time dilation scale (1.0 = 100%) for all component animation",
				"name" : "SetComponentAnimationTimeDilation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_String",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns true if the current camera height is the parchement only height",
				"name" : "IsParchmentOnlyCameraHeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "GetText",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"name" : "Resume",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "SelectFirstVisible",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Closes the diplomacy panel if it's currently open",
				"name" : "CloseDiplomacyPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "SetValueAllocatedUpper",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "Ten",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_int32_int32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "SelectDropdownItem",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Returns true if the specified display/real position is covered under the shroud",
				"name" : "IsShrouded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Adds default skin path to beginning of supplied image name (ui/skins/default/). Actually skinning handled internally so dont need to worry about that.",
				"name" : "AddDefaultSkinPath",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Plays a fullscreen movie with supplied path, once movie finishes the movie player trashes itself",
				"name" : "PlayFullscreenMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ContextList"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Transforms the list into a new one where each element is produced by the given expression (like the map function).",
				"name" : "Transform",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "DevAdjustOffset",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns parsed text replacement tags in the given string and uses the list of overrides in priority order to retrieve the correct string",
				"name" : "ParseTextReplacement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Similar to CreateComponent above, but if component already exists it will trash it. Added mainly to simplify dev ui creation.",
				"name" : "ToggleComponent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns maximum integer value",
				"name" : "IntMax",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "math" ]
			},
			
			{
				"doc" : "Returns a localised comma: fullwidth in Chinese or halfwidth + space in other languages.",
				"name" : "LocalisedCommaWithSpace",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Returns true if the string is empty",
				"name" : "IsStringEmpty",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "string", "deprecated" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Returns a localised string in the diplomacy_strings table given key",
				"name" : "DiplomacyLoc",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoCampaignUnit"
					}
				],
				"name" : "IsUnitPartOfSet",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"doc" : "Returns true if specified context is not null",
				"name" : "IsContextValid",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"doc" : "Opens given url in overlay if available, if not in external browser",
				"name" : "OpenOverlayToUrl",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "HasTargetSelected",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "LoadMetadata",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Opens up the TW academy in the browser supplying the component clicked on so can open a relevant page",
				"name" : "OpenAcademy",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Gets the players alliance context in battle",
				"name" : "PlayerAlliance",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleAlliance"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"doc" : "Sets the specified unistring environment setting",
				"name" : "SetPrefAsUniString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"name" : "test_get_0",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"name" : "Pause",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Zooms the camera to the default camera height",
				"name" : "ZoomToDefaultCameraHeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "SelectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Computes arc cosine of number",
				"name" : "ArcCos",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "FreeFunction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_UniString_UniString",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"name" : "GetValueAllocatedLower",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, and returns stored integer value in registry with that key (int RegistryReadInt(String key)). Value will be -1 if doesnt exist in registry.",
				"name" : "RegistryReadInt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Int"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"doc" : "Closes the currently opened HUD panel",
				"name" : "CloseCurrentHUDPanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Expression"
					}
				],
				"doc" : "Creates a CcoPair from the two parameters passed in",
				"name" : "MakePair",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoPair"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns value *100...",
				"name" : "FloatToPercent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math", "deprecated" ]
			},
			
			{
				"doc" : "Returns the faction currently selected in diplomacy",
				"name" : "DiplomacySelectedFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if the context has the specified function (passed in as a string)",
				"name" : "HasFunction",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "chain_global" ]
			},
			
			{
				"name" : "GetEffectsList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "ContextList"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "SetExpanded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoComponent"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ArgumentPack"
					}
				],
				"doc" : "Creates a component from specified layout, with specified parent as second param (use RootComponent for this param to just create as child of root); and will pass any number of optional contexts to the created layout, handy for testing out layouts without having to go through repro steps (can use CcoComponent::SetContext to then give context to fully test)",
				"name" : "CreateComponent",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "component" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_testing_symbol_exposure_F_String_String_String_String",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Sets the specified int environment setting",
				"name" : "SetPrefAsInt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Check if content is locked. WARNING - DO NOT RELY ON THIS AS ONLY MEANS OF LOCKING ACCESS TO CONTENT SINCE EASY TO MOD!",
				"name" : "IsContentLocked",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Plays movie with supplied path (used for dev purposes so currently creates a dev layout. If need this for release, might need to rename it or tidy up dev popup and make non dev layout",
				"name" : "PlayMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "debug", "hide_in_uied" ]
			},
			
			{
				"doc" : "Shows the Escape menu in battle/campaign",
				"name" : "ShowEscapeMenu",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Applies the supplied ui skin to the game",
				"name" : "ApplyUiSkin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, and returns if there's any state stored with that id (bool SharedStateReadBool(String key)).",
				"name" : "SharedStateValueExists",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoTechnologyRecord"
					}
				],
				"doc" : "Returns a CcoCampaignTechnology given a provided CcoTechnologyRecord.",
				"name" : "LookUpTechnology",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignTechnology"
				}
			},
			
			{
				"name" : "InitialiseIntriguePanel",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if player has any saved games (for continue campaign functionality for example)",
				"name" : "HasAnySavedGames",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Computes arc sine of number",
				"name" : "ArcSin",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"name" : "ExportMetadata",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Gets the battle root context in battle (handy starting point for all things battle related)",
				"name" : "BattleRoot",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoBattleRoot"
				}
			},
			
			{
				"name" : "TargetSettlementContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignSettlement"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_test_string",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Zooms the camera to the max height",
				"name" : "ZoomToMaxCameraHeight",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"name" : "Component",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoComponent"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Takes a String id, and writes supplied integer value to registry with that key (void RegistryWriteInt(String key, int value))",
				"name" : "RegistryWriteInt",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "registry" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_int32",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"name" : "IsPlayingMovie",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "DeselectContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "PlayOneShotAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"name" : "_testing_symbol_exposure_F_String_String_String",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "String"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"doc" : "Returns the faction currently negotiating with in diplomacy",
				"name" : "CurrentNegotiatingFactionContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "CcoCampaignFaction"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "UniString"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "CcoFactionRecord"
					}
				],
				"doc" : "Returns parsed text replacement tags in the given string and uses the faction record to retrieve the correct string",
				"name" : "ParseFactionTextReplacement",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Context"
					}
				],
				"name" : "PassContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"name" : "IsPlaying",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					}
				],
				"doc" : "Returns a formatted percentage using ICU library with the specified numebr of decimal places.",
				"name" : "FormatPercentageCustom",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string" ]
			},
			
			{
				"doc" : "Returns list of available skins the game uses assuming that all skins have a folder in the skins/ folder",
				"name" : "AvailableSkinList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns true if we currently have a root context that isnt empty (our context has been set)",
				"name" : "IsValidContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "context" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Float"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"doc" : "Centres the map 'camera' over the given world position. Can also pass a pixel offset and whether the transition is instant",
				"name" : "CentreOverTargetContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"doc" : "Returns true if a multiplayer lobby currently active, handy for checking if current game is multiplayer in frontend, battle or loading screens",
				"name" : "IsMultiplayerLobbyActive",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Sets the specified float environment setting",
				"name" : "SetPrefAsFloat",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "prefs" ]
			},
			
			{
				"name" : "IsExpanded",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "StartAnimation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"name" : "FreeContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"doc" : "Returns the context of the current targetting interface if there is one(for example if targetting war coordination might return the CcoCampaignFactionInteraction currently targetting this",
				"name" : "TargettingContext",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Context"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Bool"
					}
				],
				"name" : "_testing_symbol_exposure_F_void_bool_bool_bool",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				},
				"tags" : [ "hide_in_uied" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "SetValue",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Vector4"
					}
				],
				"doc" : "Gets the region or sea region name at specified location",
				"name" : "NameOfCampaignLocation",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Context"
					}
				],
				"doc" : "returns true if faction has access to a UI Feature, don't use to block access to feature since players can then get around the DLC check",
				"name" : "CanUseUiFeature",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				}
			},
			
			{
				"name" : "RitualCastTimePercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Computes tangent of number",
				"name" : "Tan",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Float"
				},
				"tags" : [ "math" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : true,
						"is_optional" : false,
						"type" : "ContextList"
					}
				],
				"doc" : "Sorts supplied string value list. Used for sorting combined string value lists (shouldnt need to use on normal lists as they should have it in the functions themselves)",
				"name" : "SortCombinedStringValueList",
				"return_type" : 
				{
					"is_container" : true,
					"is_optional" : false,
					"type" : "CcoStringValue"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Float"
					}
				],
				"doc" : "Returns a formatted percentage using ICU library.",
				"name" : "FormatPercentage",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "UniString"
				},
				"tags" : [ "string" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "ExpressionState"
					}
				],
				"doc" : "Returns the background theme colour, used in fullscreen panels, of the main theme skin",
				"name" : "MainThemeBackgroundColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				}
			},
			
			{
				"doc" : "Zooms the camera to the tactical view",
				"name" : "ZoomToTacticalView",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Bool"
					}
				],
				"name" : "SetValueAllocatedLower",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Void"
				}
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "Int"
					},
					
					{
						"is_container" : false,
						"is_optional" : true,
						"type" : "Int"
					}
				],
				"doc" : "Convert a set of numbers (0-255) to a colour (rgba, a is optional and defaults to 255 if not specified)",
				"name" : "ToColour",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Colour"
				},
				"tags" : [ "convert" ]
			},
			
			{
				"arguments" : 
				[
					
					{
						"is_container" : false,
						"is_optional" : false,
						"type" : "String"
					}
				],
				"doc" : "Takes a String id, checks if this value is in registry and if not returns true. Then sets value in registry. Use for showing components or setting states for first time in panels, etc",
				"name" : "IsFirstTime",
				"return_type" : 
				{
					"is_container" : false,
					"is_optional" : false,
					"type" : "Bool"
				},
				"tags" : [ "registry" ]
			}
		]
	}
}
